// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_manager.proto

#ifndef PROTOBUF_channel_5fmanager_2eproto__INCLUDED
#define PROTOBUF_channel_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace channel_manager {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_channel_5fmanager_2eproto();
void protobuf_AssignDesc_channel_5fmanager_2eproto();
void protobuf_ShutdownFile_channel_5fmanager_2eproto();

class DriverTimings;
class ADCTimeOffsets;
class AvailableChannels;
class MultiplexerInitParams;
class ServerVersion;
class ChannelManagerInitParams;
class ADCParams;
class ADCChannelInitParams;
class SynctaskChannels;
class RotChannelInitParams;
class RotData;

// ===================================================================

class DriverTimings : public ::google::protobuf::Message {
 public:
  DriverTimings();
  virtual ~DriverTimings();

  DriverTimings(const DriverTimings& from);

  inline DriverTimings& operator=(const DriverTimings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverTimings& default_instance();

  void Swap(DriverTimings* other);

  // implements Message ----------------------------------------------

  DriverTimings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DriverTimings& from);
  void MergeFrom(const DriverTimings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rot_run = 1 [default = 1000];
  inline bool has_rot_run() const;
  inline void clear_rot_run();
  static const int kRotRunFieldNumber = 1;
  inline ::google::protobuf::uint32 rot_run() const;
  inline void set_rot_run(::google::protobuf::uint32 value);

  // required uint32 adc_set_params1 = 2 [default = 500];
  inline bool has_adc_set_params1() const;
  inline void clear_adc_set_params1();
  static const int kAdcSetParams1FieldNumber = 2;
  inline ::google::protobuf::uint32 adc_set_params1() const;
  inline void set_adc_set_params1(::google::protobuf::uint32 value);

  // required uint32 adc_set_params2 = 3 [default = 100];
  inline bool has_adc_set_params2() const;
  inline void clear_adc_set_params2();
  static const int kAdcSetParams2FieldNumber = 3;
  inline ::google::protobuf::uint32 adc_set_params2() const;
  inline void set_adc_set_params2(::google::protobuf::uint32 value);

  // required uint32 adc_set_params3 = 4 [default = 100];
  inline bool has_adc_set_params3() const;
  inline void clear_adc_set_params3();
  static const int kAdcSetParams3FieldNumber = 4;
  inline ::google::protobuf::uint32 adc_set_params3() const;
  inline void set_adc_set_params3(::google::protobuf::uint32 value);

  // required uint32 adc_run = 5 [default = 100];
  inline bool has_adc_run() const;
  inline void clear_adc_run();
  static const int kAdcRunFieldNumber = 5;
  inline ::google::protobuf::uint32 adc_run() const;
  inline void set_adc_run(::google::protobuf::uint32 value);

  // required uint32 adc_run_sync = 6 [default = 100];
  inline bool has_adc_run_sync() const;
  inline void clear_adc_run_sync();
  static const int kAdcRunSyncFieldNumber = 6;
  inline ::google::protobuf::uint32 adc_run_sync() const;
  inline void set_adc_run_sync(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channel_manager.DriverTimings)
 private:
  inline void set_has_rot_run();
  inline void clear_has_rot_run();
  inline void set_has_adc_set_params1();
  inline void clear_has_adc_set_params1();
  inline void set_has_adc_set_params2();
  inline void clear_has_adc_set_params2();
  inline void set_has_adc_set_params3();
  inline void clear_has_adc_set_params3();
  inline void set_has_adc_run();
  inline void clear_has_adc_run();
  inline void set_has_adc_run_sync();
  inline void clear_has_adc_run_sync();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rot_run_;
  ::google::protobuf::uint32 adc_set_params1_;
  ::google::protobuf::uint32 adc_set_params2_;
  ::google::protobuf::uint32 adc_set_params3_;
  ::google::protobuf::uint32 adc_run_;
  ::google::protobuf::uint32 adc_run_sync_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DriverTimings* default_instance_;
};
// -------------------------------------------------------------------

class ADCTimeOffsets : public ::google::protobuf::Message {
 public:
  ADCTimeOffsets();
  virtual ~ADCTimeOffsets();

  ADCTimeOffsets(const ADCTimeOffsets& from);

  inline ADCTimeOffsets& operator=(const ADCTimeOffsets& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTimeOffsets& default_instance();

  void Swap(ADCTimeOffsets* other);

  // implements Message ----------------------------------------------

  ADCTimeOffsets* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCTimeOffsets& from);
  void MergeFrom(const ADCTimeOffsets& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 offset = 1;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // required sint32 error_code = 2 [default = 0];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:channel_manager.ADCTimeOffsets)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static ADCTimeOffsets* default_instance_;
};
// -------------------------------------------------------------------

class AvailableChannels : public ::google::protobuf::Message {
 public:
  AvailableChannels();
  virtual ~AvailableChannels();

  AvailableChannels(const AvailableChannels& from);

  inline AvailableChannels& operator=(const AvailableChannels& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvailableChannels& default_instance();

  void Swap(AvailableChannels* other);

  // implements Message ----------------------------------------------

  AvailableChannels* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvailableChannels& from);
  void MergeFrom(const AvailableChannels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated uint32 channel_idx = 2;
  inline int channel_idx_size() const;
  inline void clear_channel_idx();
  static const int kChannelIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_idx(int index) const;
  inline void set_channel_idx(int index, ::google::protobuf::uint32 value);
  inline void add_channel_idx(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channel_idx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channel_idx();

  // repeated uint32 rot_idx = 3;
  inline int rot_idx_size() const;
  inline void clear_rot_idx();
  static const int kRotIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 rot_idx(int index) const;
  inline void set_rot_idx(int index, ::google::protobuf::uint32 value);
  inline void add_rot_idx(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rot_idx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rot_idx();

  // @@protoc_insertion_point(class_scope:channel_manager.AvailableChannels)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channel_idx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rot_idx_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static AvailableChannels* default_instance_;
};
// -------------------------------------------------------------------

class MultiplexerInitParams : public ::google::protobuf::Message {
 public:
  MultiplexerInitParams();
  virtual ~MultiplexerInitParams();

  MultiplexerInitParams(const MultiplexerInitParams& from);

  inline MultiplexerInitParams& operator=(const MultiplexerInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiplexerInitParams& default_instance();

  void Swap(MultiplexerInitParams* other);

  // implements Message ----------------------------------------------

  MultiplexerInitParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiplexerInitParams& from);
  void MergeFrom(const MultiplexerInitParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dev_name = 1;
  inline bool has_dev_name() const;
  inline void clear_dev_name();
  static const int kDevNameFieldNumber = 1;
  inline const ::std::string& dev_name() const;
  inline void set_dev_name(const ::std::string& value);
  inline void set_dev_name(const char* value);
  inline void set_dev_name(const char* value, size_t size);
  inline ::std::string* mutable_dev_name();
  inline ::std::string* release_dev_name();
  inline void set_allocated_dev_name(::std::string* dev_name);

  // required uint32 speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // required string params = 3 [default = "8N1"];
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 3;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const char* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:channel_manager.MultiplexerInitParams)
 private:
  inline void set_has_dev_name();
  inline void clear_has_dev_name();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dev_name_;
  static ::std::string* _default_params_;
  ::std::string* params_;
  ::google::protobuf::uint32 speed_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static MultiplexerInitParams* default_instance_;
};
// -------------------------------------------------------------------

class ServerVersion : public ::google::protobuf::Message {
 public:
  ServerVersion();
  virtual ~ServerVersion();

  ServerVersion(const ServerVersion& from);

  inline ServerVersion& operator=(const ServerVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerVersion& default_instance();

  void Swap(ServerVersion* other);

  // implements Message ----------------------------------------------

  ServerVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerVersion& from);
  void MergeFrom(const ServerVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required uint32 major = 2;
  inline bool has_major() const;
  inline void clear_major();
  static const int kMajorFieldNumber = 2;
  inline ::google::protobuf::uint32 major() const;
  inline void set_major(::google::protobuf::uint32 value);

  // required uint32 minor = 3;
  inline bool has_minor() const;
  inline void clear_minor();
  static const int kMinorFieldNumber = 3;
  inline ::google::protobuf::uint32 minor() const;
  inline void set_minor(::google::protobuf::uint32 value);

  // required string build = 4;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 4;
  inline const ::std::string& build() const;
  inline void set_build(const ::std::string& value);
  inline void set_build(const char* value);
  inline void set_build(const char* value, size_t size);
  inline ::std::string* mutable_build();
  inline ::std::string* release_build();
  inline void set_allocated_build(::std::string* build);

  // @@protoc_insertion_point(class_scope:channel_manager.ServerVersion)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_major();
  inline void clear_has_major();
  inline void set_has_minor();
  inline void clear_has_minor();
  inline void set_has_build();
  inline void clear_has_build();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 major_;
  ::std::string* build_;
  ::google::protobuf::uint32 minor_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static ServerVersion* default_instance_;
};
// -------------------------------------------------------------------

class ChannelManagerInitParams : public ::google::protobuf::Message {
 public:
  ChannelManagerInitParams();
  virtual ~ChannelManagerInitParams();

  ChannelManagerInitParams(const ChannelManagerInitParams& from);

  inline ChannelManagerInitParams& operator=(const ChannelManagerInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelManagerInitParams& default_instance();

  void Swap(ChannelManagerInitParams* other);

  // implements Message ----------------------------------------------

  ChannelManagerInitParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelManagerInitParams& from);
  void MergeFrom(const ChannelManagerInitParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 log_level_file = 1 [default = 0];
  inline bool has_log_level_file() const;
  inline void clear_log_level_file();
  static const int kLogLevelFileFieldNumber = 1;
  inline ::google::protobuf::uint32 log_level_file() const;
  inline void set_log_level_file(::google::protobuf::uint32 value);

  // required uint32 log_level_console = 2 [default = 1];
  inline bool has_log_level_console() const;
  inline void clear_log_level_console();
  static const int kLogLevelConsoleFieldNumber = 2;
  inline ::google::protobuf::uint32 log_level_console() const;
  inline void set_log_level_console(::google::protobuf::uint32 value);

  // required uint32 log_level_daemon = 3 [default = 0];
  inline bool has_log_level_daemon() const;
  inline void clear_log_level_daemon();
  static const int kLogLevelDaemonFieldNumber = 3;
  inline ::google::protobuf::uint32 log_level_daemon() const;
  inline void set_log_level_daemon(::google::protobuf::uint32 value);

  // required uint32 dsph_level_file = 4 [default = 0];
  inline bool has_dsph_level_file() const;
  inline void clear_dsph_level_file();
  static const int kDsphLevelFileFieldNumber = 4;
  inline ::google::protobuf::uint32 dsph_level_file() const;
  inline void set_dsph_level_file(::google::protobuf::uint32 value);

  // required uint32 dsph_level_console = 5 [default = 1];
  inline bool has_dsph_level_console() const;
  inline void clear_dsph_level_console();
  static const int kDsphLevelConsoleFieldNumber = 5;
  inline ::google::protobuf::uint32 dsph_level_console() const;
  inline void set_dsph_level_console(::google::protobuf::uint32 value);

  // required uint32 dsph_level_daemon = 6 [default = 0];
  inline bool has_dsph_level_daemon() const;
  inline void clear_dsph_level_daemon();
  static const int kDsphLevelDaemonFieldNumber = 6;
  inline ::google::protobuf::uint32 dsph_level_daemon() const;
  inline void set_dsph_level_daemon(::google::protobuf::uint32 value);

  // required uint32 base_timing = 7 [default = 1000];
  inline bool has_base_timing() const;
  inline void clear_base_timing();
  static const int kBaseTimingFieldNumber = 7;
  inline ::google::protobuf::uint32 base_timing() const;
  inline void set_base_timing(::google::protobuf::uint32 value);

  // required uint32 drv_buf_size = 8 [default = 32768];
  inline bool has_drv_buf_size() const;
  inline void clear_drv_buf_size();
  static const int kDrvBufSizeFieldNumber = 8;
  inline ::google::protobuf::uint32 drv_buf_size() const;
  inline void set_drv_buf_size(::google::protobuf::uint32 value);

  // required uint32 usr_proc_len = 9 [default = 32768];
  inline bool has_usr_proc_len() const;
  inline void clear_usr_proc_len();
  static const int kUsrProcLenFieldNumber = 9;
  inline ::google::protobuf::uint32 usr_proc_len() const;
  inline void set_usr_proc_len(::google::protobuf::uint32 value);

  // required uint32 spi_speed_hz = 10 [default = 93750];
  inline bool has_spi_speed_hz() const;
  inline void clear_spi_speed_hz();
  static const int kSpiSpeedHzFieldNumber = 10;
  inline ::google::protobuf::uint32 spi_speed_hz() const;
  inline void set_spi_speed_hz(::google::protobuf::uint32 value);

  // required uint32 main_sleep_us = 11 [default = 500];
  inline bool has_main_sleep_us() const;
  inline void clear_main_sleep_us();
  static const int kMainSleepUsFieldNumber = 11;
  inline ::google::protobuf::uint32 main_sleep_us() const;
  inline void set_main_sleep_us(::google::protobuf::uint32 value);

  // required uint32 idle_sleep_us = 12 [default = 1000];
  inline bool has_idle_sleep_us() const;
  inline void clear_idle_sleep_us();
  static const int kIdleSleepUsFieldNumber = 12;
  inline ::google::protobuf::uint32 idle_sleep_us() const;
  inline void set_idle_sleep_us(::google::protobuf::uint32 value);

  // required string daemon_ipc_path = 13 [default = "/mnt/share"];
  inline bool has_daemon_ipc_path() const;
  inline void clear_daemon_ipc_path();
  static const int kDaemonIpcPathFieldNumber = 13;
  inline const ::std::string& daemon_ipc_path() const;
  inline void set_daemon_ipc_path(const ::std::string& value);
  inline void set_daemon_ipc_path(const char* value);
  inline void set_daemon_ipc_path(const char* value, size_t size);
  inline ::std::string* mutable_daemon_ipc_path();
  inline ::std::string* release_daemon_ipc_path();
  inline void set_allocated_daemon_ipc_path(::std::string* daemon_ipc_path);

  // required uint32 daemon_ipc_key = 14 [default = 45];
  inline bool has_daemon_ipc_key() const;
  inline void clear_daemon_ipc_key();
  static const int kDaemonIpcKeyFieldNumber = 14;
  inline ::google::protobuf::uint32 daemon_ipc_key() const;
  inline void set_daemon_ipc_key(::google::protobuf::uint32 value);

  // required bool reset_at_open = 15 [default = true];
  inline bool has_reset_at_open() const;
  inline void clear_reset_at_open();
  static const int kResetAtOpenFieldNumber = 15;
  inline bool reset_at_open() const;
  inline void set_reset_at_open(bool value);

  // repeated uint32 chan_level_file = 16 [packed = true];
  inline int chan_level_file_size() const;
  inline void clear_chan_level_file();
  static const int kChanLevelFileFieldNumber = 16;
  inline ::google::protobuf::uint32 chan_level_file(int index) const;
  inline void set_chan_level_file(int index, ::google::protobuf::uint32 value);
  inline void add_chan_level_file(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chan_level_file() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chan_level_file();

  // repeated uint32 chan_level_console = 17 [packed = true];
  inline int chan_level_console_size() const;
  inline void clear_chan_level_console();
  static const int kChanLevelConsoleFieldNumber = 17;
  inline ::google::protobuf::uint32 chan_level_console(int index) const;
  inline void set_chan_level_console(int index, ::google::protobuf::uint32 value);
  inline void add_chan_level_console(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chan_level_console() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chan_level_console();

  // repeated uint32 chan_level_daemon = 18 [packed = true];
  inline int chan_level_daemon_size() const;
  inline void clear_chan_level_daemon();
  static const int kChanLevelDaemonFieldNumber = 18;
  inline ::google::protobuf::uint32 chan_level_daemon(int index) const;
  inline void set_chan_level_daemon(int index, ::google::protobuf::uint32 value);
  inline void add_chan_level_daemon(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      chan_level_daemon() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_chan_level_daemon();

  // required .channel_manager.DriverTimings driver_timings = 19;
  inline bool has_driver_timings() const;
  inline void clear_driver_timings();
  static const int kDriverTimingsFieldNumber = 19;
  inline const ::channel_manager::DriverTimings& driver_timings() const;
  inline ::channel_manager::DriverTimings* mutable_driver_timings();
  inline ::channel_manager::DriverTimings* release_driver_timings();
  inline void set_allocated_driver_timings(::channel_manager::DriverTimings* driver_timings);

  // @@protoc_insertion_point(class_scope:channel_manager.ChannelManagerInitParams)
 private:
  inline void set_has_log_level_file();
  inline void clear_has_log_level_file();
  inline void set_has_log_level_console();
  inline void clear_has_log_level_console();
  inline void set_has_log_level_daemon();
  inline void clear_has_log_level_daemon();
  inline void set_has_dsph_level_file();
  inline void clear_has_dsph_level_file();
  inline void set_has_dsph_level_console();
  inline void clear_has_dsph_level_console();
  inline void set_has_dsph_level_daemon();
  inline void clear_has_dsph_level_daemon();
  inline void set_has_base_timing();
  inline void clear_has_base_timing();
  inline void set_has_drv_buf_size();
  inline void clear_has_drv_buf_size();
  inline void set_has_usr_proc_len();
  inline void clear_has_usr_proc_len();
  inline void set_has_spi_speed_hz();
  inline void clear_has_spi_speed_hz();
  inline void set_has_main_sleep_us();
  inline void clear_has_main_sleep_us();
  inline void set_has_idle_sleep_us();
  inline void clear_has_idle_sleep_us();
  inline void set_has_daemon_ipc_path();
  inline void clear_has_daemon_ipc_path();
  inline void set_has_daemon_ipc_key();
  inline void clear_has_daemon_ipc_key();
  inline void set_has_reset_at_open();
  inline void clear_has_reset_at_open();
  inline void set_has_driver_timings();
  inline void clear_has_driver_timings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 log_level_file_;
  ::google::protobuf::uint32 log_level_console_;
  ::google::protobuf::uint32 log_level_daemon_;
  ::google::protobuf::uint32 dsph_level_file_;
  ::google::protobuf::uint32 dsph_level_console_;
  ::google::protobuf::uint32 dsph_level_daemon_;
  ::google::protobuf::uint32 base_timing_;
  ::google::protobuf::uint32 drv_buf_size_;
  ::google::protobuf::uint32 usr_proc_len_;
  ::google::protobuf::uint32 spi_speed_hz_;
  ::google::protobuf::uint32 main_sleep_us_;
  ::google::protobuf::uint32 idle_sleep_us_;
  static ::std::string* _default_daemon_ipc_path_;
  ::std::string* daemon_ipc_path_;
  ::google::protobuf::uint32 daemon_ipc_key_;
  bool reset_at_open_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chan_level_file_;
  mutable int _chan_level_file_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chan_level_console_;
  mutable int _chan_level_console_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > chan_level_daemon_;
  mutable int _chan_level_daemon_cached_byte_size_;
  ::channel_manager::DriverTimings* driver_timings_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static ChannelManagerInitParams* default_instance_;
};
// -------------------------------------------------------------------

class ADCParams : public ::google::protobuf::Message {
 public:
  ADCParams();
  virtual ~ADCParams();

  ADCParams(const ADCParams& from);

  inline ADCParams& operator=(const ADCParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCParams& default_instance();

  void Swap(ADCParams* other);

  // implements Message ----------------------------------------------

  ADCParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCParams& from);
  void MergeFrom(const ADCParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 control1 = 1;
  inline bool has_control1() const;
  inline void clear_control1();
  static const int kControl1FieldNumber = 1;
  inline ::google::protobuf::uint32 control1() const;
  inline void set_control1(::google::protobuf::uint32 value);

  // required uint32 control2 = 2;
  inline bool has_control2() const;
  inline void clear_control2();
  static const int kControl2FieldNumber = 2;
  inline ::google::protobuf::uint32 control2() const;
  inline void set_control2(::google::protobuf::uint32 value);

  // required uint32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // required uint32 gain = 4;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 4;
  inline ::google::protobuf::uint32 gain() const;
  inline void set_gain(::google::protobuf::uint32 value);

  // required uint32 overrange = 5;
  inline bool has_overrange() const;
  inline void clear_overrange();
  static const int kOverrangeFieldNumber = 5;
  inline ::google::protobuf::uint32 overrange() const;
  inline void set_overrange(::google::protobuf::uint32 value);

  // required uint32 ch_settings = 6;
  inline bool has_ch_settings() const;
  inline void clear_ch_settings();
  static const int kChSettingsFieldNumber = 6;
  inline ::google::protobuf::uint32 ch_settings() const;
  inline void set_ch_settings(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channel_manager.ADCParams)
 private:
  inline void set_has_control1();
  inline void clear_has_control1();
  inline void set_has_control2();
  inline void clear_has_control2();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_overrange();
  inline void clear_has_overrange();
  inline void set_has_ch_settings();
  inline void clear_has_ch_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 control1_;
  ::google::protobuf::uint32 control2_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 gain_;
  ::google::protobuf::uint32 overrange_;
  ::google::protobuf::uint32 ch_settings_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static ADCParams* default_instance_;
};
// -------------------------------------------------------------------

class ADCChannelInitParams : public ::google::protobuf::Message {
 public:
  ADCChannelInitParams();
  virtual ~ADCChannelInitParams();

  ADCChannelInitParams(const ADCChannelInitParams& from);

  inline ADCChannelInitParams& operator=(const ADCChannelInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCChannelInitParams& default_instance();

  void Swap(ADCChannelInitParams* other);

  // implements Message ----------------------------------------------

  ADCChannelInitParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ADCChannelInitParams& from);
  void MergeFrom(const ADCChannelInitParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ch_idx = 1 [default = 0];
  inline bool has_ch_idx() const;
  inline void clear_ch_idx();
  static const int kChIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 ch_idx() const;
  inline void set_ch_idx(::google::protobuf::uint32 value);

  // required uint32 rot_idx = 2 [default = 0];
  inline bool has_rot_idx() const;
  inline void clear_rot_idx();
  static const int kRotIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 rot_idx() const;
  inline void set_rot_idx(::google::protobuf::uint32 value);

  // optional uint32 drv_buf_size = 3 [default = 32768];
  inline bool has_drv_buf_size() const;
  inline void clear_drv_buf_size();
  static const int kDrvBufSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 drv_buf_size() const;
  inline void set_drv_buf_size(::google::protobuf::uint32 value);

  // optional uint32 usr_proc_len = 4 [default = 32768];
  inline bool has_usr_proc_len() const;
  inline void clear_usr_proc_len();
  static const int kUsrProcLenFieldNumber = 4;
  inline ::google::protobuf::uint32 usr_proc_len() const;
  inline void set_usr_proc_len(::google::protobuf::uint32 value);

  // optional uint32 usr_proc_cnt = 5 [default = 0];
  inline bool has_usr_proc_cnt() const;
  inline void clear_usr_proc_cnt();
  static const int kUsrProcCntFieldNumber = 5;
  inline ::google::protobuf::uint32 usr_proc_cnt() const;
  inline void set_usr_proc_cnt(::google::protobuf::uint32 value);

  // optional uint32 sen_filter_id = 6 [default = 0];
  inline bool has_sen_filter_id() const;
  inline void clear_sen_filter_id();
  static const int kSenFilterIdFieldNumber = 6;
  inline ::google::protobuf::uint32 sen_filter_id() const;
  inline void set_sen_filter_id(::google::protobuf::uint32 value);

  // optional .channel_manager.ADCParams ap = 7;
  inline bool has_ap() const;
  inline void clear_ap();
  static const int kApFieldNumber = 7;
  inline const ::channel_manager::ADCParams& ap() const;
  inline ::channel_manager::ADCParams* mutable_ap();
  inline ::channel_manager::ADCParams* release_ap();
  inline void set_allocated_ap(::channel_manager::ADCParams* ap);

  // @@protoc_insertion_point(class_scope:channel_manager.ADCChannelInitParams)
 private:
  inline void set_has_ch_idx();
  inline void clear_has_ch_idx();
  inline void set_has_rot_idx();
  inline void clear_has_rot_idx();
  inline void set_has_drv_buf_size();
  inline void clear_has_drv_buf_size();
  inline void set_has_usr_proc_len();
  inline void clear_has_usr_proc_len();
  inline void set_has_usr_proc_cnt();
  inline void clear_has_usr_proc_cnt();
  inline void set_has_sen_filter_id();
  inline void clear_has_sen_filter_id();
  inline void set_has_ap();
  inline void clear_has_ap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ch_idx_;
  ::google::protobuf::uint32 rot_idx_;
  ::google::protobuf::uint32 drv_buf_size_;
  ::google::protobuf::uint32 usr_proc_len_;
  ::google::protobuf::uint32 usr_proc_cnt_;
  ::google::protobuf::uint32 sen_filter_id_;
  ::channel_manager::ADCParams* ap_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static ADCChannelInitParams* default_instance_;
};
// -------------------------------------------------------------------

class SynctaskChannels : public ::google::protobuf::Message {
 public:
  SynctaskChannels();
  virtual ~SynctaskChannels();

  SynctaskChannels(const SynctaskChannels& from);

  inline SynctaskChannels& operator=(const SynctaskChannels& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynctaskChannels& default_instance();

  void Swap(SynctaskChannels* other);

  // implements Message ----------------------------------------------

  SynctaskChannels* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynctaskChannels& from);
  void MergeFrom(const SynctaskChannels& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 adc_ch_cnt = 1 [default = 0];
  inline bool has_adc_ch_cnt() const;
  inline void clear_adc_ch_cnt();
  static const int kAdcChCntFieldNumber = 1;
  inline ::google::protobuf::uint32 adc_ch_cnt() const;
  inline void set_adc_ch_cnt(::google::protobuf::uint32 value);

  // repeated uint32 adc_ch_idx = 2;
  inline int adc_ch_idx_size() const;
  inline void clear_adc_ch_idx();
  static const int kAdcChIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 adc_ch_idx(int index) const;
  inline void set_adc_ch_idx(int index, ::google::protobuf::uint32 value);
  inline void add_adc_ch_idx(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      adc_ch_idx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_adc_ch_idx();

  // optional uint32 sync_reg = 3;
  inline bool has_sync_reg() const;
  inline void clear_sync_reg();
  static const int kSyncRegFieldNumber = 3;
  inline ::google::protobuf::uint32 sync_reg() const;
  inline void set_sync_reg(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channel_manager.SynctaskChannels)
 private:
  inline void set_has_adc_ch_cnt();
  inline void clear_has_adc_ch_cnt();
  inline void set_has_sync_reg();
  inline void clear_has_sync_reg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > adc_ch_idx_;
  ::google::protobuf::uint32 adc_ch_cnt_;
  ::google::protobuf::uint32 sync_reg_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static SynctaskChannels* default_instance_;
};
// -------------------------------------------------------------------

class RotChannelInitParams : public ::google::protobuf::Message {
 public:
  RotChannelInitParams();
  virtual ~RotChannelInitParams();

  RotChannelInitParams(const RotChannelInitParams& from);

  inline RotChannelInitParams& operator=(const RotChannelInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotChannelInitParams& default_instance();

  void Swap(RotChannelInitParams* other);

  // implements Message ----------------------------------------------

  RotChannelInitParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotChannelInitParams& from);
  void MergeFrom(const RotChannelInitParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rot_idx = 1 [default = 0];
  inline bool has_rot_idx() const;
  inline void clear_rot_idx();
  static const int kRotIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 rot_idx() const;
  inline void set_rot_idx(::google::protobuf::uint32 value);

  // optional uint32 av_num = 2 [default = 1];
  inline bool has_av_num() const;
  inline void clear_av_num();
  static const int kAvNumFieldNumber = 2;
  inline ::google::protobuf::uint32 av_num() const;
  inline void set_av_num(::google::protobuf::uint32 value);

  // optional uint32 pw_min_us = 3 [default = 25];
  inline bool has_pw_min_us() const;
  inline void clear_pw_min_us();
  static const int kPwMinUsFieldNumber = 3;
  inline ::google::protobuf::uint32 pw_min_us() const;
  inline void set_pw_min_us(::google::protobuf::uint32 value);

  // optional uint32 period_min_us = 4 [default = 8333];
  inline bool has_period_min_us() const;
  inline void clear_period_min_us();
  static const int kPeriodMinUsFieldNumber = 4;
  inline ::google::protobuf::uint32 period_min_us() const;
  inline void set_period_min_us(::google::protobuf::uint32 value);

  // optional uint32 period_max_us = 5 [default = 1000000];
  inline bool has_period_max_us() const;
  inline void clear_period_max_us();
  static const int kPeriodMaxUsFieldNumber = 5;
  inline ::google::protobuf::uint32 period_max_us() const;
  inline void set_period_max_us(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channel_manager.RotChannelInitParams)
 private:
  inline void set_has_rot_idx();
  inline void clear_has_rot_idx();
  inline void set_has_av_num();
  inline void clear_has_av_num();
  inline void set_has_pw_min_us();
  inline void clear_has_pw_min_us();
  inline void set_has_period_min_us();
  inline void clear_has_period_min_us();
  inline void set_has_period_max_us();
  inline void clear_has_period_max_us();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rot_idx_;
  ::google::protobuf::uint32 av_num_;
  ::google::protobuf::uint32 pw_min_us_;
  ::google::protobuf::uint32 period_min_us_;
  ::google::protobuf::uint32 period_max_us_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static RotChannelInitParams* default_instance_;
};
// -------------------------------------------------------------------

class RotData : public ::google::protobuf::Message {
 public:
  RotData();
  virtual ~RotData();

  RotData(const RotData& from);

  inline RotData& operator=(const RotData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotData& default_instance();

  void Swap(RotData* other);

  // implements Message ----------------------------------------------

  RotData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotData& from);
  void MergeFrom(const RotData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1 [default = 0];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional bool running = 2 [default = false];
  inline bool has_running() const;
  inline void clear_running();
  static const int kRunningFieldNumber = 2;
  inline bool running() const;
  inline void set_running(bool value);

  // optional uint32 pos = 3 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 min = 4;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 4;
  inline ::google::protobuf::uint32 min() const;
  inline void set_min(::google::protobuf::uint32 value);

  // optional uint32 max = 5;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 5;
  inline ::google::protobuf::uint32 max() const;
  inline void set_max(::google::protobuf::uint32 value);

  // optional uint32 avr = 6;
  inline bool has_avr() const;
  inline void clear_avr();
  static const int kAvrFieldNumber = 6;
  inline ::google::protobuf::uint32 avr() const;
  inline void set_avr(::google::protobuf::uint32 value);

  // optional double sum = 7;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 7;
  inline double sum() const;
  inline void set_sum(double value);

  // optional uint32 cnt = 8;
  inline bool has_cnt() const;
  inline void clear_cnt();
  static const int kCntFieldNumber = 8;
  inline ::google::protobuf::uint32 cnt() const;
  inline void set_cnt(::google::protobuf::uint32 value);

  // optional double freq_min = 9;
  inline bool has_freq_min() const;
  inline void clear_freq_min();
  static const int kFreqMinFieldNumber = 9;
  inline double freq_min() const;
  inline void set_freq_min(double value);

  // optional double freq_max = 10;
  inline bool has_freq_max() const;
  inline void clear_freq_max();
  static const int kFreqMaxFieldNumber = 10;
  inline double freq_max() const;
  inline void set_freq_max(double value);

  // optional double freq_avr = 11;
  inline bool has_freq_avr() const;
  inline void clear_freq_avr();
  static const int kFreqAvrFieldNumber = 11;
  inline double freq_avr() const;
  inline void set_freq_avr(double value);

  // optional bool overhigh = 12 [default = false];
  inline bool has_overhigh() const;
  inline void clear_overhigh();
  static const int kOverhighFieldNumber = 12;
  inline bool overhigh() const;
  inline void set_overhigh(bool value);

  // optional bool underlow = 13 [default = false];
  inline bool has_underlow() const;
  inline void clear_underlow();
  static const int kUnderlowFieldNumber = 13;
  inline bool underlow() const;
  inline void set_underlow(bool value);

  // @@protoc_insertion_point(class_scope:channel_manager.RotData)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_running();
  inline void clear_has_running();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_avr();
  inline void clear_has_avr();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_cnt();
  inline void clear_has_cnt();
  inline void set_has_freq_min();
  inline void clear_has_freq_min();
  inline void set_has_freq_max();
  inline void clear_has_freq_max();
  inline void set_has_freq_avr();
  inline void clear_has_freq_avr();
  inline void set_has_overhigh();
  inline void clear_has_overhigh();
  inline void set_has_underlow();
  inline void clear_has_underlow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  double sum_;
  ::google::protobuf::uint32 avr_;
  ::google::protobuf::uint32 cnt_;
  double freq_min_;
  double freq_max_;
  double freq_avr_;
  bool running_;
  bool overhigh_;
  bool underlow_;
  friend void  protobuf_AddDesc_channel_5fmanager_2eproto();
  friend void protobuf_AssignDesc_channel_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_channel_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static RotData* default_instance_;
};
// ===================================================================


// ===================================================================

// DriverTimings

// required uint32 rot_run = 1 [default = 1000];
inline bool DriverTimings::has_rot_run() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DriverTimings::set_has_rot_run() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DriverTimings::clear_has_rot_run() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DriverTimings::clear_rot_run() {
  rot_run_ = 1000u;
  clear_has_rot_run();
}
inline ::google::protobuf::uint32 DriverTimings::rot_run() const {
  // @@protoc_insertion_point(field_get:channel_manager.DriverTimings.rot_run)
  return rot_run_;
}
inline void DriverTimings::set_rot_run(::google::protobuf::uint32 value) {
  set_has_rot_run();
  rot_run_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.DriverTimings.rot_run)
}

// required uint32 adc_set_params1 = 2 [default = 500];
inline bool DriverTimings::has_adc_set_params1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DriverTimings::set_has_adc_set_params1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DriverTimings::clear_has_adc_set_params1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DriverTimings::clear_adc_set_params1() {
  adc_set_params1_ = 500u;
  clear_has_adc_set_params1();
}
inline ::google::protobuf::uint32 DriverTimings::adc_set_params1() const {
  // @@protoc_insertion_point(field_get:channel_manager.DriverTimings.adc_set_params1)
  return adc_set_params1_;
}
inline void DriverTimings::set_adc_set_params1(::google::protobuf::uint32 value) {
  set_has_adc_set_params1();
  adc_set_params1_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.DriverTimings.adc_set_params1)
}

// required uint32 adc_set_params2 = 3 [default = 100];
inline bool DriverTimings::has_adc_set_params2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DriverTimings::set_has_adc_set_params2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DriverTimings::clear_has_adc_set_params2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DriverTimings::clear_adc_set_params2() {
  adc_set_params2_ = 100u;
  clear_has_adc_set_params2();
}
inline ::google::protobuf::uint32 DriverTimings::adc_set_params2() const {
  // @@protoc_insertion_point(field_get:channel_manager.DriverTimings.adc_set_params2)
  return adc_set_params2_;
}
inline void DriverTimings::set_adc_set_params2(::google::protobuf::uint32 value) {
  set_has_adc_set_params2();
  adc_set_params2_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.DriverTimings.adc_set_params2)
}

// required uint32 adc_set_params3 = 4 [default = 100];
inline bool DriverTimings::has_adc_set_params3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DriverTimings::set_has_adc_set_params3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DriverTimings::clear_has_adc_set_params3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DriverTimings::clear_adc_set_params3() {
  adc_set_params3_ = 100u;
  clear_has_adc_set_params3();
}
inline ::google::protobuf::uint32 DriverTimings::adc_set_params3() const {
  // @@protoc_insertion_point(field_get:channel_manager.DriverTimings.adc_set_params3)
  return adc_set_params3_;
}
inline void DriverTimings::set_adc_set_params3(::google::protobuf::uint32 value) {
  set_has_adc_set_params3();
  adc_set_params3_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.DriverTimings.adc_set_params3)
}

// required uint32 adc_run = 5 [default = 100];
inline bool DriverTimings::has_adc_run() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DriverTimings::set_has_adc_run() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DriverTimings::clear_has_adc_run() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DriverTimings::clear_adc_run() {
  adc_run_ = 100u;
  clear_has_adc_run();
}
inline ::google::protobuf::uint32 DriverTimings::adc_run() const {
  // @@protoc_insertion_point(field_get:channel_manager.DriverTimings.adc_run)
  return adc_run_;
}
inline void DriverTimings::set_adc_run(::google::protobuf::uint32 value) {
  set_has_adc_run();
  adc_run_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.DriverTimings.adc_run)
}

// required uint32 adc_run_sync = 6 [default = 100];
inline bool DriverTimings::has_adc_run_sync() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DriverTimings::set_has_adc_run_sync() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DriverTimings::clear_has_adc_run_sync() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DriverTimings::clear_adc_run_sync() {
  adc_run_sync_ = 100u;
  clear_has_adc_run_sync();
}
inline ::google::protobuf::uint32 DriverTimings::adc_run_sync() const {
  // @@protoc_insertion_point(field_get:channel_manager.DriverTimings.adc_run_sync)
  return adc_run_sync_;
}
inline void DriverTimings::set_adc_run_sync(::google::protobuf::uint32 value) {
  set_has_adc_run_sync();
  adc_run_sync_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.DriverTimings.adc_run_sync)
}

// -------------------------------------------------------------------

// ADCTimeOffsets

// repeated uint32 offset = 1;
inline int ADCTimeOffsets::offset_size() const {
  return offset_.size();
}
inline void ADCTimeOffsets::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 ADCTimeOffsets::offset(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCTimeOffsets.offset)
  return offset_.Get(index);
}
inline void ADCTimeOffsets::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.ADCTimeOffsets.offset)
}
inline void ADCTimeOffsets::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.ADCTimeOffsets.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ADCTimeOffsets::offset() const {
  // @@protoc_insertion_point(field_list:channel_manager.ADCTimeOffsets.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ADCTimeOffsets::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.ADCTimeOffsets.offset)
  return &offset_;
}

// required sint32 error_code = 2 [default = 0];
inline bool ADCTimeOffsets::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCTimeOffsets::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCTimeOffsets::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADCTimeOffsets::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ADCTimeOffsets::error_code() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCTimeOffsets.error_code)
  return error_code_;
}
inline void ADCTimeOffsets::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCTimeOffsets.error_code)
}

// -------------------------------------------------------------------

// AvailableChannels

// required sint32 error_code = 1;
inline bool AvailableChannels::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableChannels::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvailableChannels::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvailableChannels::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AvailableChannels::error_code() const {
  // @@protoc_insertion_point(field_get:channel_manager.AvailableChannels.error_code)
  return error_code_;
}
inline void AvailableChannels::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.AvailableChannels.error_code)
}

// repeated uint32 channel_idx = 2;
inline int AvailableChannels::channel_idx_size() const {
  return channel_idx_.size();
}
inline void AvailableChannels::clear_channel_idx() {
  channel_idx_.Clear();
}
inline ::google::protobuf::uint32 AvailableChannels::channel_idx(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.AvailableChannels.channel_idx)
  return channel_idx_.Get(index);
}
inline void AvailableChannels::set_channel_idx(int index, ::google::protobuf::uint32 value) {
  channel_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.AvailableChannels.channel_idx)
}
inline void AvailableChannels::add_channel_idx(::google::protobuf::uint32 value) {
  channel_idx_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.AvailableChannels.channel_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvailableChannels::channel_idx() const {
  // @@protoc_insertion_point(field_list:channel_manager.AvailableChannels.channel_idx)
  return channel_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvailableChannels::mutable_channel_idx() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.AvailableChannels.channel_idx)
  return &channel_idx_;
}

// repeated uint32 rot_idx = 3;
inline int AvailableChannels::rot_idx_size() const {
  return rot_idx_.size();
}
inline void AvailableChannels::clear_rot_idx() {
  rot_idx_.Clear();
}
inline ::google::protobuf::uint32 AvailableChannels::rot_idx(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.AvailableChannels.rot_idx)
  return rot_idx_.Get(index);
}
inline void AvailableChannels::set_rot_idx(int index, ::google::protobuf::uint32 value) {
  rot_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.AvailableChannels.rot_idx)
}
inline void AvailableChannels::add_rot_idx(::google::protobuf::uint32 value) {
  rot_idx_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.AvailableChannels.rot_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AvailableChannels::rot_idx() const {
  // @@protoc_insertion_point(field_list:channel_manager.AvailableChannels.rot_idx)
  return rot_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AvailableChannels::mutable_rot_idx() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.AvailableChannels.rot_idx)
  return &rot_idx_;
}

// -------------------------------------------------------------------

// MultiplexerInitParams

// required string dev_name = 1;
inline bool MultiplexerInitParams::has_dev_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiplexerInitParams::set_has_dev_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiplexerInitParams::clear_has_dev_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiplexerInitParams::clear_dev_name() {
  if (dev_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dev_name_->clear();
  }
  clear_has_dev_name();
}
inline const ::std::string& MultiplexerInitParams::dev_name() const {
  // @@protoc_insertion_point(field_get:channel_manager.MultiplexerInitParams.dev_name)
  return *dev_name_;
}
inline void MultiplexerInitParams::set_dev_name(const ::std::string& value) {
  set_has_dev_name();
  if (dev_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dev_name_ = new ::std::string;
  }
  dev_name_->assign(value);
  // @@protoc_insertion_point(field_set:channel_manager.MultiplexerInitParams.dev_name)
}
inline void MultiplexerInitParams::set_dev_name(const char* value) {
  set_has_dev_name();
  if (dev_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dev_name_ = new ::std::string;
  }
  dev_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:channel_manager.MultiplexerInitParams.dev_name)
}
inline void MultiplexerInitParams::set_dev_name(const char* value, size_t size) {
  set_has_dev_name();
  if (dev_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dev_name_ = new ::std::string;
  }
  dev_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channel_manager.MultiplexerInitParams.dev_name)
}
inline ::std::string* MultiplexerInitParams::mutable_dev_name() {
  set_has_dev_name();
  if (dev_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dev_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:channel_manager.MultiplexerInitParams.dev_name)
  return dev_name_;
}
inline ::std::string* MultiplexerInitParams::release_dev_name() {
  clear_has_dev_name();
  if (dev_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dev_name_;
    dev_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MultiplexerInitParams::set_allocated_dev_name(::std::string* dev_name) {
  if (dev_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dev_name_;
  }
  if (dev_name) {
    set_has_dev_name();
    dev_name_ = dev_name;
  } else {
    clear_has_dev_name();
    dev_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:channel_manager.MultiplexerInitParams.dev_name)
}

// required uint32 speed = 2;
inline bool MultiplexerInitParams::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiplexerInitParams::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiplexerInitParams::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiplexerInitParams::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 MultiplexerInitParams::speed() const {
  // @@protoc_insertion_point(field_get:channel_manager.MultiplexerInitParams.speed)
  return speed_;
}
inline void MultiplexerInitParams::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.MultiplexerInitParams.speed)
}

// required string params = 3 [default = "8N1"];
inline bool MultiplexerInitParams::has_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiplexerInitParams::set_has_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiplexerInitParams::clear_has_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiplexerInitParams::clear_params() {
  if (params_ != _default_params_) {
    params_->assign(*_default_params_);
  }
  clear_has_params();
}
inline const ::std::string& MultiplexerInitParams::params() const {
  // @@protoc_insertion_point(field_get:channel_manager.MultiplexerInitParams.params)
  return *params_;
}
inline void MultiplexerInitParams::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == _default_params_) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set:channel_manager.MultiplexerInitParams.params)
}
inline void MultiplexerInitParams::set_params(const char* value) {
  set_has_params();
  if (params_ == _default_params_) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set_char:channel_manager.MultiplexerInitParams.params)
}
inline void MultiplexerInitParams::set_params(const char* value, size_t size) {
  set_has_params();
  if (params_ == _default_params_) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channel_manager.MultiplexerInitParams.params)
}
inline ::std::string* MultiplexerInitParams::mutable_params() {
  set_has_params();
  if (params_ == _default_params_) {
    params_ = new ::std::string(*_default_params_);
  }
  // @@protoc_insertion_point(field_mutable:channel_manager.MultiplexerInitParams.params)
  return params_;
}
inline ::std::string* MultiplexerInitParams::release_params() {
  clear_has_params();
  if (params_ == _default_params_) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(_default_params_);
    return temp;
  }
}
inline void MultiplexerInitParams::set_allocated_params(::std::string* params) {
  if (params_ != _default_params_) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(_default_params_);
  }
  // @@protoc_insertion_point(field_set_allocated:channel_manager.MultiplexerInitParams.params)
}

// -------------------------------------------------------------------

// ServerVersion

// required sint32 error_code = 1;
inline bool ServerVersion::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerVersion::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerVersion::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerVersion::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ServerVersion::error_code() const {
  // @@protoc_insertion_point(field_get:channel_manager.ServerVersion.error_code)
  return error_code_;
}
inline void ServerVersion::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ServerVersion.error_code)
}

// required uint32 major = 2;
inline bool ServerVersion::has_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerVersion::set_has_major() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
inline ::google::protobuf::uint32 ServerVersion::major() const {
  // @@protoc_insertion_point(field_get:channel_manager.ServerVersion.major)
  return major_;
}
inline void ServerVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ServerVersion.major)
}

// required uint32 minor = 3;
inline bool ServerVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
inline ::google::protobuf::uint32 ServerVersion::minor() const {
  // @@protoc_insertion_point(field_get:channel_manager.ServerVersion.minor)
  return minor_;
}
inline void ServerVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ServerVersion.minor)
}

// required string build = 4;
inline bool ServerVersion::has_build() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerVersion::set_has_build() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerVersion::clear_has_build() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerVersion::clear_build() {
  if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_->clear();
  }
  clear_has_build();
}
inline const ::std::string& ServerVersion::build() const {
  // @@protoc_insertion_point(field_get:channel_manager.ServerVersion.build)
  return *build_;
}
inline void ServerVersion::set_build(const ::std::string& value) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  build_->assign(value);
  // @@protoc_insertion_point(field_set:channel_manager.ServerVersion.build)
}
inline void ServerVersion::set_build(const char* value) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  build_->assign(value);
  // @@protoc_insertion_point(field_set_char:channel_manager.ServerVersion.build)
}
inline void ServerVersion::set_build(const char* value, size_t size) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  build_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channel_manager.ServerVersion.build)
}
inline ::std::string* ServerVersion::mutable_build() {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:channel_manager.ServerVersion.build)
  return build_;
}
inline ::std::string* ServerVersion::release_build() {
  clear_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_;
    build_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerVersion::set_allocated_build(::std::string* build) {
  if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_;
  }
  if (build) {
    set_has_build();
    build_ = build;
  } else {
    clear_has_build();
    build_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:channel_manager.ServerVersion.build)
}

// -------------------------------------------------------------------

// ChannelManagerInitParams

// required uint32 log_level_file = 1 [default = 0];
inline bool ChannelManagerInitParams::has_log_level_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelManagerInitParams::set_has_log_level_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelManagerInitParams::clear_has_log_level_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelManagerInitParams::clear_log_level_file() {
  log_level_file_ = 0u;
  clear_has_log_level_file();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::log_level_file() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.log_level_file)
  return log_level_file_;
}
inline void ChannelManagerInitParams::set_log_level_file(::google::protobuf::uint32 value) {
  set_has_log_level_file();
  log_level_file_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.log_level_file)
}

// required uint32 log_level_console = 2 [default = 1];
inline bool ChannelManagerInitParams::has_log_level_console() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelManagerInitParams::set_has_log_level_console() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelManagerInitParams::clear_has_log_level_console() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelManagerInitParams::clear_log_level_console() {
  log_level_console_ = 1u;
  clear_has_log_level_console();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::log_level_console() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.log_level_console)
  return log_level_console_;
}
inline void ChannelManagerInitParams::set_log_level_console(::google::protobuf::uint32 value) {
  set_has_log_level_console();
  log_level_console_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.log_level_console)
}

// required uint32 log_level_daemon = 3 [default = 0];
inline bool ChannelManagerInitParams::has_log_level_daemon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelManagerInitParams::set_has_log_level_daemon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelManagerInitParams::clear_has_log_level_daemon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelManagerInitParams::clear_log_level_daemon() {
  log_level_daemon_ = 0u;
  clear_has_log_level_daemon();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::log_level_daemon() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.log_level_daemon)
  return log_level_daemon_;
}
inline void ChannelManagerInitParams::set_log_level_daemon(::google::protobuf::uint32 value) {
  set_has_log_level_daemon();
  log_level_daemon_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.log_level_daemon)
}

// required uint32 dsph_level_file = 4 [default = 0];
inline bool ChannelManagerInitParams::has_dsph_level_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelManagerInitParams::set_has_dsph_level_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelManagerInitParams::clear_has_dsph_level_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelManagerInitParams::clear_dsph_level_file() {
  dsph_level_file_ = 0u;
  clear_has_dsph_level_file();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::dsph_level_file() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.dsph_level_file)
  return dsph_level_file_;
}
inline void ChannelManagerInitParams::set_dsph_level_file(::google::protobuf::uint32 value) {
  set_has_dsph_level_file();
  dsph_level_file_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.dsph_level_file)
}

// required uint32 dsph_level_console = 5 [default = 1];
inline bool ChannelManagerInitParams::has_dsph_level_console() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChannelManagerInitParams::set_has_dsph_level_console() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChannelManagerInitParams::clear_has_dsph_level_console() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChannelManagerInitParams::clear_dsph_level_console() {
  dsph_level_console_ = 1u;
  clear_has_dsph_level_console();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::dsph_level_console() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.dsph_level_console)
  return dsph_level_console_;
}
inline void ChannelManagerInitParams::set_dsph_level_console(::google::protobuf::uint32 value) {
  set_has_dsph_level_console();
  dsph_level_console_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.dsph_level_console)
}

// required uint32 dsph_level_daemon = 6 [default = 0];
inline bool ChannelManagerInitParams::has_dsph_level_daemon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChannelManagerInitParams::set_has_dsph_level_daemon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChannelManagerInitParams::clear_has_dsph_level_daemon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChannelManagerInitParams::clear_dsph_level_daemon() {
  dsph_level_daemon_ = 0u;
  clear_has_dsph_level_daemon();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::dsph_level_daemon() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.dsph_level_daemon)
  return dsph_level_daemon_;
}
inline void ChannelManagerInitParams::set_dsph_level_daemon(::google::protobuf::uint32 value) {
  set_has_dsph_level_daemon();
  dsph_level_daemon_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.dsph_level_daemon)
}

// required uint32 base_timing = 7 [default = 1000];
inline bool ChannelManagerInitParams::has_base_timing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChannelManagerInitParams::set_has_base_timing() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChannelManagerInitParams::clear_has_base_timing() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChannelManagerInitParams::clear_base_timing() {
  base_timing_ = 1000u;
  clear_has_base_timing();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::base_timing() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.base_timing)
  return base_timing_;
}
inline void ChannelManagerInitParams::set_base_timing(::google::protobuf::uint32 value) {
  set_has_base_timing();
  base_timing_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.base_timing)
}

// required uint32 drv_buf_size = 8 [default = 32768];
inline bool ChannelManagerInitParams::has_drv_buf_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChannelManagerInitParams::set_has_drv_buf_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChannelManagerInitParams::clear_has_drv_buf_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChannelManagerInitParams::clear_drv_buf_size() {
  drv_buf_size_ = 32768u;
  clear_has_drv_buf_size();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::drv_buf_size() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.drv_buf_size)
  return drv_buf_size_;
}
inline void ChannelManagerInitParams::set_drv_buf_size(::google::protobuf::uint32 value) {
  set_has_drv_buf_size();
  drv_buf_size_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.drv_buf_size)
}

// required uint32 usr_proc_len = 9 [default = 32768];
inline bool ChannelManagerInitParams::has_usr_proc_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChannelManagerInitParams::set_has_usr_proc_len() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChannelManagerInitParams::clear_has_usr_proc_len() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChannelManagerInitParams::clear_usr_proc_len() {
  usr_proc_len_ = 32768u;
  clear_has_usr_proc_len();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::usr_proc_len() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.usr_proc_len)
  return usr_proc_len_;
}
inline void ChannelManagerInitParams::set_usr_proc_len(::google::protobuf::uint32 value) {
  set_has_usr_proc_len();
  usr_proc_len_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.usr_proc_len)
}

// required uint32 spi_speed_hz = 10 [default = 93750];
inline bool ChannelManagerInitParams::has_spi_speed_hz() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChannelManagerInitParams::set_has_spi_speed_hz() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChannelManagerInitParams::clear_has_spi_speed_hz() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChannelManagerInitParams::clear_spi_speed_hz() {
  spi_speed_hz_ = 93750u;
  clear_has_spi_speed_hz();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::spi_speed_hz() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.spi_speed_hz)
  return spi_speed_hz_;
}
inline void ChannelManagerInitParams::set_spi_speed_hz(::google::protobuf::uint32 value) {
  set_has_spi_speed_hz();
  spi_speed_hz_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.spi_speed_hz)
}

// required uint32 main_sleep_us = 11 [default = 500];
inline bool ChannelManagerInitParams::has_main_sleep_us() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChannelManagerInitParams::set_has_main_sleep_us() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChannelManagerInitParams::clear_has_main_sleep_us() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChannelManagerInitParams::clear_main_sleep_us() {
  main_sleep_us_ = 500u;
  clear_has_main_sleep_us();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::main_sleep_us() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.main_sleep_us)
  return main_sleep_us_;
}
inline void ChannelManagerInitParams::set_main_sleep_us(::google::protobuf::uint32 value) {
  set_has_main_sleep_us();
  main_sleep_us_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.main_sleep_us)
}

// required uint32 idle_sleep_us = 12 [default = 1000];
inline bool ChannelManagerInitParams::has_idle_sleep_us() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChannelManagerInitParams::set_has_idle_sleep_us() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChannelManagerInitParams::clear_has_idle_sleep_us() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChannelManagerInitParams::clear_idle_sleep_us() {
  idle_sleep_us_ = 1000u;
  clear_has_idle_sleep_us();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::idle_sleep_us() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.idle_sleep_us)
  return idle_sleep_us_;
}
inline void ChannelManagerInitParams::set_idle_sleep_us(::google::protobuf::uint32 value) {
  set_has_idle_sleep_us();
  idle_sleep_us_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.idle_sleep_us)
}

// required string daemon_ipc_path = 13 [default = "/mnt/share"];
inline bool ChannelManagerInitParams::has_daemon_ipc_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChannelManagerInitParams::set_has_daemon_ipc_path() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChannelManagerInitParams::clear_has_daemon_ipc_path() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChannelManagerInitParams::clear_daemon_ipc_path() {
  if (daemon_ipc_path_ != _default_daemon_ipc_path_) {
    daemon_ipc_path_->assign(*_default_daemon_ipc_path_);
  }
  clear_has_daemon_ipc_path();
}
inline const ::std::string& ChannelManagerInitParams::daemon_ipc_path() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.daemon_ipc_path)
  return *daemon_ipc_path_;
}
inline void ChannelManagerInitParams::set_daemon_ipc_path(const ::std::string& value) {
  set_has_daemon_ipc_path();
  if (daemon_ipc_path_ == _default_daemon_ipc_path_) {
    daemon_ipc_path_ = new ::std::string;
  }
  daemon_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.daemon_ipc_path)
}
inline void ChannelManagerInitParams::set_daemon_ipc_path(const char* value) {
  set_has_daemon_ipc_path();
  if (daemon_ipc_path_ == _default_daemon_ipc_path_) {
    daemon_ipc_path_ = new ::std::string;
  }
  daemon_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:channel_manager.ChannelManagerInitParams.daemon_ipc_path)
}
inline void ChannelManagerInitParams::set_daemon_ipc_path(const char* value, size_t size) {
  set_has_daemon_ipc_path();
  if (daemon_ipc_path_ == _default_daemon_ipc_path_) {
    daemon_ipc_path_ = new ::std::string;
  }
  daemon_ipc_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channel_manager.ChannelManagerInitParams.daemon_ipc_path)
}
inline ::std::string* ChannelManagerInitParams::mutable_daemon_ipc_path() {
  set_has_daemon_ipc_path();
  if (daemon_ipc_path_ == _default_daemon_ipc_path_) {
    daemon_ipc_path_ = new ::std::string(*_default_daemon_ipc_path_);
  }
  // @@protoc_insertion_point(field_mutable:channel_manager.ChannelManagerInitParams.daemon_ipc_path)
  return daemon_ipc_path_;
}
inline ::std::string* ChannelManagerInitParams::release_daemon_ipc_path() {
  clear_has_daemon_ipc_path();
  if (daemon_ipc_path_ == _default_daemon_ipc_path_) {
    return NULL;
  } else {
    ::std::string* temp = daemon_ipc_path_;
    daemon_ipc_path_ = const_cast< ::std::string*>(_default_daemon_ipc_path_);
    return temp;
  }
}
inline void ChannelManagerInitParams::set_allocated_daemon_ipc_path(::std::string* daemon_ipc_path) {
  if (daemon_ipc_path_ != _default_daemon_ipc_path_) {
    delete daemon_ipc_path_;
  }
  if (daemon_ipc_path) {
    set_has_daemon_ipc_path();
    daemon_ipc_path_ = daemon_ipc_path;
  } else {
    clear_has_daemon_ipc_path();
    daemon_ipc_path_ = const_cast< ::std::string*>(_default_daemon_ipc_path_);
  }
  // @@protoc_insertion_point(field_set_allocated:channel_manager.ChannelManagerInitParams.daemon_ipc_path)
}

// required uint32 daemon_ipc_key = 14 [default = 45];
inline bool ChannelManagerInitParams::has_daemon_ipc_key() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChannelManagerInitParams::set_has_daemon_ipc_key() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChannelManagerInitParams::clear_has_daemon_ipc_key() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChannelManagerInitParams::clear_daemon_ipc_key() {
  daemon_ipc_key_ = 45u;
  clear_has_daemon_ipc_key();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::daemon_ipc_key() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.daemon_ipc_key)
  return daemon_ipc_key_;
}
inline void ChannelManagerInitParams::set_daemon_ipc_key(::google::protobuf::uint32 value) {
  set_has_daemon_ipc_key();
  daemon_ipc_key_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.daemon_ipc_key)
}

// required bool reset_at_open = 15 [default = true];
inline bool ChannelManagerInitParams::has_reset_at_open() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChannelManagerInitParams::set_has_reset_at_open() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChannelManagerInitParams::clear_has_reset_at_open() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChannelManagerInitParams::clear_reset_at_open() {
  reset_at_open_ = true;
  clear_has_reset_at_open();
}
inline bool ChannelManagerInitParams::reset_at_open() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.reset_at_open)
  return reset_at_open_;
}
inline void ChannelManagerInitParams::set_reset_at_open(bool value) {
  set_has_reset_at_open();
  reset_at_open_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.reset_at_open)
}

// repeated uint32 chan_level_file = 16 [packed = true];
inline int ChannelManagerInitParams::chan_level_file_size() const {
  return chan_level_file_.size();
}
inline void ChannelManagerInitParams::clear_chan_level_file() {
  chan_level_file_.Clear();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::chan_level_file(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.chan_level_file)
  return chan_level_file_.Get(index);
}
inline void ChannelManagerInitParams::set_chan_level_file(int index, ::google::protobuf::uint32 value) {
  chan_level_file_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.chan_level_file)
}
inline void ChannelManagerInitParams::add_chan_level_file(::google::protobuf::uint32 value) {
  chan_level_file_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.ChannelManagerInitParams.chan_level_file)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelManagerInitParams::chan_level_file() const {
  // @@protoc_insertion_point(field_list:channel_manager.ChannelManagerInitParams.chan_level_file)
  return chan_level_file_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelManagerInitParams::mutable_chan_level_file() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.ChannelManagerInitParams.chan_level_file)
  return &chan_level_file_;
}

// repeated uint32 chan_level_console = 17 [packed = true];
inline int ChannelManagerInitParams::chan_level_console_size() const {
  return chan_level_console_.size();
}
inline void ChannelManagerInitParams::clear_chan_level_console() {
  chan_level_console_.Clear();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::chan_level_console(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.chan_level_console)
  return chan_level_console_.Get(index);
}
inline void ChannelManagerInitParams::set_chan_level_console(int index, ::google::protobuf::uint32 value) {
  chan_level_console_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.chan_level_console)
}
inline void ChannelManagerInitParams::add_chan_level_console(::google::protobuf::uint32 value) {
  chan_level_console_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.ChannelManagerInitParams.chan_level_console)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelManagerInitParams::chan_level_console() const {
  // @@protoc_insertion_point(field_list:channel_manager.ChannelManagerInitParams.chan_level_console)
  return chan_level_console_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelManagerInitParams::mutable_chan_level_console() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.ChannelManagerInitParams.chan_level_console)
  return &chan_level_console_;
}

// repeated uint32 chan_level_daemon = 18 [packed = true];
inline int ChannelManagerInitParams::chan_level_daemon_size() const {
  return chan_level_daemon_.size();
}
inline void ChannelManagerInitParams::clear_chan_level_daemon() {
  chan_level_daemon_.Clear();
}
inline ::google::protobuf::uint32 ChannelManagerInitParams::chan_level_daemon(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.chan_level_daemon)
  return chan_level_daemon_.Get(index);
}
inline void ChannelManagerInitParams::set_chan_level_daemon(int index, ::google::protobuf::uint32 value) {
  chan_level_daemon_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.ChannelManagerInitParams.chan_level_daemon)
}
inline void ChannelManagerInitParams::add_chan_level_daemon(::google::protobuf::uint32 value) {
  chan_level_daemon_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.ChannelManagerInitParams.chan_level_daemon)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelManagerInitParams::chan_level_daemon() const {
  // @@protoc_insertion_point(field_list:channel_manager.ChannelManagerInitParams.chan_level_daemon)
  return chan_level_daemon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelManagerInitParams::mutable_chan_level_daemon() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.ChannelManagerInitParams.chan_level_daemon)
  return &chan_level_daemon_;
}

// required .channel_manager.DriverTimings driver_timings = 19;
inline bool ChannelManagerInitParams::has_driver_timings() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChannelManagerInitParams::set_has_driver_timings() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChannelManagerInitParams::clear_has_driver_timings() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChannelManagerInitParams::clear_driver_timings() {
  if (driver_timings_ != NULL) driver_timings_->::channel_manager::DriverTimings::Clear();
  clear_has_driver_timings();
}
inline const ::channel_manager::DriverTimings& ChannelManagerInitParams::driver_timings() const {
  // @@protoc_insertion_point(field_get:channel_manager.ChannelManagerInitParams.driver_timings)
  return driver_timings_ != NULL ? *driver_timings_ : *default_instance_->driver_timings_;
}
inline ::channel_manager::DriverTimings* ChannelManagerInitParams::mutable_driver_timings() {
  set_has_driver_timings();
  if (driver_timings_ == NULL) driver_timings_ = new ::channel_manager::DriverTimings;
  // @@protoc_insertion_point(field_mutable:channel_manager.ChannelManagerInitParams.driver_timings)
  return driver_timings_;
}
inline ::channel_manager::DriverTimings* ChannelManagerInitParams::release_driver_timings() {
  clear_has_driver_timings();
  ::channel_manager::DriverTimings* temp = driver_timings_;
  driver_timings_ = NULL;
  return temp;
}
inline void ChannelManagerInitParams::set_allocated_driver_timings(::channel_manager::DriverTimings* driver_timings) {
  delete driver_timings_;
  driver_timings_ = driver_timings;
  if (driver_timings) {
    set_has_driver_timings();
  } else {
    clear_has_driver_timings();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_manager.ChannelManagerInitParams.driver_timings)
}

// -------------------------------------------------------------------

// ADCParams

// required uint32 control1 = 1;
inline bool ADCParams::has_control1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCParams::set_has_control1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADCParams::clear_has_control1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADCParams::clear_control1() {
  control1_ = 0u;
  clear_has_control1();
}
inline ::google::protobuf::uint32 ADCParams::control1() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCParams.control1)
  return control1_;
}
inline void ADCParams::set_control1(::google::protobuf::uint32 value) {
  set_has_control1();
  control1_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCParams.control1)
}

// required uint32 control2 = 2;
inline bool ADCParams::has_control2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCParams::set_has_control2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCParams::clear_has_control2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADCParams::clear_control2() {
  control2_ = 0u;
  clear_has_control2();
}
inline ::google::protobuf::uint32 ADCParams::control2() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCParams.control2)
  return control2_;
}
inline void ADCParams::set_control2(::google::protobuf::uint32 value) {
  set_has_control2();
  control2_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCParams.control2)
}

// required uint32 offset = 3;
inline bool ADCParams::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCParams::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADCParams::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADCParams::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 ADCParams::offset() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCParams.offset)
  return offset_;
}
inline void ADCParams::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCParams.offset)
}

// required uint32 gain = 4;
inline bool ADCParams::has_gain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADCParams::set_has_gain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADCParams::clear_has_gain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ADCParams::clear_gain() {
  gain_ = 0u;
  clear_has_gain();
}
inline ::google::protobuf::uint32 ADCParams::gain() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCParams.gain)
  return gain_;
}
inline void ADCParams::set_gain(::google::protobuf::uint32 value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCParams.gain)
}

// required uint32 overrange = 5;
inline bool ADCParams::has_overrange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADCParams::set_has_overrange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADCParams::clear_has_overrange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADCParams::clear_overrange() {
  overrange_ = 0u;
  clear_has_overrange();
}
inline ::google::protobuf::uint32 ADCParams::overrange() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCParams.overrange)
  return overrange_;
}
inline void ADCParams::set_overrange(::google::protobuf::uint32 value) {
  set_has_overrange();
  overrange_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCParams.overrange)
}

// required uint32 ch_settings = 6;
inline bool ADCParams::has_ch_settings() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ADCParams::set_has_ch_settings() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ADCParams::clear_has_ch_settings() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ADCParams::clear_ch_settings() {
  ch_settings_ = 0u;
  clear_has_ch_settings();
}
inline ::google::protobuf::uint32 ADCParams::ch_settings() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCParams.ch_settings)
  return ch_settings_;
}
inline void ADCParams::set_ch_settings(::google::protobuf::uint32 value) {
  set_has_ch_settings();
  ch_settings_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCParams.ch_settings)
}

// -------------------------------------------------------------------

// ADCChannelInitParams

// required uint32 ch_idx = 1 [default = 0];
inline bool ADCChannelInitParams::has_ch_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCChannelInitParams::set_has_ch_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADCChannelInitParams::clear_has_ch_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADCChannelInitParams::clear_ch_idx() {
  ch_idx_ = 0u;
  clear_has_ch_idx();
}
inline ::google::protobuf::uint32 ADCChannelInitParams::ch_idx() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.ch_idx)
  return ch_idx_;
}
inline void ADCChannelInitParams::set_ch_idx(::google::protobuf::uint32 value) {
  set_has_ch_idx();
  ch_idx_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCChannelInitParams.ch_idx)
}

// required uint32 rot_idx = 2 [default = 0];
inline bool ADCChannelInitParams::has_rot_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCChannelInitParams::set_has_rot_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCChannelInitParams::clear_has_rot_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADCChannelInitParams::clear_rot_idx() {
  rot_idx_ = 0u;
  clear_has_rot_idx();
}
inline ::google::protobuf::uint32 ADCChannelInitParams::rot_idx() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.rot_idx)
  return rot_idx_;
}
inline void ADCChannelInitParams::set_rot_idx(::google::protobuf::uint32 value) {
  set_has_rot_idx();
  rot_idx_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCChannelInitParams.rot_idx)
}

// optional uint32 drv_buf_size = 3 [default = 32768];
inline bool ADCChannelInitParams::has_drv_buf_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCChannelInitParams::set_has_drv_buf_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADCChannelInitParams::clear_has_drv_buf_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADCChannelInitParams::clear_drv_buf_size() {
  drv_buf_size_ = 32768u;
  clear_has_drv_buf_size();
}
inline ::google::protobuf::uint32 ADCChannelInitParams::drv_buf_size() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.drv_buf_size)
  return drv_buf_size_;
}
inline void ADCChannelInitParams::set_drv_buf_size(::google::protobuf::uint32 value) {
  set_has_drv_buf_size();
  drv_buf_size_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCChannelInitParams.drv_buf_size)
}

// optional uint32 usr_proc_len = 4 [default = 32768];
inline bool ADCChannelInitParams::has_usr_proc_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADCChannelInitParams::set_has_usr_proc_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADCChannelInitParams::clear_has_usr_proc_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ADCChannelInitParams::clear_usr_proc_len() {
  usr_proc_len_ = 32768u;
  clear_has_usr_proc_len();
}
inline ::google::protobuf::uint32 ADCChannelInitParams::usr_proc_len() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.usr_proc_len)
  return usr_proc_len_;
}
inline void ADCChannelInitParams::set_usr_proc_len(::google::protobuf::uint32 value) {
  set_has_usr_proc_len();
  usr_proc_len_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCChannelInitParams.usr_proc_len)
}

// optional uint32 usr_proc_cnt = 5 [default = 0];
inline bool ADCChannelInitParams::has_usr_proc_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADCChannelInitParams::set_has_usr_proc_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADCChannelInitParams::clear_has_usr_proc_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADCChannelInitParams::clear_usr_proc_cnt() {
  usr_proc_cnt_ = 0u;
  clear_has_usr_proc_cnt();
}
inline ::google::protobuf::uint32 ADCChannelInitParams::usr_proc_cnt() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.usr_proc_cnt)
  return usr_proc_cnt_;
}
inline void ADCChannelInitParams::set_usr_proc_cnt(::google::protobuf::uint32 value) {
  set_has_usr_proc_cnt();
  usr_proc_cnt_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCChannelInitParams.usr_proc_cnt)
}

// optional uint32 sen_filter_id = 6 [default = 0];
inline bool ADCChannelInitParams::has_sen_filter_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ADCChannelInitParams::set_has_sen_filter_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ADCChannelInitParams::clear_has_sen_filter_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ADCChannelInitParams::clear_sen_filter_id() {
  sen_filter_id_ = 0u;
  clear_has_sen_filter_id();
}
inline ::google::protobuf::uint32 ADCChannelInitParams::sen_filter_id() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.sen_filter_id)
  return sen_filter_id_;
}
inline void ADCChannelInitParams::set_sen_filter_id(::google::protobuf::uint32 value) {
  set_has_sen_filter_id();
  sen_filter_id_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.ADCChannelInitParams.sen_filter_id)
}

// optional .channel_manager.ADCParams ap = 7;
inline bool ADCChannelInitParams::has_ap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ADCChannelInitParams::set_has_ap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ADCChannelInitParams::clear_has_ap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ADCChannelInitParams::clear_ap() {
  if (ap_ != NULL) ap_->::channel_manager::ADCParams::Clear();
  clear_has_ap();
}
inline const ::channel_manager::ADCParams& ADCChannelInitParams::ap() const {
  // @@protoc_insertion_point(field_get:channel_manager.ADCChannelInitParams.ap)
  return ap_ != NULL ? *ap_ : *default_instance_->ap_;
}
inline ::channel_manager::ADCParams* ADCChannelInitParams::mutable_ap() {
  set_has_ap();
  if (ap_ == NULL) ap_ = new ::channel_manager::ADCParams;
  // @@protoc_insertion_point(field_mutable:channel_manager.ADCChannelInitParams.ap)
  return ap_;
}
inline ::channel_manager::ADCParams* ADCChannelInitParams::release_ap() {
  clear_has_ap();
  ::channel_manager::ADCParams* temp = ap_;
  ap_ = NULL;
  return temp;
}
inline void ADCChannelInitParams::set_allocated_ap(::channel_manager::ADCParams* ap) {
  delete ap_;
  ap_ = ap;
  if (ap) {
    set_has_ap();
  } else {
    clear_has_ap();
  }
  // @@protoc_insertion_point(field_set_allocated:channel_manager.ADCChannelInitParams.ap)
}

// -------------------------------------------------------------------

// SynctaskChannels

// required uint32 adc_ch_cnt = 1 [default = 0];
inline bool SynctaskChannels::has_adc_ch_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynctaskChannels::set_has_adc_ch_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynctaskChannels::clear_has_adc_ch_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynctaskChannels::clear_adc_ch_cnt() {
  adc_ch_cnt_ = 0u;
  clear_has_adc_ch_cnt();
}
inline ::google::protobuf::uint32 SynctaskChannels::adc_ch_cnt() const {
  // @@protoc_insertion_point(field_get:channel_manager.SynctaskChannels.adc_ch_cnt)
  return adc_ch_cnt_;
}
inline void SynctaskChannels::set_adc_ch_cnt(::google::protobuf::uint32 value) {
  set_has_adc_ch_cnt();
  adc_ch_cnt_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.SynctaskChannels.adc_ch_cnt)
}

// repeated uint32 adc_ch_idx = 2;
inline int SynctaskChannels::adc_ch_idx_size() const {
  return adc_ch_idx_.size();
}
inline void SynctaskChannels::clear_adc_ch_idx() {
  adc_ch_idx_.Clear();
}
inline ::google::protobuf::uint32 SynctaskChannels::adc_ch_idx(int index) const {
  // @@protoc_insertion_point(field_get:channel_manager.SynctaskChannels.adc_ch_idx)
  return adc_ch_idx_.Get(index);
}
inline void SynctaskChannels::set_adc_ch_idx(int index, ::google::protobuf::uint32 value) {
  adc_ch_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:channel_manager.SynctaskChannels.adc_ch_idx)
}
inline void SynctaskChannels::add_adc_ch_idx(::google::protobuf::uint32 value) {
  adc_ch_idx_.Add(value);
  // @@protoc_insertion_point(field_add:channel_manager.SynctaskChannels.adc_ch_idx)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SynctaskChannels::adc_ch_idx() const {
  // @@protoc_insertion_point(field_list:channel_manager.SynctaskChannels.adc_ch_idx)
  return adc_ch_idx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SynctaskChannels::mutable_adc_ch_idx() {
  // @@protoc_insertion_point(field_mutable_list:channel_manager.SynctaskChannels.adc_ch_idx)
  return &adc_ch_idx_;
}

// optional uint32 sync_reg = 3;
inline bool SynctaskChannels::has_sync_reg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynctaskChannels::set_has_sync_reg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynctaskChannels::clear_has_sync_reg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynctaskChannels::clear_sync_reg() {
  sync_reg_ = 0u;
  clear_has_sync_reg();
}
inline ::google::protobuf::uint32 SynctaskChannels::sync_reg() const {
  // @@protoc_insertion_point(field_get:channel_manager.SynctaskChannels.sync_reg)
  return sync_reg_;
}
inline void SynctaskChannels::set_sync_reg(::google::protobuf::uint32 value) {
  set_has_sync_reg();
  sync_reg_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.SynctaskChannels.sync_reg)
}

// -------------------------------------------------------------------

// RotChannelInitParams

// required uint32 rot_idx = 1 [default = 0];
inline bool RotChannelInitParams::has_rot_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotChannelInitParams::set_has_rot_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotChannelInitParams::clear_has_rot_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotChannelInitParams::clear_rot_idx() {
  rot_idx_ = 0u;
  clear_has_rot_idx();
}
inline ::google::protobuf::uint32 RotChannelInitParams::rot_idx() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotChannelInitParams.rot_idx)
  return rot_idx_;
}
inline void RotChannelInitParams::set_rot_idx(::google::protobuf::uint32 value) {
  set_has_rot_idx();
  rot_idx_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotChannelInitParams.rot_idx)
}

// optional uint32 av_num = 2 [default = 1];
inline bool RotChannelInitParams::has_av_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotChannelInitParams::set_has_av_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotChannelInitParams::clear_has_av_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotChannelInitParams::clear_av_num() {
  av_num_ = 1u;
  clear_has_av_num();
}
inline ::google::protobuf::uint32 RotChannelInitParams::av_num() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotChannelInitParams.av_num)
  return av_num_;
}
inline void RotChannelInitParams::set_av_num(::google::protobuf::uint32 value) {
  set_has_av_num();
  av_num_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotChannelInitParams.av_num)
}

// optional uint32 pw_min_us = 3 [default = 25];
inline bool RotChannelInitParams::has_pw_min_us() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotChannelInitParams::set_has_pw_min_us() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotChannelInitParams::clear_has_pw_min_us() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotChannelInitParams::clear_pw_min_us() {
  pw_min_us_ = 25u;
  clear_has_pw_min_us();
}
inline ::google::protobuf::uint32 RotChannelInitParams::pw_min_us() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotChannelInitParams.pw_min_us)
  return pw_min_us_;
}
inline void RotChannelInitParams::set_pw_min_us(::google::protobuf::uint32 value) {
  set_has_pw_min_us();
  pw_min_us_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotChannelInitParams.pw_min_us)
}

// optional uint32 period_min_us = 4 [default = 8333];
inline bool RotChannelInitParams::has_period_min_us() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotChannelInitParams::set_has_period_min_us() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotChannelInitParams::clear_has_period_min_us() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotChannelInitParams::clear_period_min_us() {
  period_min_us_ = 8333u;
  clear_has_period_min_us();
}
inline ::google::protobuf::uint32 RotChannelInitParams::period_min_us() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotChannelInitParams.period_min_us)
  return period_min_us_;
}
inline void RotChannelInitParams::set_period_min_us(::google::protobuf::uint32 value) {
  set_has_period_min_us();
  period_min_us_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotChannelInitParams.period_min_us)
}

// optional uint32 period_max_us = 5 [default = 1000000];
inline bool RotChannelInitParams::has_period_max_us() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RotChannelInitParams::set_has_period_max_us() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RotChannelInitParams::clear_has_period_max_us() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RotChannelInitParams::clear_period_max_us() {
  period_max_us_ = 1000000u;
  clear_has_period_max_us();
}
inline ::google::protobuf::uint32 RotChannelInitParams::period_max_us() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotChannelInitParams.period_max_us)
  return period_max_us_;
}
inline void RotChannelInitParams::set_period_max_us(::google::protobuf::uint32 value) {
  set_has_period_max_us();
  period_max_us_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotChannelInitParams.period_max_us)
}

// -------------------------------------------------------------------

// RotData

// required sint32 error_code = 1 [default = 0];
inline bool RotData::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotData::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotData::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotData::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 RotData::error_code() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.error_code)
  return error_code_;
}
inline void RotData::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.error_code)
}

// optional bool running = 2 [default = false];
inline bool RotData::has_running() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotData::set_has_running() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotData::clear_has_running() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotData::clear_running() {
  running_ = false;
  clear_has_running();
}
inline bool RotData::running() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.running)
  return running_;
}
inline void RotData::set_running(bool value) {
  set_has_running();
  running_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.running)
}

// optional uint32 pos = 3 [default = 0];
inline bool RotData::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotData::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotData::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 RotData::pos() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.pos)
  return pos_;
}
inline void RotData::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.pos)
}

// optional uint32 min = 4;
inline bool RotData::has_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotData::set_has_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotData::clear_has_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotData::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 RotData::min() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.min)
  return min_;
}
inline void RotData::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.min)
}

// optional uint32 max = 5;
inline bool RotData::has_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RotData::set_has_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RotData::clear_has_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RotData::clear_max() {
  max_ = 0u;
  clear_has_max();
}
inline ::google::protobuf::uint32 RotData::max() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.max)
  return max_;
}
inline void RotData::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.max)
}

// optional uint32 avr = 6;
inline bool RotData::has_avr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RotData::set_has_avr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RotData::clear_has_avr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RotData::clear_avr() {
  avr_ = 0u;
  clear_has_avr();
}
inline ::google::protobuf::uint32 RotData::avr() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.avr)
  return avr_;
}
inline void RotData::set_avr(::google::protobuf::uint32 value) {
  set_has_avr();
  avr_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.avr)
}

// optional double sum = 7;
inline bool RotData::has_sum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RotData::set_has_sum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RotData::clear_has_sum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RotData::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline double RotData::sum() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.sum)
  return sum_;
}
inline void RotData::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.sum)
}

// optional uint32 cnt = 8;
inline bool RotData::has_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RotData::set_has_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RotData::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RotData::clear_cnt() {
  cnt_ = 0u;
  clear_has_cnt();
}
inline ::google::protobuf::uint32 RotData::cnt() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.cnt)
  return cnt_;
}
inline void RotData::set_cnt(::google::protobuf::uint32 value) {
  set_has_cnt();
  cnt_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.cnt)
}

// optional double freq_min = 9;
inline bool RotData::has_freq_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RotData::set_has_freq_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RotData::clear_has_freq_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RotData::clear_freq_min() {
  freq_min_ = 0;
  clear_has_freq_min();
}
inline double RotData::freq_min() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.freq_min)
  return freq_min_;
}
inline void RotData::set_freq_min(double value) {
  set_has_freq_min();
  freq_min_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.freq_min)
}

// optional double freq_max = 10;
inline bool RotData::has_freq_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RotData::set_has_freq_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RotData::clear_has_freq_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RotData::clear_freq_max() {
  freq_max_ = 0;
  clear_has_freq_max();
}
inline double RotData::freq_max() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.freq_max)
  return freq_max_;
}
inline void RotData::set_freq_max(double value) {
  set_has_freq_max();
  freq_max_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.freq_max)
}

// optional double freq_avr = 11;
inline bool RotData::has_freq_avr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RotData::set_has_freq_avr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RotData::clear_has_freq_avr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RotData::clear_freq_avr() {
  freq_avr_ = 0;
  clear_has_freq_avr();
}
inline double RotData::freq_avr() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.freq_avr)
  return freq_avr_;
}
inline void RotData::set_freq_avr(double value) {
  set_has_freq_avr();
  freq_avr_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.freq_avr)
}

// optional bool overhigh = 12 [default = false];
inline bool RotData::has_overhigh() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RotData::set_has_overhigh() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RotData::clear_has_overhigh() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RotData::clear_overhigh() {
  overhigh_ = false;
  clear_has_overhigh();
}
inline bool RotData::overhigh() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.overhigh)
  return overhigh_;
}
inline void RotData::set_overhigh(bool value) {
  set_has_overhigh();
  overhigh_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.overhigh)
}

// optional bool underlow = 13 [default = false];
inline bool RotData::has_underlow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RotData::set_has_underlow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RotData::clear_has_underlow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RotData::clear_underlow() {
  underlow_ = false;
  clear_has_underlow();
}
inline bool RotData::underlow() const {
  // @@protoc_insertion_point(field_get:channel_manager.RotData.underlow)
  return underlow_;
}
inline void RotData::set_underlow(bool value) {
  set_has_underlow();
  underlow_ = value;
  // @@protoc_insertion_point(field_set:channel_manager.RotData.underlow)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_manager

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channel_5fmanager_2eproto__INCLUDED
