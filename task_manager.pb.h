// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_manager.proto

#ifndef PROTOBUF_task_5fmanager_2eproto__INCLUDED
#define PROTOBUF_task_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace task_manager {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_5fmanager_2eproto();
void protobuf_AssignDesc_task_5fmanager_2eproto();
void protobuf_ShutdownFile_task_5fmanager_2eproto();

class DSPEmulInitParams;
class IntArray;
class LPFilter;
class LPFilter_params;
class BPFilter;
class BPFilter_params;
class RSMPFilter;
class RSMPFilter_params;
class HPFilter;
class HPFilter_params;
class SPFilter;
class SPFilter_params;
class INTGFilter;
class INTGFilter_params;
class FParams;
class TStatRot;
class TOffset;
class TFrotLimits;
class RBitem;
class Vharmonic_data;
class StatKurtosis_data;
class StatTimeSig_data;
class QualityTimeSig_data;
class SaveTimeSig_data;
class VsensorFrot_data;
class DecimTimeSig_data;
class AnyTaskResult;
class CommonTaskParams;
class SpectrTaskParams;
class VharmonicTaskParams;
class StatKurtosisTaskParams;
class StatTimeSigTaskParams;
class PlayerTimeSigTaskParams;
class VibegTaskParams;
class QualityTimeSigTaskParams;
class SaveTimeSigTaskParams;
class VsensorFrotTaskParams;
class DecimTimeSigTaskParams;
class AnyTaskParams;

// ===================================================================

class DSPEmulInitParams : public ::google::protobuf::Message {
 public:
  DSPEmulInitParams();
  virtual ~DSPEmulInitParams();

  DSPEmulInitParams(const DSPEmulInitParams& from);

  inline DSPEmulInitParams& operator=(const DSPEmulInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DSPEmulInitParams& default_instance();

  void Swap(DSPEmulInitParams* other);

  // implements Message ----------------------------------------------

  DSPEmulInitParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DSPEmulInitParams& from);
  void MergeFrom(const DSPEmulInitParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ATSDTC = 1;
  inline bool has_atsdtc() const;
  inline void clear_atsdtc();
  static const int kATSDTCFieldNumber = 1;
  inline ::google::protobuf::uint32 atsdtc() const;
  inline void set_atsdtc(::google::protobuf::uint32 value);

  // required uint32 AInitSigBufferLength = 2;
  inline bool has_ainitsigbufferlength() const;
  inline void clear_ainitsigbufferlength();
  static const int kAInitSigBufferLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 ainitsigbufferlength() const;
  inline void set_ainitsigbufferlength(::google::protobuf::uint32 value);

  // required uint32 ASigBufferIncrement = 3;
  inline bool has_asigbufferincrement() const;
  inline void clear_asigbufferincrement();
  static const int kASigBufferIncrementFieldNumber = 3;
  inline ::google::protobuf::uint32 asigbufferincrement() const;
  inline void set_asigbufferincrement(::google::protobuf::uint32 value);

  // required uint32 AInitRotBufferLength = 4;
  inline bool has_ainitrotbufferlength() const;
  inline void clear_ainitrotbufferlength();
  static const int kAInitRotBufferLengthFieldNumber = 4;
  inline ::google::protobuf::uint32 ainitrotbufferlength() const;
  inline void set_ainitrotbufferlength(::google::protobuf::uint32 value);

  // required uint32 ARotBufferIncrement = 5;
  inline bool has_arotbufferincrement() const;
  inline void clear_arotbufferincrement();
  static const int kARotBufferIncrementFieldNumber = 5;
  inline ::google::protobuf::uint32 arotbufferincrement() const;
  inline void set_arotbufferincrement(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.DSPEmulInitParams)
 private:
  inline void set_has_atsdtc();
  inline void clear_has_atsdtc();
  inline void set_has_ainitsigbufferlength();
  inline void clear_has_ainitsigbufferlength();
  inline void set_has_asigbufferincrement();
  inline void clear_has_asigbufferincrement();
  inline void set_has_ainitrotbufferlength();
  inline void clear_has_ainitrotbufferlength();
  inline void set_has_arotbufferincrement();
  inline void clear_has_arotbufferincrement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 atsdtc_;
  ::google::protobuf::uint32 ainitsigbufferlength_;
  ::google::protobuf::uint32 asigbufferincrement_;
  ::google::protobuf::uint32 ainitrotbufferlength_;
  ::google::protobuf::uint32 arotbufferincrement_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DSPEmulInitParams* default_instance_;
};
// -------------------------------------------------------------------

class IntArray : public ::google::protobuf::Message {
 public:
  IntArray();
  virtual ~IntArray();

  IntArray(const IntArray& from);

  inline IntArray& operator=(const IntArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntArray& default_instance();

  void Swap(IntArray* other);

  // implements Message ----------------------------------------------

  IntArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntArray& from);
  void MergeFrom(const IntArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 values = 1;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:task_manager.IntArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static IntArray* default_instance_;
};
// -------------------------------------------------------------------

class LPFilter : public ::google::protobuf::Message {
 public:
  LPFilter();
  virtual ~LPFilter();

  LPFilter(const LPFilter& from);

  inline LPFilter& operator=(const LPFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LPFilter& default_instance();

  void Swap(LPFilter* other);

  // implements Message ----------------------------------------------

  LPFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LPFilter& from);
  void MergeFrom(const LPFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required double MFreq = 2;
  inline bool has_mfreq() const;
  inline void clear_mfreq();
  static const int kMFreqFieldNumber = 2;
  inline double mfreq() const;
  inline void set_mfreq(double value);

  // required int32 RFreq = 3;
  inline bool has_rfreq() const;
  inline void clear_rfreq();
  static const int kRFreqFieldNumber = 3;
  inline ::google::protobuf::int32 rfreq() const;
  inline void set_rfreq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.LPFilter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_mfreq();
  inline void clear_has_mfreq();
  inline void set_has_rfreq();
  inline void clear_has_rfreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double mfreq_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 rfreq_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static LPFilter* default_instance_;
};
// -------------------------------------------------------------------

class LPFilter_params : public ::google::protobuf::Message {
 public:
  LPFilter_params();
  virtual ~LPFilter_params();

  LPFilter_params(const LPFilter_params& from);

  inline LPFilter_params& operator=(const LPFilter_params& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LPFilter_params& default_instance();

  void Swap(LPFilter_params* other);

  // implements Message ----------------------------------------------

  LPFilter_params* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LPFilter_params& from);
  void MergeFrom(const LPFilter_params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 LPFilterIndex = 1;
  inline bool has_lpfilterindex() const;
  inline void clear_lpfilterindex();
  static const int kLPFilterIndexFieldNumber = 1;
  inline ::google::protobuf::int32 lpfilterindex() const;
  inline void set_lpfilterindex(::google::protobuf::int32 value);

  // required uint32 LPFilterDecim = 2;
  inline bool has_lpfilterdecim() const;
  inline void clear_lpfilterdecim();
  static const int kLPFilterDecimFieldNumber = 2;
  inline ::google::protobuf::uint32 lpfilterdecim() const;
  inline void set_lpfilterdecim(::google::protobuf::uint32 value);

  // required int32 LPFilterType = 3;
  inline bool has_lpfiltertype() const;
  inline void clear_lpfiltertype();
  static const int kLPFilterTypeFieldNumber = 3;
  inline ::google::protobuf::int32 lpfiltertype() const;
  inline void set_lpfiltertype(::google::protobuf::int32 value);

  // required bool LPFilterUsualW = 4;
  inline bool has_lpfilterusualw() const;
  inline void clear_lpfilterusualw();
  static const int kLPFilterUsualWFieldNumber = 4;
  inline bool lpfilterusualw() const;
  inline void set_lpfilterusualw(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.LPFilter_params)
 private:
  inline void set_has_lpfilterindex();
  inline void clear_has_lpfilterindex();
  inline void set_has_lpfilterdecim();
  inline void clear_has_lpfilterdecim();
  inline void set_has_lpfiltertype();
  inline void clear_has_lpfiltertype();
  inline void set_has_lpfilterusualw();
  inline void clear_has_lpfilterusualw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lpfilterindex_;
  ::google::protobuf::uint32 lpfilterdecim_;
  ::google::protobuf::int32 lpfiltertype_;
  bool lpfilterusualw_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static LPFilter_params* default_instance_;
};
// -------------------------------------------------------------------

class BPFilter : public ::google::protobuf::Message {
 public:
  BPFilter();
  virtual ~BPFilter();

  BPFilter(const BPFilter& from);

  inline BPFilter& operator=(const BPFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BPFilter& default_instance();

  void Swap(BPFilter* other);

  // implements Message ----------------------------------------------

  BPFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BPFilter& from);
  void MergeFrom(const BPFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 CFreq = 2;
  inline bool has_cfreq() const;
  inline void clear_cfreq();
  static const int kCFreqFieldNumber = 2;
  inline ::google::protobuf::int32 cfreq() const;
  inline void set_cfreq(::google::protobuf::int32 value);

  // required int32 Width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 Oct = 4;
  inline bool has_oct() const;
  inline void clear_oct();
  static const int kOctFieldNumber = 4;
  inline ::google::protobuf::int32 oct() const;
  inline void set_oct(::google::protobuf::int32 value);

  // required int32 Dec = 5;
  inline bool has_dec() const;
  inline void clear_dec();
  static const int kDecFieldNumber = 5;
  inline ::google::protobuf::int32 dec() const;
  inline void set_dec(::google::protobuf::int32 value);

  // required int32 PreDec = 6;
  inline bool has_predec() const;
  inline void clear_predec();
  static const int kPreDecFieldNumber = 6;
  inline ::google::protobuf::int32 predec() const;
  inline void set_predec(::google::protobuf::int32 value);

  // required int32 BPDec = 7;
  inline bool has_bpdec() const;
  inline void clear_bpdec();
  static const int kBPDecFieldNumber = 7;
  inline ::google::protobuf::int32 bpdec() const;
  inline void set_bpdec(::google::protobuf::int32 value);

  // required int32 EnvType = 8;
  inline bool has_envtype() const;
  inline void clear_envtype();
  static const int kEnvTypeFieldNumber = 8;
  inline ::google::protobuf::int32 envtype() const;
  inline void set_envtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.BPFilter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_cfreq();
  inline void clear_has_cfreq();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_oct();
  inline void clear_has_oct();
  inline void set_has_dec();
  inline void clear_has_dec();
  inline void set_has_predec();
  inline void clear_has_predec();
  inline void set_has_bpdec();
  inline void clear_has_bpdec();
  inline void set_has_envtype();
  inline void clear_has_envtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 cfreq_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 oct_;
  ::google::protobuf::int32 dec_;
  ::google::protobuf::int32 predec_;
  ::google::protobuf::int32 bpdec_;
  ::google::protobuf::int32 envtype_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static BPFilter* default_instance_;
};
// -------------------------------------------------------------------

class BPFilter_params : public ::google::protobuf::Message {
 public:
  BPFilter_params();
  virtual ~BPFilter_params();

  BPFilter_params(const BPFilter_params& from);

  inline BPFilter_params& operator=(const BPFilter_params& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BPFilter_params& default_instance();

  void Swap(BPFilter_params* other);

  // implements Message ----------------------------------------------

  BPFilter_params* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BPFilter_params& from);
  void MergeFrom(const BPFilter_params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 BPFilterIndex = 1;
  inline bool has_bpfilterindex() const;
  inline void clear_bpfilterindex();
  static const int kBPFilterIndexFieldNumber = 1;
  inline ::google::protobuf::int32 bpfilterindex() const;
  inline void set_bpfilterindex(::google::protobuf::int32 value);

  // required int32 BPFilterType = 2;
  inline bool has_bpfiltertype() const;
  inline void clear_bpfiltertype();
  static const int kBPFilterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 bpfiltertype() const;
  inline void set_bpfiltertype(::google::protobuf::int32 value);

  // required bool BPFilterUsualW = 3;
  inline bool has_bpfilterusualw() const;
  inline void clear_bpfilterusualw();
  static const int kBPFilterUsualWFieldNumber = 3;
  inline bool bpfilterusualw() const;
  inline void set_bpfilterusualw(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.BPFilter_params)
 private:
  inline void set_has_bpfilterindex();
  inline void clear_has_bpfilterindex();
  inline void set_has_bpfiltertype();
  inline void clear_has_bpfiltertype();
  inline void set_has_bpfilterusualw();
  inline void clear_has_bpfilterusualw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bpfilterindex_;
  ::google::protobuf::int32 bpfiltertype_;
  bool bpfilterusualw_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static BPFilter_params* default_instance_;
};
// -------------------------------------------------------------------

class RSMPFilter : public ::google::protobuf::Message {
 public:
  RSMPFilter();
  virtual ~RSMPFilter();

  RSMPFilter(const RSMPFilter& from);

  inline RSMPFilter& operator=(const RSMPFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RSMPFilter& default_instance();

  void Swap(RSMPFilter* other);

  // implements Message ----------------------------------------------

  RSMPFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RSMPFilter& from);
  void MergeFrom(const RSMPFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 Interp = 2;
  inline bool has_interp() const;
  inline void clear_interp();
  static const int kInterpFieldNumber = 2;
  inline ::google::protobuf::int32 interp() const;
  inline void set_interp(::google::protobuf::int32 value);

  // required int32 Dec = 3;
  inline bool has_dec() const;
  inline void clear_dec();
  static const int kDecFieldNumber = 3;
  inline ::google::protobuf::int32 dec() const;
  inline void set_dec(::google::protobuf::int32 value);

  // required double Rel = 4;
  inline bool has_rel() const;
  inline void clear_rel();
  static const int kRelFieldNumber = 4;
  inline double rel() const;
  inline void set_rel(double value);

  // required int32 ResampleType = 5;
  inline bool has_resampletype() const;
  inline void clear_resampletype();
  static const int kResampleTypeFieldNumber = 5;
  inline ::google::protobuf::int32 resampletype() const;
  inline void set_resampletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.RSMPFilter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_interp();
  inline void clear_has_interp();
  inline void set_has_dec();
  inline void clear_has_dec();
  inline void set_has_rel();
  inline void clear_has_rel();
  inline void set_has_resampletype();
  inline void clear_has_resampletype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 interp_;
  double rel_;
  ::google::protobuf::int32 dec_;
  ::google::protobuf::int32 resampletype_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static RSMPFilter* default_instance_;
};
// -------------------------------------------------------------------

class RSMPFilter_params : public ::google::protobuf::Message {
 public:
  RSMPFilter_params();
  virtual ~RSMPFilter_params();

  RSMPFilter_params(const RSMPFilter_params& from);

  inline RSMPFilter_params& operator=(const RSMPFilter_params& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RSMPFilter_params& default_instance();

  void Swap(RSMPFilter_params* other);

  // implements Message ----------------------------------------------

  RSMPFilter_params* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RSMPFilter_params& from);
  void MergeFrom(const RSMPFilter_params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 RSMPFilterIndex = 1;
  inline bool has_rsmpfilterindex() const;
  inline void clear_rsmpfilterindex();
  static const int kRSMPFilterIndexFieldNumber = 1;
  inline ::google::protobuf::int32 rsmpfilterindex() const;
  inline void set_rsmpfilterindex(::google::protobuf::int32 value);

  // required int32 RSMPFilterType = 2;
  inline bool has_rsmpfiltertype() const;
  inline void clear_rsmpfiltertype();
  static const int kRSMPFilterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 rsmpfiltertype() const;
  inline void set_rsmpfiltertype(::google::protobuf::int32 value);

  // required bool RSMPFilterUsualW = 3;
  inline bool has_rsmpfilterusualw() const;
  inline void clear_rsmpfilterusualw();
  static const int kRSMPFilterUsualWFieldNumber = 3;
  inline bool rsmpfilterusualw() const;
  inline void set_rsmpfilterusualw(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.RSMPFilter_params)
 private:
  inline void set_has_rsmpfilterindex();
  inline void clear_has_rsmpfilterindex();
  inline void set_has_rsmpfiltertype();
  inline void clear_has_rsmpfiltertype();
  inline void set_has_rsmpfilterusualw();
  inline void clear_has_rsmpfilterusualw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rsmpfilterindex_;
  ::google::protobuf::int32 rsmpfiltertype_;
  bool rsmpfilterusualw_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static RSMPFilter_params* default_instance_;
};
// -------------------------------------------------------------------

class HPFilter : public ::google::protobuf::Message {
 public:
  HPFilter();
  virtual ~HPFilter();

  HPFilter(const HPFilter& from);

  inline HPFilter& operator=(const HPFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPFilter& default_instance();

  void Swap(HPFilter* other);

  // implements Message ----------------------------------------------

  HPFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPFilter& from);
  void MergeFrom(const HPFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required double SFreq = 2;
  inline bool has_sfreq() const;
  inline void clear_sfreq();
  static const int kSFreqFieldNumber = 2;
  inline double sfreq() const;
  inline void set_sfreq(double value);

  // required double MFreq = 3;
  inline bool has_mfreq() const;
  inline void clear_mfreq();
  static const int kMFreqFieldNumber = 3;
  inline double mfreq() const;
  inline void set_mfreq(double value);

  // required int32 RFreq = 4;
  inline bool has_rfreq() const;
  inline void clear_rfreq();
  static const int kRFreqFieldNumber = 4;
  inline ::google::protobuf::int32 rfreq() const;
  inline void set_rfreq(::google::protobuf::int32 value);

  // required int32 HPFType = 5;
  inline bool has_hpftype() const;
  inline void clear_hpftype();
  static const int kHPFTypeFieldNumber = 5;
  inline ::google::protobuf::int32 hpftype() const;
  inline void set_hpftype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.HPFilter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_sfreq();
  inline void clear_has_sfreq();
  inline void set_has_mfreq();
  inline void clear_has_mfreq();
  inline void set_has_rfreq();
  inline void clear_has_rfreq();
  inline void set_has_hpftype();
  inline void clear_has_hpftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double sfreq_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 rfreq_;
  double mfreq_;
  ::google::protobuf::int32 hpftype_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static HPFilter* default_instance_;
};
// -------------------------------------------------------------------

class HPFilter_params : public ::google::protobuf::Message {
 public:
  HPFilter_params();
  virtual ~HPFilter_params();

  HPFilter_params(const HPFilter_params& from);

  inline HPFilter_params& operator=(const HPFilter_params& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HPFilter_params& default_instance();

  void Swap(HPFilter_params* other);

  // implements Message ----------------------------------------------

  HPFilter_params* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HPFilter_params& from);
  void MergeFrom(const HPFilter_params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 HPFilterIndex = 1;
  inline bool has_hpfilterindex() const;
  inline void clear_hpfilterindex();
  static const int kHPFilterIndexFieldNumber = 1;
  inline ::google::protobuf::int32 hpfilterindex() const;
  inline void set_hpfilterindex(::google::protobuf::int32 value);

  // required int32 HPFilterType = 2;
  inline bool has_hpfiltertype() const;
  inline void clear_hpfiltertype();
  static const int kHPFilterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 hpfiltertype() const;
  inline void set_hpfiltertype(::google::protobuf::int32 value);

  // required double HPFilterParam1 = 3;
  inline bool has_hpfilterparam1() const;
  inline void clear_hpfilterparam1();
  static const int kHPFilterParam1FieldNumber = 3;
  inline double hpfilterparam1() const;
  inline void set_hpfilterparam1(double value);

  // @@protoc_insertion_point(class_scope:task_manager.HPFilter_params)
 private:
  inline void set_has_hpfilterindex();
  inline void clear_has_hpfilterindex();
  inline void set_has_hpfiltertype();
  inline void clear_has_hpfiltertype();
  inline void set_has_hpfilterparam1();
  inline void clear_has_hpfilterparam1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hpfilterindex_;
  ::google::protobuf::int32 hpfiltertype_;
  double hpfilterparam1_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static HPFilter_params* default_instance_;
};
// -------------------------------------------------------------------

class SPFilter : public ::google::protobuf::Message {
 public:
  SPFilter();
  virtual ~SPFilter();

  SPFilter(const SPFilter& from);

  inline SPFilter& operator=(const SPFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPFilter& default_instance();

  void Swap(SPFilter* other);

  // implements Message ----------------------------------------------

  SPFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPFilter& from);
  void MergeFrom(const SPFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 RFreq = 2;
  inline bool has_rfreq() const;
  inline void clear_rfreq();
  static const int kRFreqFieldNumber = 2;
  inline ::google::protobuf::int32 rfreq() const;
  inline void set_rfreq(::google::protobuf::int32 value);

  // required int32 SPFType = 3;
  inline bool has_spftype() const;
  inline void clear_spftype();
  static const int kSPFTypeFieldNumber = 3;
  inline ::google::protobuf::int32 spftype() const;
  inline void set_spftype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.SPFilter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_rfreq();
  inline void clear_has_rfreq();
  inline void set_has_spftype();
  inline void clear_has_spftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 rfreq_;
  ::google::protobuf::int32 spftype_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static SPFilter* default_instance_;
};
// -------------------------------------------------------------------

class SPFilter_params : public ::google::protobuf::Message {
 public:
  SPFilter_params();
  virtual ~SPFilter_params();

  SPFilter_params(const SPFilter_params& from);

  inline SPFilter_params& operator=(const SPFilter_params& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPFilter_params& default_instance();

  void Swap(SPFilter_params* other);

  // implements Message ----------------------------------------------

  SPFilter_params* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPFilter_params& from);
  void MergeFrom(const SPFilter_params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 SPFilterIndex = 1;
  inline bool has_spfilterindex() const;
  inline void clear_spfilterindex();
  static const int kSPFilterIndexFieldNumber = 1;
  inline ::google::protobuf::int32 spfilterindex() const;
  inline void set_spfilterindex(::google::protobuf::int32 value);

  // required int32 SPFilterType = 2;
  inline bool has_spfiltertype() const;
  inline void clear_spfiltertype();
  static const int kSPFilterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 spfiltertype() const;
  inline void set_spfiltertype(::google::protobuf::int32 value);

  // required bool SPFilterUsualW = 3;
  inline bool has_spfilterusualw() const;
  inline void clear_spfilterusualw();
  static const int kSPFilterUsualWFieldNumber = 3;
  inline bool spfilterusualw() const;
  inline void set_spfilterusualw(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.SPFilter_params)
 private:
  inline void set_has_spfilterindex();
  inline void clear_has_spfilterindex();
  inline void set_has_spfiltertype();
  inline void clear_has_spfiltertype();
  inline void set_has_spfilterusualw();
  inline void clear_has_spfilterusualw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 spfilterindex_;
  ::google::protobuf::int32 spfiltertype_;
  bool spfilterusualw_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static SPFilter_params* default_instance_;
};
// -------------------------------------------------------------------

class INTGFilter : public ::google::protobuf::Message {
 public:
  INTGFilter();
  virtual ~INTGFilter();

  INTGFilter(const INTGFilter& from);

  inline INTGFilter& operator=(const INTGFilter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const INTGFilter& default_instance();

  void Swap(INTGFilter* other);

  // implements Message ----------------------------------------------

  INTGFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const INTGFilter& from);
  void MergeFrom(const INTGFilter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 INTGFType = 2;
  inline bool has_intgftype() const;
  inline void clear_intgftype();
  static const int kINTGFTypeFieldNumber = 2;
  inline ::google::protobuf::int32 intgftype() const;
  inline void set_intgftype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.INTGFilter)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_intgftype();
  inline void clear_has_intgftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 intgftype_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static INTGFilter* default_instance_;
};
// -------------------------------------------------------------------

class INTGFilter_params : public ::google::protobuf::Message {
 public:
  INTGFilter_params();
  virtual ~INTGFilter_params();

  INTGFilter_params(const INTGFilter_params& from);

  inline INTGFilter_params& operator=(const INTGFilter_params& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const INTGFilter_params& default_instance();

  void Swap(INTGFilter_params* other);

  // implements Message ----------------------------------------------

  INTGFilter_params* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const INTGFilter_params& from);
  void MergeFrom(const INTGFilter_params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 INTGFilterIndex = 1;
  inline bool has_intgfilterindex() const;
  inline void clear_intgfilterindex();
  static const int kINTGFilterIndexFieldNumber = 1;
  inline ::google::protobuf::int32 intgfilterindex() const;
  inline void set_intgfilterindex(::google::protobuf::int32 value);

  // required int32 INTGFilterType = 2;
  inline bool has_intgfiltertype() const;
  inline void clear_intgfiltertype();
  static const int kINTGFilterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 intgfiltertype() const;
  inline void set_intgfiltertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.INTGFilter_params)
 private:
  inline void set_has_intgfilterindex();
  inline void clear_has_intgfilterindex();
  inline void set_has_intgfiltertype();
  inline void clear_has_intgfiltertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 intgfilterindex_;
  ::google::protobuf::int32 intgfiltertype_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static INTGFilter_params* default_instance_;
};
// -------------------------------------------------------------------

class FParams : public ::google::protobuf::Message {
 public:
  FParams();
  virtual ~FParams();

  FParams(const FParams& from);

  inline FParams& operator=(const FParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FParams& default_instance();

  void Swap(FParams* other);

  // implements Message ----------------------------------------------

  FParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FParams& from);
  void MergeFrom(const FParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .task_manager.LPFilter_params LPF = 2;
  inline bool has_lpf() const;
  inline void clear_lpf();
  static const int kLPFFieldNumber = 2;
  inline const ::task_manager::LPFilter_params& lpf() const;
  inline ::task_manager::LPFilter_params* mutable_lpf();
  inline ::task_manager::LPFilter_params* release_lpf();
  inline void set_allocated_lpf(::task_manager::LPFilter_params* lpf);

  // optional .task_manager.BPFilter_params BPF = 3;
  inline bool has_bpf() const;
  inline void clear_bpf();
  static const int kBPFFieldNumber = 3;
  inline const ::task_manager::BPFilter_params& bpf() const;
  inline ::task_manager::BPFilter_params* mutable_bpf();
  inline ::task_manager::BPFilter_params* release_bpf();
  inline void set_allocated_bpf(::task_manager::BPFilter_params* bpf);

  // optional .task_manager.RSMPFilter_params RSMPF = 4;
  inline bool has_rsmpf() const;
  inline void clear_rsmpf();
  static const int kRSMPFFieldNumber = 4;
  inline const ::task_manager::RSMPFilter_params& rsmpf() const;
  inline ::task_manager::RSMPFilter_params* mutable_rsmpf();
  inline ::task_manager::RSMPFilter_params* release_rsmpf();
  inline void set_allocated_rsmpf(::task_manager::RSMPFilter_params* rsmpf);

  // optional .task_manager.HPFilter_params HPF = 5;
  inline bool has_hpf() const;
  inline void clear_hpf();
  static const int kHPFFieldNumber = 5;
  inline const ::task_manager::HPFilter_params& hpf() const;
  inline ::task_manager::HPFilter_params* mutable_hpf();
  inline ::task_manager::HPFilter_params* release_hpf();
  inline void set_allocated_hpf(::task_manager::HPFilter_params* hpf);

  // optional .task_manager.SPFilter_params SPF = 6;
  inline bool has_spf() const;
  inline void clear_spf();
  static const int kSPFFieldNumber = 6;
  inline const ::task_manager::SPFilter_params& spf() const;
  inline ::task_manager::SPFilter_params* mutable_spf();
  inline ::task_manager::SPFilter_params* release_spf();
  inline void set_allocated_spf(::task_manager::SPFilter_params* spf);

  // optional .task_manager.INTGFilter_params INTGF = 7;
  inline bool has_intgf() const;
  inline void clear_intgf();
  static const int kINTGFFieldNumber = 7;
  inline const ::task_manager::INTGFilter_params& intgf() const;
  inline ::task_manager::INTGFilter_params* mutable_intgf();
  inline ::task_manager::INTGFilter_params* release_intgf();
  inline void set_allocated_intgf(::task_manager::INTGFilter_params* intgf);

  // @@protoc_insertion_point(class_scope:task_manager.FParams)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lpf();
  inline void clear_has_lpf();
  inline void set_has_bpf();
  inline void clear_has_bpf();
  inline void set_has_rsmpf();
  inline void clear_has_rsmpf();
  inline void set_has_hpf();
  inline void clear_has_hpf();
  inline void set_has_spf();
  inline void clear_has_spf();
  inline void set_has_intgf();
  inline void clear_has_intgf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::LPFilter_params* lpf_;
  ::task_manager::BPFilter_params* bpf_;
  ::task_manager::RSMPFilter_params* rsmpf_;
  ::task_manager::HPFilter_params* hpf_;
  ::task_manager::SPFilter_params* spf_;
  ::task_manager::INTGFilter_params* intgf_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static FParams* default_instance_;
};
// -------------------------------------------------------------------

class TStatRot : public ::google::protobuf::Message {
 public:
  TStatRot();
  virtual ~TStatRot();

  TStatRot(const TStatRot& from);

  inline TStatRot& operator=(const TStatRot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TStatRot& default_instance();

  void Swap(TStatRot* other);

  // implements Message ----------------------------------------------

  TStatRot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TStatRot& from);
  void MergeFrom(const TStatRot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 AvgCnt = 1;
  inline bool has_avgcnt() const;
  inline void clear_avgcnt();
  static const int kAvgCntFieldNumber = 1;
  inline ::google::protobuf::int32 avgcnt() const;
  inline void set_avgcnt(::google::protobuf::int32 value);

  // required double Avg = 2;
  inline bool has_avg() const;
  inline void clear_avg();
  static const int kAvgFieldNumber = 2;
  inline double avg() const;
  inline void set_avg(double value);

  // required double Min = 3;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline double min() const;
  inline void set_min(double value);

  // required double Max = 4;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline double max() const;
  inline void set_max(double value);

  // @@protoc_insertion_point(class_scope:task_manager.TStatRot)
 private:
  inline void set_has_avgcnt();
  inline void clear_has_avgcnt();
  inline void set_has_avg();
  inline void clear_has_avg();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double avg_;
  double min_;
  double max_;
  ::google::protobuf::int32 avgcnt_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static TStatRot* default_instance_;
};
// -------------------------------------------------------------------

class TOffset : public ::google::protobuf::Message {
 public:
  TOffset();
  virtual ~TOffset();

  TOffset(const TOffset& from);

  inline TOffset& operator=(const TOffset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOffset& default_instance();

  void Swap(TOffset* other);

  // implements Message ----------------------------------------------

  TOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOffset& from);
  void MergeFrom(const TOffset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int64 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:task_manager.TOffset)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static TOffset* default_instance_;
};
// -------------------------------------------------------------------

class TFrotLimits : public ::google::protobuf::Message {
 public:
  TFrotLimits();
  virtual ~TFrotLimits();

  TFrotLimits(const TFrotLimits& from);

  inline TFrotLimits& operator=(const TFrotLimits& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFrotLimits& default_instance();

  void Swap(TFrotLimits* other);

  // implements Message ----------------------------------------------

  TFrotLimits* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFrotLimits& from);
  void MergeFrom(const TFrotLimits& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double Frot_min = 1;
  inline bool has_frot_min() const;
  inline void clear_frot_min();
  static const int kFrotMinFieldNumber = 1;
  inline double frot_min() const;
  inline void set_frot_min(double value);

  // required double Frot_max = 2;
  inline bool has_frot_max() const;
  inline void clear_frot_max();
  static const int kFrotMaxFieldNumber = 2;
  inline double frot_max() const;
  inline void set_frot_max(double value);

  // required double DeltaFrotOneMeas = 3;
  inline bool has_deltafrotonemeas() const;
  inline void clear_deltafrotonemeas();
  static const int kDeltaFrotOneMeasFieldNumber = 3;
  inline double deltafrotonemeas() const;
  inline void set_deltafrotonemeas(double value);

  // required double DeltaFrotAllMeas = 4;
  inline bool has_deltafrotallmeas() const;
  inline void clear_deltafrotallmeas();
  static const int kDeltaFrotAllMeasFieldNumber = 4;
  inline double deltafrotallmeas() const;
  inline void set_deltafrotallmeas(double value);

  // @@protoc_insertion_point(class_scope:task_manager.TFrotLimits)
 private:
  inline void set_has_frot_min();
  inline void clear_has_frot_min();
  inline void set_has_frot_max();
  inline void clear_has_frot_max();
  inline void set_has_deltafrotonemeas();
  inline void clear_has_deltafrotonemeas();
  inline void set_has_deltafrotallmeas();
  inline void clear_has_deltafrotallmeas();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double frot_min_;
  double frot_max_;
  double deltafrotonemeas_;
  double deltafrotallmeas_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static TFrotLimits* default_instance_;
};
// -------------------------------------------------------------------

class RBitem : public ::google::protobuf::Message {
 public:
  RBitem();
  virtual ~RBitem();

  RBitem(const RBitem& from);

  inline RBitem& operator=(const RBitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RBitem& default_instance();

  void Swap(RBitem* other);

  // implements Message ----------------------------------------------

  RBitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RBitem& from);
  void MergeFrom(const RBitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double ValueY = 1;
  inline bool has_valuey() const;
  inline void clear_valuey();
  static const int kValueYFieldNumber = 1;
  inline double valuey() const;
  inline void set_valuey(double value);

  // required double ValueX = 2;
  inline bool has_valuex() const;
  inline void clear_valuex();
  static const int kValueXFieldNumber = 2;
  inline double valuex() const;
  inline void set_valuex(double value);

  // required bool ValidExtern = 3;
  inline bool has_validextern() const;
  inline void clear_validextern();
  static const int kValidExternFieldNumber = 3;
  inline bool validextern() const;
  inline void set_validextern(bool value);

  // required bool Valid = 4;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 4;
  inline bool valid() const;
  inline void set_valid(bool value);

  // required bool ValidRough = 5;
  inline bool has_validrough() const;
  inline void clear_validrough();
  static const int kValidRoughFieldNumber = 5;
  inline bool validrough() const;
  inline void set_validrough(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.RBitem)
 private:
  inline void set_has_valuey();
  inline void clear_has_valuey();
  inline void set_has_valuex();
  inline void clear_has_valuex();
  inline void set_has_validextern();
  inline void clear_has_validextern();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_validrough();
  inline void clear_has_validrough();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double valuey_;
  double valuex_;
  bool validextern_;
  bool valid_;
  bool validrough_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static RBitem* default_instance_;
};
// -------------------------------------------------------------------

class Vharmonic_data : public ::google::protobuf::Message {
 public:
  Vharmonic_data();
  virtual ~Vharmonic_data();

  Vharmonic_data(const Vharmonic_data& from);

  inline Vharmonic_data& operator=(const Vharmonic_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vharmonic_data& default_instance();

  void Swap(Vharmonic_data* other);

  // implements Message ----------------------------------------------

  Vharmonic_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vharmonic_data& from);
  void MergeFrom(const Vharmonic_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double amp = 1;
  inline bool has_amp() const;
  inline void clear_amp();
  static const int kAmpFieldNumber = 1;
  inline double amp() const;
  inline void set_amp(double value);

  // required double ph = 2;
  inline bool has_ph() const;
  inline void clear_ph();
  static const int kPhFieldNumber = 2;
  inline double ph() const;
  inline void set_ph(double value);

  // required double freq = 3;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 3;
  inline double freq() const;
  inline void set_freq(double value);

  // required .task_manager.TStatRot StatRot = 4;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 4;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 5;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 5;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.Vharmonic_data)
 private:
  inline void set_has_amp();
  inline void clear_has_amp();
  inline void set_has_ph();
  inline void clear_has_ph();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double amp_;
  double ph_;
  double freq_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static Vharmonic_data* default_instance_;
};
// -------------------------------------------------------------------

class StatKurtosis_data : public ::google::protobuf::Message {
 public:
  StatKurtosis_data();
  virtual ~StatKurtosis_data();

  StatKurtosis_data(const StatKurtosis_data& from);

  inline StatKurtosis_data& operator=(const StatKurtosis_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatKurtosis_data& default_instance();

  void Swap(StatKurtosis_data* other);

  // implements Message ----------------------------------------------

  StatKurtosis_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatKurtosis_data& from);
  void MergeFrom(const StatKurtosis_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline double min() const;
  inline void set_min(double value);

  // required double max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline double max() const;
  inline void set_max(double value);

  // required double mean = 3;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 3;
  inline double mean() const;
  inline void set_mean(double value);

  // required double std = 4;
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 4;
  inline double std() const;
  inline void set_std(double value);

  // required double kurtosis = 5;
  inline bool has_kurtosis() const;
  inline void clear_kurtosis();
  static const int kKurtosisFieldNumber = 5;
  inline double kurtosis() const;
  inline void set_kurtosis(double value);

  // required double peak_factor = 6;
  inline bool has_peak_factor() const;
  inline void clear_peak_factor();
  static const int kPeakFactorFieldNumber = 6;
  inline double peak_factor() const;
  inline void set_peak_factor(double value);

  // required .task_manager.TStatRot StatRot = 7;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 7;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 8;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 8;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.StatKurtosis_data)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_kurtosis();
  inline void clear_has_kurtosis();
  inline void set_has_peak_factor();
  inline void clear_has_peak_factor();
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double min_;
  double max_;
  double mean_;
  double std_;
  double kurtosis_;
  double peak_factor_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static StatKurtosis_data* default_instance_;
};
// -------------------------------------------------------------------

class StatTimeSig_data : public ::google::protobuf::Message {
 public:
  StatTimeSig_data();
  virtual ~StatTimeSig_data();

  StatTimeSig_data(const StatTimeSig_data& from);

  inline StatTimeSig_data& operator=(const StatTimeSig_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatTimeSig_data& default_instance();

  void Swap(StatTimeSig_data* other);

  // implements Message ----------------------------------------------

  StatTimeSig_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatTimeSig_data& from);
  void MergeFrom(const StatTimeSig_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline double min() const;
  inline void set_min(double value);

  // required double max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline double max() const;
  inline void set_max(double value);

  // required double mean = 3;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 3;
  inline double mean() const;
  inline void set_mean(double value);

  // required double std = 4;
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 4;
  inline double std() const;
  inline void set_std(double value);

  // required double kurtosis = 5;
  inline bool has_kurtosis() const;
  inline void clear_kurtosis();
  static const int kKurtosisFieldNumber = 5;
  inline double kurtosis() const;
  inline void set_kurtosis(double value);

  // required double peak_factor = 6;
  inline bool has_peak_factor() const;
  inline void clear_peak_factor();
  static const int kPeakFactorFieldNumber = 6;
  inline double peak_factor() const;
  inline void set_peak_factor(double value);

  // required .task_manager.TStatRot StatRot = 7;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 7;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 8;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 8;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.StatTimeSig_data)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_kurtosis();
  inline void clear_has_kurtosis();
  inline void set_has_peak_factor();
  inline void clear_has_peak_factor();
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double min_;
  double max_;
  double mean_;
  double std_;
  double kurtosis_;
  double peak_factor_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static StatTimeSig_data* default_instance_;
};
// -------------------------------------------------------------------

class QualityTimeSig_data : public ::google::protobuf::Message {
 public:
  QualityTimeSig_data();
  virtual ~QualityTimeSig_data();

  QualityTimeSig_data(const QualityTimeSig_data& from);

  inline QualityTimeSig_data& operator=(const QualityTimeSig_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QualityTimeSig_data& default_instance();

  void Swap(QualityTimeSig_data* other);

  // implements Message ----------------------------------------------

  QualityTimeSig_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QualityTimeSig_data& from);
  void MergeFrom(const QualityTimeSig_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool SigOverFlow = 1;
  inline bool has_sigoverflow() const;
  inline void clear_sigoverflow();
  static const int kSigOverFlowFieldNumber = 1;
  inline bool sigoverflow() const;
  inline void set_sigoverflow(bool value);

  // required bool SigTooLow = 2;
  inline bool has_sigtoolow() const;
  inline void clear_sigtoolow();
  static const int kSigTooLowFieldNumber = 2;
  inline bool sigtoolow() const;
  inline void set_sigtoolow(bool value);

  // required bool SigTooHigh = 3;
  inline bool has_sigtoohigh() const;
  inline void clear_sigtoohigh();
  static const int kSigTooHighFieldNumber = 3;
  inline bool sigtoohigh() const;
  inline void set_sigtoohigh(bool value);

  // required double AmpPeakToPeakCalc = 4;
  inline bool has_amppeaktopeakcalc() const;
  inline void clear_amppeaktopeakcalc();
  static const int kAmpPeakToPeakCalcFieldNumber = 4;
  inline double amppeaktopeakcalc() const;
  inline void set_amppeaktopeakcalc(double value);

  // required double AmpStdCalc = 5;
  inline bool has_ampstdcalc() const;
  inline void clear_ampstdcalc();
  static const int kAmpStdCalcFieldNumber = 5;
  inline double ampstdcalc() const;
  inline void set_ampstdcalc(double value);

  // required int32 SigOverFlowCount = 6;
  inline bool has_sigoverflowcount() const;
  inline void clear_sigoverflowcount();
  static const int kSigOverFlowCountFieldNumber = 6;
  inline ::google::protobuf::int32 sigoverflowcount() const;
  inline void set_sigoverflowcount(::google::protobuf::int32 value);

  // required .task_manager.TStatRot StatRot = 7;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 7;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 8;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 8;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.QualityTimeSig_data)
 private:
  inline void set_has_sigoverflow();
  inline void clear_has_sigoverflow();
  inline void set_has_sigtoolow();
  inline void clear_has_sigtoolow();
  inline void set_has_sigtoohigh();
  inline void clear_has_sigtoohigh();
  inline void set_has_amppeaktopeakcalc();
  inline void clear_has_amppeaktopeakcalc();
  inline void set_has_ampstdcalc();
  inline void clear_has_ampstdcalc();
  inline void set_has_sigoverflowcount();
  inline void clear_has_sigoverflowcount();
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool sigoverflow_;
  bool sigtoolow_;
  bool sigtoohigh_;
  ::google::protobuf::int32 sigoverflowcount_;
  double amppeaktopeakcalc_;
  double ampstdcalc_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static QualityTimeSig_data* default_instance_;
};
// -------------------------------------------------------------------

class SaveTimeSig_data : public ::google::protobuf::Message {
 public:
  SaveTimeSig_data();
  virtual ~SaveTimeSig_data();

  SaveTimeSig_data(const SaveTimeSig_data& from);

  inline SaveTimeSig_data& operator=(const SaveTimeSig_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveTimeSig_data& default_instance();

  void Swap(SaveTimeSig_data* other);

  // implements Message ----------------------------------------------

  SaveTimeSig_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveTimeSig_data& from);
  void MergeFrom(const SaveTimeSig_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.TStatRot StatRot = 1;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 1;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 2;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 2;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.SaveTimeSig_data)
 private:
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static SaveTimeSig_data* default_instance_;
};
// -------------------------------------------------------------------

class VsensorFrot_data : public ::google::protobuf::Message {
 public:
  VsensorFrot_data();
  virtual ~VsensorFrot_data();

  VsensorFrot_data(const VsensorFrot_data& from);

  inline VsensorFrot_data& operator=(const VsensorFrot_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VsensorFrot_data& default_instance();

  void Swap(VsensorFrot_data* other);

  // implements Message ----------------------------------------------

  VsensorFrot_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VsensorFrot_data& from);
  void MergeFrom(const VsensorFrot_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.RBitem Frot = 1;
  inline bool has_frot() const;
  inline void clear_frot();
  static const int kFrotFieldNumber = 1;
  inline const ::task_manager::RBitem& frot() const;
  inline ::task_manager::RBitem* mutable_frot();
  inline ::task_manager::RBitem* release_frot();
  inline void set_allocated_frot(::task_manager::RBitem* frot);

  // required .task_manager.TStatRot StatRot = 2;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 2;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 3;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 3;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.VsensorFrot_data)
 private:
  inline void set_has_frot();
  inline void clear_has_frot();
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::RBitem* frot_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static VsensorFrot_data* default_instance_;
};
// -------------------------------------------------------------------

class DecimTimeSig_data : public ::google::protobuf::Message {
 public:
  DecimTimeSig_data();
  virtual ~DecimTimeSig_data();

  DecimTimeSig_data(const DecimTimeSig_data& from);

  inline DecimTimeSig_data& operator=(const DecimTimeSig_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecimTimeSig_data& default_instance();

  void Swap(DecimTimeSig_data* other);

  // implements Message ----------------------------------------------

  DecimTimeSig_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecimTimeSig_data& from);
  void MergeFrom(const DecimTimeSig_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.TStatRot StatRot = 1;
  inline bool has_statrot() const;
  inline void clear_statrot();
  static const int kStatRotFieldNumber = 1;
  inline const ::task_manager::TStatRot& statrot() const;
  inline ::task_manager::TStatRot* mutable_statrot();
  inline ::task_manager::TStatRot* release_statrot();
  inline void set_allocated_statrot(::task_manager::TStatRot* statrot);

  // required uint32 AvgCount = 2;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 2;
  inline ::google::protobuf::uint32 avgcount() const;
  inline void set_avgcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.DecimTimeSig_data)
 private:
  inline void set_has_statrot();
  inline void clear_has_statrot();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::TStatRot* statrot_;
  ::google::protobuf::uint32 avgcount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DecimTimeSig_data* default_instance_;
};
// -------------------------------------------------------------------

class AnyTaskResult : public ::google::protobuf::Message {
 public:
  AnyTaskResult();
  virtual ~AnyTaskResult();

  AnyTaskResult(const AnyTaskResult& from);

  inline AnyTaskResult& operator=(const AnyTaskResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyTaskResult& default_instance();

  void Swap(AnyTaskResult* other);

  // implements Message ----------------------------------------------

  AnyTaskResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnyTaskResult& from);
  void MergeFrom(const AnyTaskResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional .task_manager.Vharmonic_data harmonic_res = 2;
  inline bool has_harmonic_res() const;
  inline void clear_harmonic_res();
  static const int kHarmonicResFieldNumber = 2;
  inline const ::task_manager::Vharmonic_data& harmonic_res() const;
  inline ::task_manager::Vharmonic_data* mutable_harmonic_res();
  inline ::task_manager::Vharmonic_data* release_harmonic_res();
  inline void set_allocated_harmonic_res(::task_manager::Vharmonic_data* harmonic_res);

  // optional .task_manager.StatKurtosis_data kurtosis_res = 3;
  inline bool has_kurtosis_res() const;
  inline void clear_kurtosis_res();
  static const int kKurtosisResFieldNumber = 3;
  inline const ::task_manager::StatKurtosis_data& kurtosis_res() const;
  inline ::task_manager::StatKurtosis_data* mutable_kurtosis_res();
  inline ::task_manager::StatKurtosis_data* release_kurtosis_res();
  inline void set_allocated_kurtosis_res(::task_manager::StatKurtosis_data* kurtosis_res);

  // optional .task_manager.StatTimeSig_data stattimesig_res = 4;
  inline bool has_stattimesig_res() const;
  inline void clear_stattimesig_res();
  static const int kStattimesigResFieldNumber = 4;
  inline const ::task_manager::StatTimeSig_data& stattimesig_res() const;
  inline ::task_manager::StatTimeSig_data* mutable_stattimesig_res();
  inline ::task_manager::StatTimeSig_data* release_stattimesig_res();
  inline void set_allocated_stattimesig_res(::task_manager::StatTimeSig_data* stattimesig_res);

  // optional .task_manager.QualityTimeSig_data quality_res = 5;
  inline bool has_quality_res() const;
  inline void clear_quality_res();
  static const int kQualityResFieldNumber = 5;
  inline const ::task_manager::QualityTimeSig_data& quality_res() const;
  inline ::task_manager::QualityTimeSig_data* mutable_quality_res();
  inline ::task_manager::QualityTimeSig_data* release_quality_res();
  inline void set_allocated_quality_res(::task_manager::QualityTimeSig_data* quality_res);

  // optional .task_manager.SaveTimeSig_data savetimesig_res = 6;
  inline bool has_savetimesig_res() const;
  inline void clear_savetimesig_res();
  static const int kSavetimesigResFieldNumber = 6;
  inline const ::task_manager::SaveTimeSig_data& savetimesig_res() const;
  inline ::task_manager::SaveTimeSig_data* mutable_savetimesig_res();
  inline ::task_manager::SaveTimeSig_data* release_savetimesig_res();
  inline void set_allocated_savetimesig_res(::task_manager::SaveTimeSig_data* savetimesig_res);

  // optional .task_manager.VsensorFrot_data vsensorfrot_res = 7;
  inline bool has_vsensorfrot_res() const;
  inline void clear_vsensorfrot_res();
  static const int kVsensorfrotResFieldNumber = 7;
  inline const ::task_manager::VsensorFrot_data& vsensorfrot_res() const;
  inline ::task_manager::VsensorFrot_data* mutable_vsensorfrot_res();
  inline ::task_manager::VsensorFrot_data* release_vsensorfrot_res();
  inline void set_allocated_vsensorfrot_res(::task_manager::VsensorFrot_data* vsensorfrot_res);

  // optional .task_manager.DecimTimeSig_data decim_res = 8;
  inline bool has_decim_res() const;
  inline void clear_decim_res();
  static const int kDecimResFieldNumber = 8;
  inline const ::task_manager::DecimTimeSig_data& decim_res() const;
  inline ::task_manager::DecimTimeSig_data* mutable_decim_res();
  inline ::task_manager::DecimTimeSig_data* release_decim_res();
  inline void set_allocated_decim_res(::task_manager::DecimTimeSig_data* decim_res);

  // @@protoc_insertion_point(class_scope:task_manager.AnyTaskResult)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_harmonic_res();
  inline void clear_has_harmonic_res();
  inline void set_has_kurtosis_res();
  inline void clear_has_kurtosis_res();
  inline void set_has_stattimesig_res();
  inline void clear_has_stattimesig_res();
  inline void set_has_quality_res();
  inline void clear_has_quality_res();
  inline void set_has_savetimesig_res();
  inline void clear_has_savetimesig_res();
  inline void set_has_vsensorfrot_res();
  inline void clear_has_vsensorfrot_res();
  inline void set_has_decim_res();
  inline void clear_has_decim_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::Vharmonic_data* harmonic_res_;
  ::task_manager::StatKurtosis_data* kurtosis_res_;
  ::task_manager::StatTimeSig_data* stattimesig_res_;
  ::task_manager::QualityTimeSig_data* quality_res_;
  ::task_manager::SaveTimeSig_data* savetimesig_res_;
  ::task_manager::VsensorFrot_data* vsensorfrot_res_;
  ::task_manager::DecimTimeSig_data* decim_res_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static AnyTaskResult* default_instance_;
};
// -------------------------------------------------------------------

class CommonTaskParams : public ::google::protobuf::Message {
 public:
  CommonTaskParams();
  virtual ~CommonTaskParams();

  CommonTaskParams(const CommonTaskParams& from);

  inline CommonTaskParams& operator=(const CommonTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonTaskParams& default_instance();

  void Swap(CommonTaskParams* other);

  // implements Message ----------------------------------------------

  CommonTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonTaskParams& from);
  void MergeFrom(const CommonTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.TOffset OffSet = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffSetFieldNumber = 1;
  inline const ::task_manager::TOffset& offset() const;
  inline ::task_manager::TOffset* mutable_offset();
  inline ::task_manager::TOffset* release_offset();
  inline void set_allocated_offset(::task_manager::TOffset* offset);

  // required .task_manager.TOffset DeltaOffSet = 2;
  inline bool has_deltaoffset() const;
  inline void clear_deltaoffset();
  static const int kDeltaOffSetFieldNumber = 2;
  inline const ::task_manager::TOffset& deltaoffset() const;
  inline ::task_manager::TOffset* mutable_deltaoffset();
  inline ::task_manager::TOffset* release_deltaoffset();
  inline void set_allocated_deltaoffset(::task_manager::TOffset* deltaoffset);

  // required bool Monitoring = 3;
  inline bool has_monitoring() const;
  inline void clear_monitoring();
  static const int kMonitoringFieldNumber = 3;
  inline bool monitoring() const;
  inline void set_monitoring(bool value);

  // required int32 TimesigType = 4;
  inline bool has_timesigtype() const;
  inline void clear_timesigtype();
  static const int kTimesigTypeFieldNumber = 4;
  inline ::google::protobuf::int32 timesigtype() const;
  inline void set_timesigtype(::google::protobuf::int32 value);

  // required int32 LPFilterIndex = 5;
  inline bool has_lpfilterindex() const;
  inline void clear_lpfilterindex();
  static const int kLPFilterIndexFieldNumber = 5;
  inline ::google::protobuf::int32 lpfilterindex() const;
  inline void set_lpfilterindex(::google::protobuf::int32 value);

  // required uint32 LPFilterDecim = 6;
  inline bool has_lpfilterdecim() const;
  inline void clear_lpfilterdecim();
  static const int kLPFilterDecimFieldNumber = 6;
  inline ::google::protobuf::uint32 lpfilterdecim() const;
  inline void set_lpfilterdecim(::google::protobuf::uint32 value);

  // required int32 LPFilterType = 7;
  inline bool has_lpfiltertype() const;
  inline void clear_lpfiltertype();
  static const int kLPFilterTypeFieldNumber = 7;
  inline ::google::protobuf::int32 lpfiltertype() const;
  inline void set_lpfiltertype(::google::protobuf::int32 value);

  // required bool LPFilterUsualW = 8;
  inline bool has_lpfilterusualw() const;
  inline void clear_lpfilterusualw();
  static const int kLPFilterUsualWFieldNumber = 8;
  inline bool lpfilterusualw() const;
  inline void set_lpfilterusualw(bool value);

  // required int32 BPFilterIndex = 9;
  inline bool has_bpfilterindex() const;
  inline void clear_bpfilterindex();
  static const int kBPFilterIndexFieldNumber = 9;
  inline ::google::protobuf::int32 bpfilterindex() const;
  inline void set_bpfilterindex(::google::protobuf::int32 value);

  // required int32 BPFilterType = 10;
  inline bool has_bpfiltertype() const;
  inline void clear_bpfiltertype();
  static const int kBPFilterTypeFieldNumber = 10;
  inline ::google::protobuf::int32 bpfiltertype() const;
  inline void set_bpfiltertype(::google::protobuf::int32 value);

  // required bool BPFilterUsualW = 11;
  inline bool has_bpfilterusualw() const;
  inline void clear_bpfilterusualw();
  static const int kBPFilterUsualWFieldNumber = 11;
  inline bool bpfilterusualw() const;
  inline void set_bpfilterusualw(bool value);

  // required int32 RSMPFilterIndex = 12;
  inline bool has_rsmpfilterindex() const;
  inline void clear_rsmpfilterindex();
  static const int kRSMPFilterIndexFieldNumber = 12;
  inline ::google::protobuf::int32 rsmpfilterindex() const;
  inline void set_rsmpfilterindex(::google::protobuf::int32 value);

  // required int32 RSMPFilterType = 13;
  inline bool has_rsmpfiltertype() const;
  inline void clear_rsmpfiltertype();
  static const int kRSMPFilterTypeFieldNumber = 13;
  inline ::google::protobuf::int32 rsmpfiltertype() const;
  inline void set_rsmpfiltertype(::google::protobuf::int32 value);

  // required bool RSMPFilterUsualW = 14;
  inline bool has_rsmpfilterusualw() const;
  inline void clear_rsmpfilterusualw();
  static const int kRSMPFilterUsualWFieldNumber = 14;
  inline bool rsmpfilterusualw() const;
  inline void set_rsmpfilterusualw(bool value);

  // required int32 HPFilterIndex = 15;
  inline bool has_hpfilterindex() const;
  inline void clear_hpfilterindex();
  static const int kHPFilterIndexFieldNumber = 15;
  inline ::google::protobuf::int32 hpfilterindex() const;
  inline void set_hpfilterindex(::google::protobuf::int32 value);

  // required int32 HPFilterType = 16;
  inline bool has_hpfiltertype() const;
  inline void clear_hpfiltertype();
  static const int kHPFilterTypeFieldNumber = 16;
  inline ::google::protobuf::int32 hpfiltertype() const;
  inline void set_hpfiltertype(::google::protobuf::int32 value);

  // required double HPFilterParam1 = 17;
  inline bool has_hpfilterparam1() const;
  inline void clear_hpfilterparam1();
  static const int kHPFilterParam1FieldNumber = 17;
  inline double hpfilterparam1() const;
  inline void set_hpfilterparam1(double value);

  // repeated .task_manager.FParams FParamsList = 18;
  inline int fparamslist_size() const;
  inline void clear_fparamslist();
  static const int kFParamsListFieldNumber = 18;
  inline const ::task_manager::FParams& fparamslist(int index) const;
  inline ::task_manager::FParams* mutable_fparamslist(int index);
  inline ::task_manager::FParams* add_fparamslist();
  inline const ::google::protobuf::RepeatedPtrField< ::task_manager::FParams >&
      fparamslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::task_manager::FParams >*
      mutable_fparamslist();

  // required int32 FParamsCount = 19;
  inline bool has_fparamscount() const;
  inline void clear_fparamscount();
  static const int kFParamsCountFieldNumber = 19;
  inline ::google::protobuf::int32 fparamscount() const;
  inline void set_fparamscount(::google::protobuf::int32 value);

  // required int32 AvgCount = 20;
  inline bool has_avgcount() const;
  inline void clear_avgcount();
  static const int kAvgCountFieldNumber = 20;
  inline ::google::protobuf::int32 avgcount() const;
  inline void set_avgcount(::google::protobuf::int32 value);

  // required .task_manager.TFrotLimits FrotLimits = 21;
  inline bool has_frotlimits() const;
  inline void clear_frotlimits();
  static const int kFrotLimitsFieldNumber = 21;
  inline const ::task_manager::TFrotLimits& frotlimits() const;
  inline ::task_manager::TFrotLimits* mutable_frotlimits();
  inline ::task_manager::TFrotLimits* release_frotlimits();
  inline void set_allocated_frotlimits(::task_manager::TFrotLimits* frotlimits);

  // required bool FrotLimitsActive = 22;
  inline bool has_frotlimitsactive() const;
  inline void clear_frotlimitsactive();
  static const int kFrotLimitsActiveFieldNumber = 22;
  inline bool frotlimitsactive() const;
  inline void set_frotlimitsactive(bool value);

  // required bool StabControl = 23;
  inline bool has_stabcontrol() const;
  inline void clear_stabcontrol();
  static const int kStabControlFieldNumber = 23;
  inline bool stabcontrol() const;
  inline void set_stabcontrol(bool value);

  // required bool RotControl = 24;
  inline bool has_rotcontrol() const;
  inline void clear_rotcontrol();
  static const int kRotControlFieldNumber = 24;
  inline bool rotcontrol() const;
  inline void set_rotcontrol(bool value);

  // required double WaitPeriodForRotMetka = 25;
  inline bool has_waitperiodforrotmetka() const;
  inline void clear_waitperiodforrotmetka();
  static const int kWaitPeriodForRotMetkaFieldNumber = 25;
  inline double waitperiodforrotmetka() const;
  inline void set_waitperiodforrotmetka(double value);

  // required int32 TimeSigSrcType = 26;
  inline bool has_timesigsrctype() const;
  inline void clear_timesigsrctype();
  static const int kTimeSigSrcTypeFieldNumber = 26;
  inline ::google::protobuf::int32 timesigsrctype() const;
  inline void set_timesigsrctype(::google::protobuf::int32 value);

  // required int32 TimeSigID = 27;
  inline bool has_timesigid() const;
  inline void clear_timesigid();
  static const int kTimeSigIDFieldNumber = 27;
  inline ::google::protobuf::int32 timesigid() const;
  inline void set_timesigid(::google::protobuf::int32 value);

  // required int32 InitTaskState = 28;
  inline bool has_inittaskstate() const;
  inline void clear_inittaskstate();
  static const int kInitTaskStateFieldNumber = 28;
  inline ::google::protobuf::int32 inittaskstate() const;
  inline void set_inittaskstate(::google::protobuf::int32 value);

  // required int32 FinalTaskState = 29;
  inline bool has_finaltaskstate() const;
  inline void clear_finaltaskstate();
  static const int kFinalTaskStateFieldNumber = 29;
  inline ::google::protobuf::int32 finaltaskstate() const;
  inline void set_finaltaskstate(::google::protobuf::int32 value);

  // required int32 TSDTC = 30;
  inline bool has_tsdtc() const;
  inline void clear_tsdtc();
  static const int kTSDTCFieldNumber = 30;
  inline ::google::protobuf::int32 tsdtc() const;
  inline void set_tsdtc(::google::protobuf::int32 value);

  // required int32 CalcTypeTSDTC = 31;
  inline bool has_calctypetsdtc() const;
  inline void clear_calctypetsdtc();
  static const int kCalcTypeTSDTCFieldNumber = 31;
  inline ::google::protobuf::int32 calctypetsdtc() const;
  inline void set_calctypetsdtc(::google::protobuf::int32 value);

  // required int32 TDE = 32;
  inline bool has_tde() const;
  inline void clear_tde();
  static const int kTDEFieldNumber = 32;
  inline ::google::protobuf::int32 tde() const;
  inline void set_tde(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.CommonTaskParams)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_deltaoffset();
  inline void clear_has_deltaoffset();
  inline void set_has_monitoring();
  inline void clear_has_monitoring();
  inline void set_has_timesigtype();
  inline void clear_has_timesigtype();
  inline void set_has_lpfilterindex();
  inline void clear_has_lpfilterindex();
  inline void set_has_lpfilterdecim();
  inline void clear_has_lpfilterdecim();
  inline void set_has_lpfiltertype();
  inline void clear_has_lpfiltertype();
  inline void set_has_lpfilterusualw();
  inline void clear_has_lpfilterusualw();
  inline void set_has_bpfilterindex();
  inline void clear_has_bpfilterindex();
  inline void set_has_bpfiltertype();
  inline void clear_has_bpfiltertype();
  inline void set_has_bpfilterusualw();
  inline void clear_has_bpfilterusualw();
  inline void set_has_rsmpfilterindex();
  inline void clear_has_rsmpfilterindex();
  inline void set_has_rsmpfiltertype();
  inline void clear_has_rsmpfiltertype();
  inline void set_has_rsmpfilterusualw();
  inline void clear_has_rsmpfilterusualw();
  inline void set_has_hpfilterindex();
  inline void clear_has_hpfilterindex();
  inline void set_has_hpfiltertype();
  inline void clear_has_hpfiltertype();
  inline void set_has_hpfilterparam1();
  inline void clear_has_hpfilterparam1();
  inline void set_has_fparamscount();
  inline void clear_has_fparamscount();
  inline void set_has_avgcount();
  inline void clear_has_avgcount();
  inline void set_has_frotlimits();
  inline void clear_has_frotlimits();
  inline void set_has_frotlimitsactive();
  inline void clear_has_frotlimitsactive();
  inline void set_has_stabcontrol();
  inline void clear_has_stabcontrol();
  inline void set_has_rotcontrol();
  inline void clear_has_rotcontrol();
  inline void set_has_waitperiodforrotmetka();
  inline void clear_has_waitperiodforrotmetka();
  inline void set_has_timesigsrctype();
  inline void clear_has_timesigsrctype();
  inline void set_has_timesigid();
  inline void clear_has_timesigid();
  inline void set_has_inittaskstate();
  inline void clear_has_inittaskstate();
  inline void set_has_finaltaskstate();
  inline void clear_has_finaltaskstate();
  inline void set_has_tsdtc();
  inline void clear_has_tsdtc();
  inline void set_has_calctypetsdtc();
  inline void clear_has_calctypetsdtc();
  inline void set_has_tde();
  inline void clear_has_tde();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::TOffset* offset_;
  ::task_manager::TOffset* deltaoffset_;
  ::google::protobuf::int32 timesigtype_;
  ::google::protobuf::int32 lpfilterindex_;
  ::google::protobuf::uint32 lpfilterdecim_;
  ::google::protobuf::int32 lpfiltertype_;
  ::google::protobuf::int32 bpfilterindex_;
  bool monitoring_;
  bool lpfilterusualw_;
  bool bpfilterusualw_;
  bool rsmpfilterusualw_;
  ::google::protobuf::int32 bpfiltertype_;
  ::google::protobuf::int32 rsmpfilterindex_;
  ::google::protobuf::int32 rsmpfiltertype_;
  ::google::protobuf::int32 hpfilterindex_;
  double hpfilterparam1_;
  ::google::protobuf::int32 hpfiltertype_;
  ::google::protobuf::int32 fparamscount_;
  ::google::protobuf::RepeatedPtrField< ::task_manager::FParams > fparamslist_;
  ::task_manager::TFrotLimits* frotlimits_;
  ::google::protobuf::int32 avgcount_;
  bool frotlimitsactive_;
  bool stabcontrol_;
  bool rotcontrol_;
  double waitperiodforrotmetka_;
  ::google::protobuf::int32 timesigsrctype_;
  ::google::protobuf::int32 timesigid_;
  ::google::protobuf::int32 inittaskstate_;
  ::google::protobuf::int32 finaltaskstate_;
  ::google::protobuf::int32 tsdtc_;
  ::google::protobuf::int32 calctypetsdtc_;
  ::google::protobuf::int32 tde_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static CommonTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class SpectrTaskParams : public ::google::protobuf::Message {
 public:
  SpectrTaskParams();
  virtual ~SpectrTaskParams();

  SpectrTaskParams(const SpectrTaskParams& from);

  inline SpectrTaskParams& operator=(const SpectrTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectrTaskParams& default_instance();

  void Swap(SpectrTaskParams* other);

  // implements Message ----------------------------------------------

  SpectrTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpectrTaskParams& from);
  void MergeFrom(const SpectrTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required int32 SpectrClassCode = 2;
  inline bool has_spectrclasscode() const;
  inline void clear_spectrclasscode();
  static const int kSpectrClassCodeFieldNumber = 2;
  inline ::google::protobuf::int32 spectrclasscode() const;
  inline void set_spectrclasscode(::google::protobuf::int32 value);

  // required int32 SpectLinesArrIndex = 3;
  inline bool has_spectlinesarrindex() const;
  inline void clear_spectlinesarrindex();
  static const int kSpectLinesArrIndexFieldNumber = 3;
  inline ::google::protobuf::int32 spectlinesarrindex() const;
  inline void set_spectlinesarrindex(::google::protobuf::int32 value);

  // required uint32 SpectAmpUnit = 4;
  inline bool has_spectampunit() const;
  inline void clear_spectampunit();
  static const int kSpectAmpUnitFieldNumber = 4;
  inline ::google::protobuf::uint32 spectampunit() const;
  inline void set_spectampunit(::google::protobuf::uint32 value);

  // required bool RemoveAvgLine = 5;
  inline bool has_removeavgline() const;
  inline void clear_removeavgline();
  static const int kRemoveAvgLineFieldNumber = 5;
  inline bool removeavgline() const;
  inline void set_removeavgline(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.SpectrTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_spectrclasscode();
  inline void clear_has_spectrclasscode();
  inline void set_has_spectlinesarrindex();
  inline void clear_has_spectlinesarrindex();
  inline void set_has_spectampunit();
  inline void clear_has_spectampunit();
  inline void set_has_removeavgline();
  inline void clear_has_removeavgline();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  ::google::protobuf::int32 spectrclasscode_;
  ::google::protobuf::int32 spectlinesarrindex_;
  ::google::protobuf::uint32 spectampunit_;
  bool removeavgline_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static SpectrTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class VharmonicTaskParams : public ::google::protobuf::Message {
 public:
  VharmonicTaskParams();
  virtual ~VharmonicTaskParams();

  VharmonicTaskParams(const VharmonicTaskParams& from);

  inline VharmonicTaskParams& operator=(const VharmonicTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VharmonicTaskParams& default_instance();

  void Swap(VharmonicTaskParams* other);

  // implements Message ----------------------------------------------

  VharmonicTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VharmonicTaskParams& from);
  void MergeFrom(const VharmonicTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .task_manager.SpectrTaskParams STP = 1;
  inline bool has_stp() const;
  inline void clear_stp();
  static const int kSTPFieldNumber = 1;
  inline const ::task_manager::SpectrTaskParams& stp() const;
  inline ::task_manager::SpectrTaskParams* mutable_stp();
  inline ::task_manager::SpectrTaskParams* release_stp();
  inline void set_allocated_stp(::task_manager::SpectrTaskParams* stp);

  // required .task_manager.CommonTaskParams CMN = 2;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 2;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required int32 VHarmonicsCount = 3;
  inline bool has_vharmonicscount() const;
  inline void clear_vharmonicscount();
  static const int kVHarmonicsCountFieldNumber = 3;
  inline ::google::protobuf::int32 vharmonicscount() const;
  inline void set_vharmonicscount(::google::protobuf::int32 value);

  // optional int32 VHarmonicsAvgCount = 4;
  inline bool has_vharmonicsavgcount() const;
  inline void clear_vharmonicsavgcount();
  static const int kVHarmonicsAvgCountFieldNumber = 4;
  inline ::google::protobuf::int32 vharmonicsavgcount() const;
  inline void set_vharmonicsavgcount(::google::protobuf::int32 value);

  // required int32 SpectLinesArrIndex = 5;
  inline bool has_spectlinesarrindex() const;
  inline void clear_spectlinesarrindex();
  static const int kSpectLinesArrIndexFieldNumber = 5;
  inline ::google::protobuf::int32 spectlinesarrindex() const;
  inline void set_spectlinesarrindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.VharmonicTaskParams)
 private:
  inline void set_has_stp();
  inline void clear_has_stp();
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_vharmonicscount();
  inline void clear_has_vharmonicscount();
  inline void set_has_vharmonicsavgcount();
  inline void clear_has_vharmonicsavgcount();
  inline void set_has_spectlinesarrindex();
  inline void clear_has_spectlinesarrindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::SpectrTaskParams* stp_;
  ::task_manager::CommonTaskParams* cmn_;
  ::google::protobuf::int32 vharmonicscount_;
  ::google::protobuf::int32 vharmonicsavgcount_;
  ::google::protobuf::int32 spectlinesarrindex_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static VharmonicTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class StatKurtosisTaskParams : public ::google::protobuf::Message {
 public:
  StatKurtosisTaskParams();
  virtual ~StatKurtosisTaskParams();

  StatKurtosisTaskParams(const StatKurtosisTaskParams& from);

  inline StatKurtosisTaskParams& operator=(const StatKurtosisTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatKurtosisTaskParams& default_instance();

  void Swap(StatKurtosisTaskParams* other);

  // implements Message ----------------------------------------------

  StatKurtosisTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatKurtosisTaskParams& from);
  void MergeFrom(const StatKurtosisTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required int32 OneMeasTimeSigLength = 2;
  inline bool has_onemeastimesiglength() const;
  inline void clear_onemeastimesiglength();
  static const int kOneMeasTimeSigLengthFieldNumber = 2;
  inline ::google::protobuf::int32 onemeastimesiglength() const;
  inline void set_onemeastimesiglength(::google::protobuf::int32 value);

  // required int32 MeasCount = 3;
  inline bool has_meascount() const;
  inline void clear_meascount();
  static const int kMeasCountFieldNumber = 3;
  inline ::google::protobuf::int32 meascount() const;
  inline void set_meascount(::google::protobuf::int32 value);

  // required double CoefCover = 4;
  inline bool has_coefcover() const;
  inline void clear_coefcover();
  static const int kCoefCoverFieldNumber = 4;
  inline double coefcover() const;
  inline void set_coefcover(double value);

  // @@protoc_insertion_point(class_scope:task_manager.StatKurtosisTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_onemeastimesiglength();
  inline void clear_has_onemeastimesiglength();
  inline void set_has_meascount();
  inline void clear_has_meascount();
  inline void set_has_coefcover();
  inline void clear_has_coefcover();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  ::google::protobuf::int32 onemeastimesiglength_;
  ::google::protobuf::int32 meascount_;
  double coefcover_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static StatKurtosisTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class StatTimeSigTaskParams : public ::google::protobuf::Message {
 public:
  StatTimeSigTaskParams();
  virtual ~StatTimeSigTaskParams();

  StatTimeSigTaskParams(const StatTimeSigTaskParams& from);

  inline StatTimeSigTaskParams& operator=(const StatTimeSigTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatTimeSigTaskParams& default_instance();

  void Swap(StatTimeSigTaskParams* other);

  // implements Message ----------------------------------------------

  StatTimeSigTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatTimeSigTaskParams& from);
  void MergeFrom(const StatTimeSigTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required int32 OneMeasTimeSigLength = 2;
  inline bool has_onemeastimesiglength() const;
  inline void clear_onemeastimesiglength();
  static const int kOneMeasTimeSigLengthFieldNumber = 2;
  inline ::google::protobuf::int32 onemeastimesiglength() const;
  inline void set_onemeastimesiglength(::google::protobuf::int32 value);

  // required uint32 AmpUnit = 3;
  inline bool has_ampunit() const;
  inline void clear_ampunit();
  static const int kAmpUnitFieldNumber = 3;
  inline ::google::protobuf::uint32 ampunit() const;
  inline void set_ampunit(::google::protobuf::uint32 value);

  // required bool IntegrateInTimeDomain = 4;
  inline bool has_integrateintimedomain() const;
  inline void clear_integrateintimedomain();
  static const int kIntegrateInTimeDomainFieldNumber = 4;
  inline bool integrateintimedomain() const;
  inline void set_integrateintimedomain(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.StatTimeSigTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_onemeastimesiglength();
  inline void clear_has_onemeastimesiglength();
  inline void set_has_ampunit();
  inline void clear_has_ampunit();
  inline void set_has_integrateintimedomain();
  inline void clear_has_integrateintimedomain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  ::google::protobuf::int32 onemeastimesiglength_;
  ::google::protobuf::uint32 ampunit_;
  bool integrateintimedomain_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static StatTimeSigTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTimeSigTaskParams : public ::google::protobuf::Message {
 public:
  PlayerTimeSigTaskParams();
  virtual ~PlayerTimeSigTaskParams();

  PlayerTimeSigTaskParams(const PlayerTimeSigTaskParams& from);

  inline PlayerTimeSigTaskParams& operator=(const PlayerTimeSigTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTimeSigTaskParams& default_instance();

  void Swap(PlayerTimeSigTaskParams* other);

  // implements Message ----------------------------------------------

  PlayerTimeSigTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTimeSigTaskParams& from);
  void MergeFrom(const PlayerTimeSigTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // @@protoc_insertion_point(class_scope:task_manager.PlayerTimeSigTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static PlayerTimeSigTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class VibegTaskParams : public ::google::protobuf::Message {
 public:
  VibegTaskParams();
  virtual ~VibegTaskParams();

  VibegTaskParams(const VibegTaskParams& from);

  inline VibegTaskParams& operator=(const VibegTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VibegTaskParams& default_instance();

  void Swap(VibegTaskParams* other);

  // implements Message ----------------------------------------------

  VibegTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VibegTaskParams& from);
  void MergeFrom(const VibegTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required double Frot_base = 2;
  inline bool has_frot_base() const;
  inline void clear_frot_base();
  static const int kFrotBaseFieldNumber = 2;
  inline double frot_base() const;
  inline void set_frot_base(double value);

  // required uint32 FrotAvgMetkasCount = 3;
  inline bool has_frotavgmetkascount() const;
  inline void clear_frotavgmetkascount();
  static const int kFrotAvgMetkasCountFieldNumber = 3;
  inline ::google::protobuf::uint32 frotavgmetkascount() const;
  inline void set_frotavgmetkascount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.VibegTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_frot_base();
  inline void clear_has_frot_base();
  inline void set_has_frotavgmetkascount();
  inline void clear_has_frotavgmetkascount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  double frot_base_;
  ::google::protobuf::uint32 frotavgmetkascount_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static VibegTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class QualityTimeSigTaskParams : public ::google::protobuf::Message {
 public:
  QualityTimeSigTaskParams();
  virtual ~QualityTimeSigTaskParams();

  QualityTimeSigTaskParams(const QualityTimeSigTaskParams& from);

  inline QualityTimeSigTaskParams& operator=(const QualityTimeSigTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QualityTimeSigTaskParams& default_instance();

  void Swap(QualityTimeSigTaskParams* other);

  // implements Message ----------------------------------------------

  QualityTimeSigTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QualityTimeSigTaskParams& from);
  void MergeFrom(const QualityTimeSigTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required int32 OneMeasTimeSigLength = 2;
  inline bool has_onemeastimesiglength() const;
  inline void clear_onemeastimesiglength();
  static const int kOneMeasTimeSigLengthFieldNumber = 2;
  inline ::google::protobuf::int32 onemeastimesiglength() const;
  inline void set_onemeastimesiglength(::google::protobuf::int32 value);

  // required double AmpPeakToPeakMin = 3;
  inline bool has_amppeaktopeakmin() const;
  inline void clear_amppeaktopeakmin();
  static const int kAmpPeakToPeakMinFieldNumber = 3;
  inline double amppeaktopeakmin() const;
  inline void set_amppeaktopeakmin(double value);

  // required double AmpPeakToPeakMax = 4;
  inline bool has_amppeaktopeakmax() const;
  inline void clear_amppeaktopeakmax();
  static const int kAmpPeakToPeakMaxFieldNumber = 4;
  inline double amppeaktopeakmax() const;
  inline void set_amppeaktopeakmax(double value);

  // required double AmpStdMin = 5;
  inline bool has_ampstdmin() const;
  inline void clear_ampstdmin();
  static const int kAmpStdMinFieldNumber = 5;
  inline double ampstdmin() const;
  inline void set_ampstdmin(double value);

  // required double AmpStdMax = 6;
  inline bool has_ampstdmax() const;
  inline void clear_ampstdmax();
  static const int kAmpStdMaxFieldNumber = 6;
  inline double ampstdmax() const;
  inline void set_ampstdmax(double value);

  // @@protoc_insertion_point(class_scope:task_manager.QualityTimeSigTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_onemeastimesiglength();
  inline void clear_has_onemeastimesiglength();
  inline void set_has_amppeaktopeakmin();
  inline void clear_has_amppeaktopeakmin();
  inline void set_has_amppeaktopeakmax();
  inline void clear_has_amppeaktopeakmax();
  inline void set_has_ampstdmin();
  inline void clear_has_ampstdmin();
  inline void set_has_ampstdmax();
  inline void clear_has_ampstdmax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  double amppeaktopeakmin_;
  double amppeaktopeakmax_;
  double ampstdmin_;
  double ampstdmax_;
  ::google::protobuf::int32 onemeastimesiglength_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static QualityTimeSigTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class SaveTimeSigTaskParams : public ::google::protobuf::Message {
 public:
  SaveTimeSigTaskParams();
  virtual ~SaveTimeSigTaskParams();

  SaveTimeSigTaskParams(const SaveTimeSigTaskParams& from);

  inline SaveTimeSigTaskParams& operator=(const SaveTimeSigTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveTimeSigTaskParams& default_instance();

  void Swap(SaveTimeSigTaskParams* other);

  // implements Message ----------------------------------------------

  SaveTimeSigTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveTimeSigTaskParams& from);
  void MergeFrom(const SaveTimeSigTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required uint32 OnePartTimeSigLength = 3;
  inline bool has_oneparttimesiglength() const;
  inline void clear_oneparttimesiglength();
  static const int kOnePartTimeSigLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 oneparttimesiglength() const;
  inline void set_oneparttimesiglength(::google::protobuf::uint32 value);

  // required uint32 TotalTimeSigLength = 4;
  inline bool has_totaltimesiglength() const;
  inline void clear_totaltimesiglength();
  static const int kTotalTimeSigLengthFieldNumber = 4;
  inline ::google::protobuf::uint32 totaltimesiglength() const;
  inline void set_totaltimesiglength(::google::protobuf::uint32 value);

  // required bool SigLengthWithFsSrc = 5;
  inline bool has_siglengthwithfssrc() const;
  inline void clear_siglengthwithfssrc();
  static const int kSigLengthWithFsSrcFieldNumber = 5;
  inline bool siglengthwithfssrc() const;
  inline void set_siglengthwithfssrc(bool value);

  // required uint32 TSDTC = 6;
  inline bool has_tsdtc() const;
  inline void clear_tsdtc();
  static const int kTSDTCFieldNumber = 6;
  inline ::google::protobuf::uint32 tsdtc() const;
  inline void set_tsdtc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:task_manager.SaveTimeSigTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_oneparttimesiglength();
  inline void clear_has_oneparttimesiglength();
  inline void set_has_totaltimesiglength();
  inline void clear_has_totaltimesiglength();
  inline void set_has_siglengthwithfssrc();
  inline void clear_has_siglengthwithfssrc();
  inline void set_has_tsdtc();
  inline void clear_has_tsdtc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  ::std::string* filename_;
  ::google::protobuf::uint32 oneparttimesiglength_;
  ::google::protobuf::uint32 totaltimesiglength_;
  bool siglengthwithfssrc_;
  ::google::protobuf::uint32 tsdtc_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static SaveTimeSigTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class VsensorFrotTaskParams : public ::google::protobuf::Message {
 public:
  VsensorFrotTaskParams();
  virtual ~VsensorFrotTaskParams();

  VsensorFrotTaskParams(const VsensorFrotTaskParams& from);

  inline VsensorFrotTaskParams& operator=(const VsensorFrotTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VsensorFrotTaskParams& default_instance();

  void Swap(VsensorFrotTaskParams* other);

  // implements Message ----------------------------------------------

  VsensorFrotTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VsensorFrotTaskParams& from);
  void MergeFrom(const VsensorFrotTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // optional .task_manager.SpectrTaskParams STP = 2;
  inline bool has_stp() const;
  inline void clear_stp();
  static const int kSTPFieldNumber = 2;
  inline const ::task_manager::SpectrTaskParams& stp() const;
  inline ::task_manager::SpectrTaskParams* mutable_stp();
  inline ::task_manager::SpectrTaskParams* release_stp();
  inline void set_allocated_stp(::task_manager::SpectrTaskParams* stp);

  // required double DeltaOffSetInSec = 3;
  inline bool has_deltaoffsetinsec() const;
  inline void clear_deltaoffsetinsec();
  static const int kDeltaOffSetInSecFieldNumber = 3;
  inline double deltaoffsetinsec() const;
  inline void set_deltaoffsetinsec(double value);

  // required uint32 ScaleKoeffFFt = 4;
  inline bool has_scalekoefffft() const;
  inline void clear_scalekoefffft();
  static const int kScaleKoeffFFtFieldNumber = 4;
  inline ::google::protobuf::uint32 scalekoefffft() const;
  inline void set_scalekoefffft(::google::protobuf::uint32 value);

  // required double FrotMin = 5;
  inline bool has_frotmin() const;
  inline void clear_frotmin();
  static const int kFrotMinFieldNumber = 5;
  inline double frotmin() const;
  inline void set_frotmin(double value);

  // required double FrotMax = 6;
  inline bool has_frotmax() const;
  inline void clear_frotmax();
  static const int kFrotMaxFieldNumber = 6;
  inline double frotmax() const;
  inline void set_frotmax(double value);

  // required double FrotAccelMax = 7;
  inline bool has_frotaccelmax() const;
  inline void clear_frotaccelmax();
  static const int kFrotAccelMaxFieldNumber = 7;
  inline double frotaccelmax() const;
  inline void set_frotaccelmax(double value);

  // required double AmpModulMin = 8;
  inline bool has_ampmodulmin() const;
  inline void clear_ampmodulmin();
  static const int kAmpModulMinFieldNumber = 8;
  inline double ampmodulmin() const;
  inline void set_ampmodulmin(double value);

  // required double STDMin = 9;
  inline bool has_stdmin() const;
  inline void clear_stdmin();
  static const int kSTDMinFieldNumber = 9;
  inline double stdmin() const;
  inline void set_stdmin(double value);

  // required int32 RBFilterLength = 10;
  inline bool has_rbfilterlength() const;
  inline void clear_rbfilterlength();
  static const int kRBFilterLengthFieldNumber = 10;
  inline ::google::protobuf::int32 rbfilterlength() const;
  inline void set_rbfilterlength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:task_manager.VsensorFrotTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_stp();
  inline void clear_has_stp();
  inline void set_has_deltaoffsetinsec();
  inline void clear_has_deltaoffsetinsec();
  inline void set_has_scalekoefffft();
  inline void clear_has_scalekoefffft();
  inline void set_has_frotmin();
  inline void clear_has_frotmin();
  inline void set_has_frotmax();
  inline void clear_has_frotmax();
  inline void set_has_frotaccelmax();
  inline void clear_has_frotaccelmax();
  inline void set_has_ampmodulmin();
  inline void clear_has_ampmodulmin();
  inline void set_has_stdmin();
  inline void clear_has_stdmin();
  inline void set_has_rbfilterlength();
  inline void clear_has_rbfilterlength();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  ::task_manager::SpectrTaskParams* stp_;
  double deltaoffsetinsec_;
  double frotmin_;
  double frotmax_;
  double frotaccelmax_;
  ::google::protobuf::uint32 scalekoefffft_;
  ::google::protobuf::int32 rbfilterlength_;
  double ampmodulmin_;
  double stdmin_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static VsensorFrotTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class DecimTimeSigTaskParams : public ::google::protobuf::Message {
 public:
  DecimTimeSigTaskParams();
  virtual ~DecimTimeSigTaskParams();

  DecimTimeSigTaskParams(const DecimTimeSigTaskParams& from);

  inline DecimTimeSigTaskParams& operator=(const DecimTimeSigTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecimTimeSigTaskParams& default_instance();

  void Swap(DecimTimeSigTaskParams* other);

  // implements Message ----------------------------------------------

  DecimTimeSigTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecimTimeSigTaskParams& from);
  void MergeFrom(const DecimTimeSigTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .task_manager.CommonTaskParams CMN = 1;
  inline bool has_cmn() const;
  inline void clear_cmn();
  static const int kCMNFieldNumber = 1;
  inline const ::task_manager::CommonTaskParams& cmn() const;
  inline ::task_manager::CommonTaskParams* mutable_cmn();
  inline ::task_manager::CommonTaskParams* release_cmn();
  inline void set_allocated_cmn(::task_manager::CommonTaskParams* cmn);

  // required uint32 OnePartTimeSigLength = 2;
  inline bool has_oneparttimesiglength() const;
  inline void clear_oneparttimesiglength();
  static const int kOnePartTimeSigLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 oneparttimesiglength() const;
  inline void set_oneparttimesiglength(::google::protobuf::uint32 value);

  // required bool ForgetFsSrc = 3;
  inline bool has_forgetfssrc() const;
  inline void clear_forgetfssrc();
  static const int kForgetFsSrcFieldNumber = 3;
  inline bool forgetfssrc() const;
  inline void set_forgetfssrc(bool value);

  // @@protoc_insertion_point(class_scope:task_manager.DecimTimeSigTaskParams)
 private:
  inline void set_has_cmn();
  inline void clear_has_cmn();
  inline void set_has_oneparttimesiglength();
  inline void clear_has_oneparttimesiglength();
  inline void set_has_forgetfssrc();
  inline void clear_has_forgetfssrc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::CommonTaskParams* cmn_;
  ::google::protobuf::uint32 oneparttimesiglength_;
  bool forgetfssrc_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DecimTimeSigTaskParams* default_instance_;
};
// -------------------------------------------------------------------

class AnyTaskParams : public ::google::protobuf::Message {
 public:
  AnyTaskParams();
  virtual ~AnyTaskParams();

  AnyTaskParams(const AnyTaskParams& from);

  inline AnyTaskParams& operator=(const AnyTaskParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyTaskParams& default_instance();

  void Swap(AnyTaskParams* other);

  // implements Message ----------------------------------------------

  AnyTaskParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnyTaskParams& from);
  void MergeFrom(const AnyTaskParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional .task_manager.SpectrTaskParams spect_par = 2;
  inline bool has_spect_par() const;
  inline void clear_spect_par();
  static const int kSpectParFieldNumber = 2;
  inline const ::task_manager::SpectrTaskParams& spect_par() const;
  inline ::task_manager::SpectrTaskParams* mutable_spect_par();
  inline ::task_manager::SpectrTaskParams* release_spect_par();
  inline void set_allocated_spect_par(::task_manager::SpectrTaskParams* spect_par);

  // optional .task_manager.VharmonicTaskParams harmonic_par = 3;
  inline bool has_harmonic_par() const;
  inline void clear_harmonic_par();
  static const int kHarmonicParFieldNumber = 3;
  inline const ::task_manager::VharmonicTaskParams& harmonic_par() const;
  inline ::task_manager::VharmonicTaskParams* mutable_harmonic_par();
  inline ::task_manager::VharmonicTaskParams* release_harmonic_par();
  inline void set_allocated_harmonic_par(::task_manager::VharmonicTaskParams* harmonic_par);

  // optional .task_manager.StatKurtosisTaskParams kurtosis_par = 4;
  inline bool has_kurtosis_par() const;
  inline void clear_kurtosis_par();
  static const int kKurtosisParFieldNumber = 4;
  inline const ::task_manager::StatKurtosisTaskParams& kurtosis_par() const;
  inline ::task_manager::StatKurtosisTaskParams* mutable_kurtosis_par();
  inline ::task_manager::StatKurtosisTaskParams* release_kurtosis_par();
  inline void set_allocated_kurtosis_par(::task_manager::StatKurtosisTaskParams* kurtosis_par);

  // optional .task_manager.StatTimeSigTaskParams stattimesig_par = 5;
  inline bool has_stattimesig_par() const;
  inline void clear_stattimesig_par();
  static const int kStattimesigParFieldNumber = 5;
  inline const ::task_manager::StatTimeSigTaskParams& stattimesig_par() const;
  inline ::task_manager::StatTimeSigTaskParams* mutable_stattimesig_par();
  inline ::task_manager::StatTimeSigTaskParams* release_stattimesig_par();
  inline void set_allocated_stattimesig_par(::task_manager::StatTimeSigTaskParams* stattimesig_par);

  // optional .task_manager.PlayerTimeSigTaskParams player_par = 6;
  inline bool has_player_par() const;
  inline void clear_player_par();
  static const int kPlayerParFieldNumber = 6;
  inline const ::task_manager::PlayerTimeSigTaskParams& player_par() const;
  inline ::task_manager::PlayerTimeSigTaskParams* mutable_player_par();
  inline ::task_manager::PlayerTimeSigTaskParams* release_player_par();
  inline void set_allocated_player_par(::task_manager::PlayerTimeSigTaskParams* player_par);

  // optional .task_manager.VibegTaskParams vibeg_par = 7;
  inline bool has_vibeg_par() const;
  inline void clear_vibeg_par();
  static const int kVibegParFieldNumber = 7;
  inline const ::task_manager::VibegTaskParams& vibeg_par() const;
  inline ::task_manager::VibegTaskParams* mutable_vibeg_par();
  inline ::task_manager::VibegTaskParams* release_vibeg_par();
  inline void set_allocated_vibeg_par(::task_manager::VibegTaskParams* vibeg_par);

  // optional .task_manager.QualityTimeSigTaskParams quality_par = 8;
  inline bool has_quality_par() const;
  inline void clear_quality_par();
  static const int kQualityParFieldNumber = 8;
  inline const ::task_manager::QualityTimeSigTaskParams& quality_par() const;
  inline ::task_manager::QualityTimeSigTaskParams* mutable_quality_par();
  inline ::task_manager::QualityTimeSigTaskParams* release_quality_par();
  inline void set_allocated_quality_par(::task_manager::QualityTimeSigTaskParams* quality_par);

  // optional .task_manager.SaveTimeSigTaskParams savetimesig_par = 9;
  inline bool has_savetimesig_par() const;
  inline void clear_savetimesig_par();
  static const int kSavetimesigParFieldNumber = 9;
  inline const ::task_manager::SaveTimeSigTaskParams& savetimesig_par() const;
  inline ::task_manager::SaveTimeSigTaskParams* mutable_savetimesig_par();
  inline ::task_manager::SaveTimeSigTaskParams* release_savetimesig_par();
  inline void set_allocated_savetimesig_par(::task_manager::SaveTimeSigTaskParams* savetimesig_par);

  // optional .task_manager.VsensorFrotTaskParams vsensorfrot_par = 10;
  inline bool has_vsensorfrot_par() const;
  inline void clear_vsensorfrot_par();
  static const int kVsensorfrotParFieldNumber = 10;
  inline const ::task_manager::VsensorFrotTaskParams& vsensorfrot_par() const;
  inline ::task_manager::VsensorFrotTaskParams* mutable_vsensorfrot_par();
  inline ::task_manager::VsensorFrotTaskParams* release_vsensorfrot_par();
  inline void set_allocated_vsensorfrot_par(::task_manager::VsensorFrotTaskParams* vsensorfrot_par);

  // optional .task_manager.DecimTimeSigTaskParams decim_par = 11;
  inline bool has_decim_par() const;
  inline void clear_decim_par();
  static const int kDecimParFieldNumber = 11;
  inline const ::task_manager::DecimTimeSigTaskParams& decim_par() const;
  inline ::task_manager::DecimTimeSigTaskParams* mutable_decim_par();
  inline ::task_manager::DecimTimeSigTaskParams* release_decim_par();
  inline void set_allocated_decim_par(::task_manager::DecimTimeSigTaskParams* decim_par);

  // @@protoc_insertion_point(class_scope:task_manager.AnyTaskParams)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_spect_par();
  inline void clear_has_spect_par();
  inline void set_has_harmonic_par();
  inline void clear_has_harmonic_par();
  inline void set_has_kurtosis_par();
  inline void clear_has_kurtosis_par();
  inline void set_has_stattimesig_par();
  inline void clear_has_stattimesig_par();
  inline void set_has_player_par();
  inline void clear_has_player_par();
  inline void set_has_vibeg_par();
  inline void clear_has_vibeg_par();
  inline void set_has_quality_par();
  inline void clear_has_quality_par();
  inline void set_has_savetimesig_par();
  inline void clear_has_savetimesig_par();
  inline void set_has_vsensorfrot_par();
  inline void clear_has_vsensorfrot_par();
  inline void set_has_decim_par();
  inline void clear_has_decim_par();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::task_manager::SpectrTaskParams* spect_par_;
  ::task_manager::VharmonicTaskParams* harmonic_par_;
  ::task_manager::StatKurtosisTaskParams* kurtosis_par_;
  ::task_manager::StatTimeSigTaskParams* stattimesig_par_;
  ::task_manager::PlayerTimeSigTaskParams* player_par_;
  ::task_manager::VibegTaskParams* vibeg_par_;
  ::task_manager::QualityTimeSigTaskParams* quality_par_;
  ::task_manager::SaveTimeSigTaskParams* savetimesig_par_;
  ::task_manager::VsensorFrotTaskParams* vsensorfrot_par_;
  ::task_manager::DecimTimeSigTaskParams* decim_par_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_task_5fmanager_2eproto();
  friend void protobuf_AssignDesc_task_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_task_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static AnyTaskParams* default_instance_;
};
// ===================================================================


// ===================================================================

// DSPEmulInitParams

// required uint32 ATSDTC = 1;
inline bool DSPEmulInitParams::has_atsdtc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DSPEmulInitParams::set_has_atsdtc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DSPEmulInitParams::clear_has_atsdtc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DSPEmulInitParams::clear_atsdtc() {
  atsdtc_ = 0u;
  clear_has_atsdtc();
}
inline ::google::protobuf::uint32 DSPEmulInitParams::atsdtc() const {
  // @@protoc_insertion_point(field_get:task_manager.DSPEmulInitParams.ATSDTC)
  return atsdtc_;
}
inline void DSPEmulInitParams::set_atsdtc(::google::protobuf::uint32 value) {
  set_has_atsdtc();
  atsdtc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DSPEmulInitParams.ATSDTC)
}

// required uint32 AInitSigBufferLength = 2;
inline bool DSPEmulInitParams::has_ainitsigbufferlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DSPEmulInitParams::set_has_ainitsigbufferlength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DSPEmulInitParams::clear_has_ainitsigbufferlength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DSPEmulInitParams::clear_ainitsigbufferlength() {
  ainitsigbufferlength_ = 0u;
  clear_has_ainitsigbufferlength();
}
inline ::google::protobuf::uint32 DSPEmulInitParams::ainitsigbufferlength() const {
  // @@protoc_insertion_point(field_get:task_manager.DSPEmulInitParams.AInitSigBufferLength)
  return ainitsigbufferlength_;
}
inline void DSPEmulInitParams::set_ainitsigbufferlength(::google::protobuf::uint32 value) {
  set_has_ainitsigbufferlength();
  ainitsigbufferlength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DSPEmulInitParams.AInitSigBufferLength)
}

// required uint32 ASigBufferIncrement = 3;
inline bool DSPEmulInitParams::has_asigbufferincrement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DSPEmulInitParams::set_has_asigbufferincrement() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DSPEmulInitParams::clear_has_asigbufferincrement() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DSPEmulInitParams::clear_asigbufferincrement() {
  asigbufferincrement_ = 0u;
  clear_has_asigbufferincrement();
}
inline ::google::protobuf::uint32 DSPEmulInitParams::asigbufferincrement() const {
  // @@protoc_insertion_point(field_get:task_manager.DSPEmulInitParams.ASigBufferIncrement)
  return asigbufferincrement_;
}
inline void DSPEmulInitParams::set_asigbufferincrement(::google::protobuf::uint32 value) {
  set_has_asigbufferincrement();
  asigbufferincrement_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DSPEmulInitParams.ASigBufferIncrement)
}

// required uint32 AInitRotBufferLength = 4;
inline bool DSPEmulInitParams::has_ainitrotbufferlength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DSPEmulInitParams::set_has_ainitrotbufferlength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DSPEmulInitParams::clear_has_ainitrotbufferlength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DSPEmulInitParams::clear_ainitrotbufferlength() {
  ainitrotbufferlength_ = 0u;
  clear_has_ainitrotbufferlength();
}
inline ::google::protobuf::uint32 DSPEmulInitParams::ainitrotbufferlength() const {
  // @@protoc_insertion_point(field_get:task_manager.DSPEmulInitParams.AInitRotBufferLength)
  return ainitrotbufferlength_;
}
inline void DSPEmulInitParams::set_ainitrotbufferlength(::google::protobuf::uint32 value) {
  set_has_ainitrotbufferlength();
  ainitrotbufferlength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DSPEmulInitParams.AInitRotBufferLength)
}

// required uint32 ARotBufferIncrement = 5;
inline bool DSPEmulInitParams::has_arotbufferincrement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DSPEmulInitParams::set_has_arotbufferincrement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DSPEmulInitParams::clear_has_arotbufferincrement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DSPEmulInitParams::clear_arotbufferincrement() {
  arotbufferincrement_ = 0u;
  clear_has_arotbufferincrement();
}
inline ::google::protobuf::uint32 DSPEmulInitParams::arotbufferincrement() const {
  // @@protoc_insertion_point(field_get:task_manager.DSPEmulInitParams.ARotBufferIncrement)
  return arotbufferincrement_;
}
inline void DSPEmulInitParams::set_arotbufferincrement(::google::protobuf::uint32 value) {
  set_has_arotbufferincrement();
  arotbufferincrement_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DSPEmulInitParams.ARotBufferIncrement)
}

// -------------------------------------------------------------------

// IntArray

// repeated int32 values = 1;
inline int IntArray::values_size() const {
  return values_.size();
}
inline void IntArray::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 IntArray::values(int index) const {
  // @@protoc_insertion_point(field_get:task_manager.IntArray.values)
  return values_.Get(index);
}
inline void IntArray::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:task_manager.IntArray.values)
}
inline void IntArray::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:task_manager.IntArray.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntArray::values() const {
  // @@protoc_insertion_point(field_list:task_manager.IntArray.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:task_manager.IntArray.values)
  return &values_;
}

// -------------------------------------------------------------------

// LPFilter

// required int32 Index = 1;
inline bool LPFilter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LPFilter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LPFilter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LPFilter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 LPFilter::index() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter.Index)
  return index_;
}
inline void LPFilter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter.Index)
}

// required double MFreq = 2;
inline bool LPFilter::has_mfreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LPFilter::set_has_mfreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LPFilter::clear_has_mfreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LPFilter::clear_mfreq() {
  mfreq_ = 0;
  clear_has_mfreq();
}
inline double LPFilter::mfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter.MFreq)
  return mfreq_;
}
inline void LPFilter::set_mfreq(double value) {
  set_has_mfreq();
  mfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter.MFreq)
}

// required int32 RFreq = 3;
inline bool LPFilter::has_rfreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LPFilter::set_has_rfreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LPFilter::clear_has_rfreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LPFilter::clear_rfreq() {
  rfreq_ = 0;
  clear_has_rfreq();
}
inline ::google::protobuf::int32 LPFilter::rfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter.RFreq)
  return rfreq_;
}
inline void LPFilter::set_rfreq(::google::protobuf::int32 value) {
  set_has_rfreq();
  rfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter.RFreq)
}

// -------------------------------------------------------------------

// LPFilter_params

// required int32 LPFilterIndex = 1;
inline bool LPFilter_params::has_lpfilterindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LPFilter_params::set_has_lpfilterindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LPFilter_params::clear_has_lpfilterindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LPFilter_params::clear_lpfilterindex() {
  lpfilterindex_ = 0;
  clear_has_lpfilterindex();
}
inline ::google::protobuf::int32 LPFilter_params::lpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter_params.LPFilterIndex)
  return lpfilterindex_;
}
inline void LPFilter_params::set_lpfilterindex(::google::protobuf::int32 value) {
  set_has_lpfilterindex();
  lpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter_params.LPFilterIndex)
}

// required uint32 LPFilterDecim = 2;
inline bool LPFilter_params::has_lpfilterdecim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LPFilter_params::set_has_lpfilterdecim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LPFilter_params::clear_has_lpfilterdecim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LPFilter_params::clear_lpfilterdecim() {
  lpfilterdecim_ = 0u;
  clear_has_lpfilterdecim();
}
inline ::google::protobuf::uint32 LPFilter_params::lpfilterdecim() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter_params.LPFilterDecim)
  return lpfilterdecim_;
}
inline void LPFilter_params::set_lpfilterdecim(::google::protobuf::uint32 value) {
  set_has_lpfilterdecim();
  lpfilterdecim_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter_params.LPFilterDecim)
}

// required int32 LPFilterType = 3;
inline bool LPFilter_params::has_lpfiltertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LPFilter_params::set_has_lpfiltertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LPFilter_params::clear_has_lpfiltertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LPFilter_params::clear_lpfiltertype() {
  lpfiltertype_ = 0;
  clear_has_lpfiltertype();
}
inline ::google::protobuf::int32 LPFilter_params::lpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter_params.LPFilterType)
  return lpfiltertype_;
}
inline void LPFilter_params::set_lpfiltertype(::google::protobuf::int32 value) {
  set_has_lpfiltertype();
  lpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter_params.LPFilterType)
}

// required bool LPFilterUsualW = 4;
inline bool LPFilter_params::has_lpfilterusualw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LPFilter_params::set_has_lpfilterusualw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LPFilter_params::clear_has_lpfilterusualw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LPFilter_params::clear_lpfilterusualw() {
  lpfilterusualw_ = false;
  clear_has_lpfilterusualw();
}
inline bool LPFilter_params::lpfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.LPFilter_params.LPFilterUsualW)
  return lpfilterusualw_;
}
inline void LPFilter_params::set_lpfilterusualw(bool value) {
  set_has_lpfilterusualw();
  lpfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.LPFilter_params.LPFilterUsualW)
}

// -------------------------------------------------------------------

// BPFilter

// required int32 Index = 1;
inline bool BPFilter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BPFilter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BPFilter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BPFilter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BPFilter::index() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.Index)
  return index_;
}
inline void BPFilter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.Index)
}

// required int32 CFreq = 2;
inline bool BPFilter::has_cfreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BPFilter::set_has_cfreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BPFilter::clear_has_cfreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BPFilter::clear_cfreq() {
  cfreq_ = 0;
  clear_has_cfreq();
}
inline ::google::protobuf::int32 BPFilter::cfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.CFreq)
  return cfreq_;
}
inline void BPFilter::set_cfreq(::google::protobuf::int32 value) {
  set_has_cfreq();
  cfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.CFreq)
}

// required int32 Width = 3;
inline bool BPFilter::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BPFilter::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BPFilter::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BPFilter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BPFilter::width() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.Width)
  return width_;
}
inline void BPFilter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.Width)
}

// required int32 Oct = 4;
inline bool BPFilter::has_oct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BPFilter::set_has_oct() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BPFilter::clear_has_oct() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BPFilter::clear_oct() {
  oct_ = 0;
  clear_has_oct();
}
inline ::google::protobuf::int32 BPFilter::oct() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.Oct)
  return oct_;
}
inline void BPFilter::set_oct(::google::protobuf::int32 value) {
  set_has_oct();
  oct_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.Oct)
}

// required int32 Dec = 5;
inline bool BPFilter::has_dec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BPFilter::set_has_dec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BPFilter::clear_has_dec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BPFilter::clear_dec() {
  dec_ = 0;
  clear_has_dec();
}
inline ::google::protobuf::int32 BPFilter::dec() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.Dec)
  return dec_;
}
inline void BPFilter::set_dec(::google::protobuf::int32 value) {
  set_has_dec();
  dec_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.Dec)
}

// required int32 PreDec = 6;
inline bool BPFilter::has_predec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BPFilter::set_has_predec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BPFilter::clear_has_predec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BPFilter::clear_predec() {
  predec_ = 0;
  clear_has_predec();
}
inline ::google::protobuf::int32 BPFilter::predec() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.PreDec)
  return predec_;
}
inline void BPFilter::set_predec(::google::protobuf::int32 value) {
  set_has_predec();
  predec_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.PreDec)
}

// required int32 BPDec = 7;
inline bool BPFilter::has_bpdec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BPFilter::set_has_bpdec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BPFilter::clear_has_bpdec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BPFilter::clear_bpdec() {
  bpdec_ = 0;
  clear_has_bpdec();
}
inline ::google::protobuf::int32 BPFilter::bpdec() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.BPDec)
  return bpdec_;
}
inline void BPFilter::set_bpdec(::google::protobuf::int32 value) {
  set_has_bpdec();
  bpdec_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.BPDec)
}

// required int32 EnvType = 8;
inline bool BPFilter::has_envtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BPFilter::set_has_envtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BPFilter::clear_has_envtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BPFilter::clear_envtype() {
  envtype_ = 0;
  clear_has_envtype();
}
inline ::google::protobuf::int32 BPFilter::envtype() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter.EnvType)
  return envtype_;
}
inline void BPFilter::set_envtype(::google::protobuf::int32 value) {
  set_has_envtype();
  envtype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter.EnvType)
}

// -------------------------------------------------------------------

// BPFilter_params

// required int32 BPFilterIndex = 1;
inline bool BPFilter_params::has_bpfilterindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BPFilter_params::set_has_bpfilterindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BPFilter_params::clear_has_bpfilterindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BPFilter_params::clear_bpfilterindex() {
  bpfilterindex_ = 0;
  clear_has_bpfilterindex();
}
inline ::google::protobuf::int32 BPFilter_params::bpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter_params.BPFilterIndex)
  return bpfilterindex_;
}
inline void BPFilter_params::set_bpfilterindex(::google::protobuf::int32 value) {
  set_has_bpfilterindex();
  bpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter_params.BPFilterIndex)
}

// required int32 BPFilterType = 2;
inline bool BPFilter_params::has_bpfiltertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BPFilter_params::set_has_bpfiltertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BPFilter_params::clear_has_bpfiltertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BPFilter_params::clear_bpfiltertype() {
  bpfiltertype_ = 0;
  clear_has_bpfiltertype();
}
inline ::google::protobuf::int32 BPFilter_params::bpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter_params.BPFilterType)
  return bpfiltertype_;
}
inline void BPFilter_params::set_bpfiltertype(::google::protobuf::int32 value) {
  set_has_bpfiltertype();
  bpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter_params.BPFilterType)
}

// required bool BPFilterUsualW = 3;
inline bool BPFilter_params::has_bpfilterusualw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BPFilter_params::set_has_bpfilterusualw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BPFilter_params::clear_has_bpfilterusualw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BPFilter_params::clear_bpfilterusualw() {
  bpfilterusualw_ = false;
  clear_has_bpfilterusualw();
}
inline bool BPFilter_params::bpfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.BPFilter_params.BPFilterUsualW)
  return bpfilterusualw_;
}
inline void BPFilter_params::set_bpfilterusualw(bool value) {
  set_has_bpfilterusualw();
  bpfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.BPFilter_params.BPFilterUsualW)
}

// -------------------------------------------------------------------

// RSMPFilter

// required int32 Index = 1;
inline bool RSMPFilter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSMPFilter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSMPFilter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSMPFilter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RSMPFilter::index() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter.Index)
  return index_;
}
inline void RSMPFilter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter.Index)
}

// required int32 Interp = 2;
inline bool RSMPFilter::has_interp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSMPFilter::set_has_interp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSMPFilter::clear_has_interp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSMPFilter::clear_interp() {
  interp_ = 0;
  clear_has_interp();
}
inline ::google::protobuf::int32 RSMPFilter::interp() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter.Interp)
  return interp_;
}
inline void RSMPFilter::set_interp(::google::protobuf::int32 value) {
  set_has_interp();
  interp_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter.Interp)
}

// required int32 Dec = 3;
inline bool RSMPFilter::has_dec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSMPFilter::set_has_dec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSMPFilter::clear_has_dec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSMPFilter::clear_dec() {
  dec_ = 0;
  clear_has_dec();
}
inline ::google::protobuf::int32 RSMPFilter::dec() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter.Dec)
  return dec_;
}
inline void RSMPFilter::set_dec(::google::protobuf::int32 value) {
  set_has_dec();
  dec_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter.Dec)
}

// required double Rel = 4;
inline bool RSMPFilter::has_rel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSMPFilter::set_has_rel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RSMPFilter::clear_has_rel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RSMPFilter::clear_rel() {
  rel_ = 0;
  clear_has_rel();
}
inline double RSMPFilter::rel() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter.Rel)
  return rel_;
}
inline void RSMPFilter::set_rel(double value) {
  set_has_rel();
  rel_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter.Rel)
}

// required int32 ResampleType = 5;
inline bool RSMPFilter::has_resampletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSMPFilter::set_has_resampletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RSMPFilter::clear_has_resampletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RSMPFilter::clear_resampletype() {
  resampletype_ = 0;
  clear_has_resampletype();
}
inline ::google::protobuf::int32 RSMPFilter::resampletype() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter.ResampleType)
  return resampletype_;
}
inline void RSMPFilter::set_resampletype(::google::protobuf::int32 value) {
  set_has_resampletype();
  resampletype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter.ResampleType)
}

// -------------------------------------------------------------------

// RSMPFilter_params

// required int32 RSMPFilterIndex = 1;
inline bool RSMPFilter_params::has_rsmpfilterindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSMPFilter_params::set_has_rsmpfilterindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSMPFilter_params::clear_has_rsmpfilterindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSMPFilter_params::clear_rsmpfilterindex() {
  rsmpfilterindex_ = 0;
  clear_has_rsmpfilterindex();
}
inline ::google::protobuf::int32 RSMPFilter_params::rsmpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter_params.RSMPFilterIndex)
  return rsmpfilterindex_;
}
inline void RSMPFilter_params::set_rsmpfilterindex(::google::protobuf::int32 value) {
  set_has_rsmpfilterindex();
  rsmpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter_params.RSMPFilterIndex)
}

// required int32 RSMPFilterType = 2;
inline bool RSMPFilter_params::has_rsmpfiltertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSMPFilter_params::set_has_rsmpfiltertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSMPFilter_params::clear_has_rsmpfiltertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSMPFilter_params::clear_rsmpfiltertype() {
  rsmpfiltertype_ = 0;
  clear_has_rsmpfiltertype();
}
inline ::google::protobuf::int32 RSMPFilter_params::rsmpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter_params.RSMPFilterType)
  return rsmpfiltertype_;
}
inline void RSMPFilter_params::set_rsmpfiltertype(::google::protobuf::int32 value) {
  set_has_rsmpfiltertype();
  rsmpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter_params.RSMPFilterType)
}

// required bool RSMPFilterUsualW = 3;
inline bool RSMPFilter_params::has_rsmpfilterusualw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSMPFilter_params::set_has_rsmpfilterusualw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSMPFilter_params::clear_has_rsmpfilterusualw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSMPFilter_params::clear_rsmpfilterusualw() {
  rsmpfilterusualw_ = false;
  clear_has_rsmpfilterusualw();
}
inline bool RSMPFilter_params::rsmpfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.RSMPFilter_params.RSMPFilterUsualW)
  return rsmpfilterusualw_;
}
inline void RSMPFilter_params::set_rsmpfilterusualw(bool value) {
  set_has_rsmpfilterusualw();
  rsmpfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RSMPFilter_params.RSMPFilterUsualW)
}

// -------------------------------------------------------------------

// HPFilter

// required int32 Index = 1;
inline bool HPFilter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPFilter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPFilter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPFilter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 HPFilter::index() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter.Index)
  return index_;
}
inline void HPFilter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter.Index)
}

// required double SFreq = 2;
inline bool HPFilter::has_sfreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPFilter::set_has_sfreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPFilter::clear_has_sfreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPFilter::clear_sfreq() {
  sfreq_ = 0;
  clear_has_sfreq();
}
inline double HPFilter::sfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter.SFreq)
  return sfreq_;
}
inline void HPFilter::set_sfreq(double value) {
  set_has_sfreq();
  sfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter.SFreq)
}

// required double MFreq = 3;
inline bool HPFilter::has_mfreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HPFilter::set_has_mfreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HPFilter::clear_has_mfreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HPFilter::clear_mfreq() {
  mfreq_ = 0;
  clear_has_mfreq();
}
inline double HPFilter::mfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter.MFreq)
  return mfreq_;
}
inline void HPFilter::set_mfreq(double value) {
  set_has_mfreq();
  mfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter.MFreq)
}

// required int32 RFreq = 4;
inline bool HPFilter::has_rfreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HPFilter::set_has_rfreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HPFilter::clear_has_rfreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HPFilter::clear_rfreq() {
  rfreq_ = 0;
  clear_has_rfreq();
}
inline ::google::protobuf::int32 HPFilter::rfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter.RFreq)
  return rfreq_;
}
inline void HPFilter::set_rfreq(::google::protobuf::int32 value) {
  set_has_rfreq();
  rfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter.RFreq)
}

// required int32 HPFType = 5;
inline bool HPFilter::has_hpftype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HPFilter::set_has_hpftype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HPFilter::clear_has_hpftype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HPFilter::clear_hpftype() {
  hpftype_ = 0;
  clear_has_hpftype();
}
inline ::google::protobuf::int32 HPFilter::hpftype() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter.HPFType)
  return hpftype_;
}
inline void HPFilter::set_hpftype(::google::protobuf::int32 value) {
  set_has_hpftype();
  hpftype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter.HPFType)
}

// -------------------------------------------------------------------

// HPFilter_params

// required int32 HPFilterIndex = 1;
inline bool HPFilter_params::has_hpfilterindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HPFilter_params::set_has_hpfilterindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HPFilter_params::clear_has_hpfilterindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HPFilter_params::clear_hpfilterindex() {
  hpfilterindex_ = 0;
  clear_has_hpfilterindex();
}
inline ::google::protobuf::int32 HPFilter_params::hpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter_params.HPFilterIndex)
  return hpfilterindex_;
}
inline void HPFilter_params::set_hpfilterindex(::google::protobuf::int32 value) {
  set_has_hpfilterindex();
  hpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter_params.HPFilterIndex)
}

// required int32 HPFilterType = 2;
inline bool HPFilter_params::has_hpfiltertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HPFilter_params::set_has_hpfiltertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HPFilter_params::clear_has_hpfiltertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HPFilter_params::clear_hpfiltertype() {
  hpfiltertype_ = 0;
  clear_has_hpfiltertype();
}
inline ::google::protobuf::int32 HPFilter_params::hpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter_params.HPFilterType)
  return hpfiltertype_;
}
inline void HPFilter_params::set_hpfiltertype(::google::protobuf::int32 value) {
  set_has_hpfiltertype();
  hpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter_params.HPFilterType)
}

// required double HPFilterParam1 = 3;
inline bool HPFilter_params::has_hpfilterparam1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HPFilter_params::set_has_hpfilterparam1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HPFilter_params::clear_has_hpfilterparam1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HPFilter_params::clear_hpfilterparam1() {
  hpfilterparam1_ = 0;
  clear_has_hpfilterparam1();
}
inline double HPFilter_params::hpfilterparam1() const {
  // @@protoc_insertion_point(field_get:task_manager.HPFilter_params.HPFilterParam1)
  return hpfilterparam1_;
}
inline void HPFilter_params::set_hpfilterparam1(double value) {
  set_has_hpfilterparam1();
  hpfilterparam1_ = value;
  // @@protoc_insertion_point(field_set:task_manager.HPFilter_params.HPFilterParam1)
}

// -------------------------------------------------------------------

// SPFilter

// required int32 Index = 1;
inline bool SPFilter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPFilter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPFilter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPFilter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SPFilter::index() const {
  // @@protoc_insertion_point(field_get:task_manager.SPFilter.Index)
  return index_;
}
inline void SPFilter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SPFilter.Index)
}

// required int32 RFreq = 2;
inline bool SPFilter::has_rfreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPFilter::set_has_rfreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPFilter::clear_has_rfreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPFilter::clear_rfreq() {
  rfreq_ = 0;
  clear_has_rfreq();
}
inline ::google::protobuf::int32 SPFilter::rfreq() const {
  // @@protoc_insertion_point(field_get:task_manager.SPFilter.RFreq)
  return rfreq_;
}
inline void SPFilter::set_rfreq(::google::protobuf::int32 value) {
  set_has_rfreq();
  rfreq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SPFilter.RFreq)
}

// required int32 SPFType = 3;
inline bool SPFilter::has_spftype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPFilter::set_has_spftype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPFilter::clear_has_spftype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPFilter::clear_spftype() {
  spftype_ = 0;
  clear_has_spftype();
}
inline ::google::protobuf::int32 SPFilter::spftype() const {
  // @@protoc_insertion_point(field_get:task_manager.SPFilter.SPFType)
  return spftype_;
}
inline void SPFilter::set_spftype(::google::protobuf::int32 value) {
  set_has_spftype();
  spftype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SPFilter.SPFType)
}

// -------------------------------------------------------------------

// SPFilter_params

// required int32 SPFilterIndex = 1;
inline bool SPFilter_params::has_spfilterindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPFilter_params::set_has_spfilterindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPFilter_params::clear_has_spfilterindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPFilter_params::clear_spfilterindex() {
  spfilterindex_ = 0;
  clear_has_spfilterindex();
}
inline ::google::protobuf::int32 SPFilter_params::spfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.SPFilter_params.SPFilterIndex)
  return spfilterindex_;
}
inline void SPFilter_params::set_spfilterindex(::google::protobuf::int32 value) {
  set_has_spfilterindex();
  spfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SPFilter_params.SPFilterIndex)
}

// required int32 SPFilterType = 2;
inline bool SPFilter_params::has_spfiltertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPFilter_params::set_has_spfiltertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPFilter_params::clear_has_spfiltertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPFilter_params::clear_spfiltertype() {
  spfiltertype_ = 0;
  clear_has_spfiltertype();
}
inline ::google::protobuf::int32 SPFilter_params::spfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.SPFilter_params.SPFilterType)
  return spfiltertype_;
}
inline void SPFilter_params::set_spfiltertype(::google::protobuf::int32 value) {
  set_has_spfiltertype();
  spfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SPFilter_params.SPFilterType)
}

// required bool SPFilterUsualW = 3;
inline bool SPFilter_params::has_spfilterusualw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPFilter_params::set_has_spfilterusualw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPFilter_params::clear_has_spfilterusualw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPFilter_params::clear_spfilterusualw() {
  spfilterusualw_ = false;
  clear_has_spfilterusualw();
}
inline bool SPFilter_params::spfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.SPFilter_params.SPFilterUsualW)
  return spfilterusualw_;
}
inline void SPFilter_params::set_spfilterusualw(bool value) {
  set_has_spfilterusualw();
  spfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SPFilter_params.SPFilterUsualW)
}

// -------------------------------------------------------------------

// INTGFilter

// required int32 Index = 1;
inline bool INTGFilter::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void INTGFilter::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void INTGFilter::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void INTGFilter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 INTGFilter::index() const {
  // @@protoc_insertion_point(field_get:task_manager.INTGFilter.Index)
  return index_;
}
inline void INTGFilter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:task_manager.INTGFilter.Index)
}

// required int32 INTGFType = 2;
inline bool INTGFilter::has_intgftype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void INTGFilter::set_has_intgftype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void INTGFilter::clear_has_intgftype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void INTGFilter::clear_intgftype() {
  intgftype_ = 0;
  clear_has_intgftype();
}
inline ::google::protobuf::int32 INTGFilter::intgftype() const {
  // @@protoc_insertion_point(field_get:task_manager.INTGFilter.INTGFType)
  return intgftype_;
}
inline void INTGFilter::set_intgftype(::google::protobuf::int32 value) {
  set_has_intgftype();
  intgftype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.INTGFilter.INTGFType)
}

// -------------------------------------------------------------------

// INTGFilter_params

// required int32 INTGFilterIndex = 1;
inline bool INTGFilter_params::has_intgfilterindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void INTGFilter_params::set_has_intgfilterindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void INTGFilter_params::clear_has_intgfilterindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void INTGFilter_params::clear_intgfilterindex() {
  intgfilterindex_ = 0;
  clear_has_intgfilterindex();
}
inline ::google::protobuf::int32 INTGFilter_params::intgfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.INTGFilter_params.INTGFilterIndex)
  return intgfilterindex_;
}
inline void INTGFilter_params::set_intgfilterindex(::google::protobuf::int32 value) {
  set_has_intgfilterindex();
  intgfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.INTGFilter_params.INTGFilterIndex)
}

// required int32 INTGFilterType = 2;
inline bool INTGFilter_params::has_intgfiltertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void INTGFilter_params::set_has_intgfiltertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void INTGFilter_params::clear_has_intgfiltertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void INTGFilter_params::clear_intgfiltertype() {
  intgfiltertype_ = 0;
  clear_has_intgfiltertype();
}
inline ::google::protobuf::int32 INTGFilter_params::intgfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.INTGFilter_params.INTGFilterType)
  return intgfiltertype_;
}
inline void INTGFilter_params::set_intgfiltertype(::google::protobuf::int32 value) {
  set_has_intgfiltertype();
  intgfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.INTGFilter_params.INTGFilterType)
}

// -------------------------------------------------------------------

// FParams

// required int32 Type = 1;
inline bool FParams::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FParams::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FParams::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FParams::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FParams::type() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.Type)
  return type_;
}
inline void FParams::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:task_manager.FParams.Type)
}

// optional .task_manager.LPFilter_params LPF = 2;
inline bool FParams::has_lpf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FParams::set_has_lpf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FParams::clear_has_lpf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FParams::clear_lpf() {
  if (lpf_ != NULL) lpf_->::task_manager::LPFilter_params::Clear();
  clear_has_lpf();
}
inline const ::task_manager::LPFilter_params& FParams::lpf() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.LPF)
  return lpf_ != NULL ? *lpf_ : *default_instance_->lpf_;
}
inline ::task_manager::LPFilter_params* FParams::mutable_lpf() {
  set_has_lpf();
  if (lpf_ == NULL) lpf_ = new ::task_manager::LPFilter_params;
  // @@protoc_insertion_point(field_mutable:task_manager.FParams.LPF)
  return lpf_;
}
inline ::task_manager::LPFilter_params* FParams::release_lpf() {
  clear_has_lpf();
  ::task_manager::LPFilter_params* temp = lpf_;
  lpf_ = NULL;
  return temp;
}
inline void FParams::set_allocated_lpf(::task_manager::LPFilter_params* lpf) {
  delete lpf_;
  lpf_ = lpf;
  if (lpf) {
    set_has_lpf();
  } else {
    clear_has_lpf();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.FParams.LPF)
}

// optional .task_manager.BPFilter_params BPF = 3;
inline bool FParams::has_bpf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FParams::set_has_bpf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FParams::clear_has_bpf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FParams::clear_bpf() {
  if (bpf_ != NULL) bpf_->::task_manager::BPFilter_params::Clear();
  clear_has_bpf();
}
inline const ::task_manager::BPFilter_params& FParams::bpf() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.BPF)
  return bpf_ != NULL ? *bpf_ : *default_instance_->bpf_;
}
inline ::task_manager::BPFilter_params* FParams::mutable_bpf() {
  set_has_bpf();
  if (bpf_ == NULL) bpf_ = new ::task_manager::BPFilter_params;
  // @@protoc_insertion_point(field_mutable:task_manager.FParams.BPF)
  return bpf_;
}
inline ::task_manager::BPFilter_params* FParams::release_bpf() {
  clear_has_bpf();
  ::task_manager::BPFilter_params* temp = bpf_;
  bpf_ = NULL;
  return temp;
}
inline void FParams::set_allocated_bpf(::task_manager::BPFilter_params* bpf) {
  delete bpf_;
  bpf_ = bpf;
  if (bpf) {
    set_has_bpf();
  } else {
    clear_has_bpf();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.FParams.BPF)
}

// optional .task_manager.RSMPFilter_params RSMPF = 4;
inline bool FParams::has_rsmpf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FParams::set_has_rsmpf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FParams::clear_has_rsmpf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FParams::clear_rsmpf() {
  if (rsmpf_ != NULL) rsmpf_->::task_manager::RSMPFilter_params::Clear();
  clear_has_rsmpf();
}
inline const ::task_manager::RSMPFilter_params& FParams::rsmpf() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.RSMPF)
  return rsmpf_ != NULL ? *rsmpf_ : *default_instance_->rsmpf_;
}
inline ::task_manager::RSMPFilter_params* FParams::mutable_rsmpf() {
  set_has_rsmpf();
  if (rsmpf_ == NULL) rsmpf_ = new ::task_manager::RSMPFilter_params;
  // @@protoc_insertion_point(field_mutable:task_manager.FParams.RSMPF)
  return rsmpf_;
}
inline ::task_manager::RSMPFilter_params* FParams::release_rsmpf() {
  clear_has_rsmpf();
  ::task_manager::RSMPFilter_params* temp = rsmpf_;
  rsmpf_ = NULL;
  return temp;
}
inline void FParams::set_allocated_rsmpf(::task_manager::RSMPFilter_params* rsmpf) {
  delete rsmpf_;
  rsmpf_ = rsmpf;
  if (rsmpf) {
    set_has_rsmpf();
  } else {
    clear_has_rsmpf();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.FParams.RSMPF)
}

// optional .task_manager.HPFilter_params HPF = 5;
inline bool FParams::has_hpf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FParams::set_has_hpf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FParams::clear_has_hpf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FParams::clear_hpf() {
  if (hpf_ != NULL) hpf_->::task_manager::HPFilter_params::Clear();
  clear_has_hpf();
}
inline const ::task_manager::HPFilter_params& FParams::hpf() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.HPF)
  return hpf_ != NULL ? *hpf_ : *default_instance_->hpf_;
}
inline ::task_manager::HPFilter_params* FParams::mutable_hpf() {
  set_has_hpf();
  if (hpf_ == NULL) hpf_ = new ::task_manager::HPFilter_params;
  // @@protoc_insertion_point(field_mutable:task_manager.FParams.HPF)
  return hpf_;
}
inline ::task_manager::HPFilter_params* FParams::release_hpf() {
  clear_has_hpf();
  ::task_manager::HPFilter_params* temp = hpf_;
  hpf_ = NULL;
  return temp;
}
inline void FParams::set_allocated_hpf(::task_manager::HPFilter_params* hpf) {
  delete hpf_;
  hpf_ = hpf;
  if (hpf) {
    set_has_hpf();
  } else {
    clear_has_hpf();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.FParams.HPF)
}

// optional .task_manager.SPFilter_params SPF = 6;
inline bool FParams::has_spf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FParams::set_has_spf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FParams::clear_has_spf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FParams::clear_spf() {
  if (spf_ != NULL) spf_->::task_manager::SPFilter_params::Clear();
  clear_has_spf();
}
inline const ::task_manager::SPFilter_params& FParams::spf() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.SPF)
  return spf_ != NULL ? *spf_ : *default_instance_->spf_;
}
inline ::task_manager::SPFilter_params* FParams::mutable_spf() {
  set_has_spf();
  if (spf_ == NULL) spf_ = new ::task_manager::SPFilter_params;
  // @@protoc_insertion_point(field_mutable:task_manager.FParams.SPF)
  return spf_;
}
inline ::task_manager::SPFilter_params* FParams::release_spf() {
  clear_has_spf();
  ::task_manager::SPFilter_params* temp = spf_;
  spf_ = NULL;
  return temp;
}
inline void FParams::set_allocated_spf(::task_manager::SPFilter_params* spf) {
  delete spf_;
  spf_ = spf;
  if (spf) {
    set_has_spf();
  } else {
    clear_has_spf();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.FParams.SPF)
}

// optional .task_manager.INTGFilter_params INTGF = 7;
inline bool FParams::has_intgf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FParams::set_has_intgf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FParams::clear_has_intgf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FParams::clear_intgf() {
  if (intgf_ != NULL) intgf_->::task_manager::INTGFilter_params::Clear();
  clear_has_intgf();
}
inline const ::task_manager::INTGFilter_params& FParams::intgf() const {
  // @@protoc_insertion_point(field_get:task_manager.FParams.INTGF)
  return intgf_ != NULL ? *intgf_ : *default_instance_->intgf_;
}
inline ::task_manager::INTGFilter_params* FParams::mutable_intgf() {
  set_has_intgf();
  if (intgf_ == NULL) intgf_ = new ::task_manager::INTGFilter_params;
  // @@protoc_insertion_point(field_mutable:task_manager.FParams.INTGF)
  return intgf_;
}
inline ::task_manager::INTGFilter_params* FParams::release_intgf() {
  clear_has_intgf();
  ::task_manager::INTGFilter_params* temp = intgf_;
  intgf_ = NULL;
  return temp;
}
inline void FParams::set_allocated_intgf(::task_manager::INTGFilter_params* intgf) {
  delete intgf_;
  intgf_ = intgf;
  if (intgf) {
    set_has_intgf();
  } else {
    clear_has_intgf();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.FParams.INTGF)
}

// -------------------------------------------------------------------

// TStatRot

// required int32 AvgCnt = 1;
inline bool TStatRot::has_avgcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TStatRot::set_has_avgcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TStatRot::clear_has_avgcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TStatRot::clear_avgcnt() {
  avgcnt_ = 0;
  clear_has_avgcnt();
}
inline ::google::protobuf::int32 TStatRot::avgcnt() const {
  // @@protoc_insertion_point(field_get:task_manager.TStatRot.AvgCnt)
  return avgcnt_;
}
inline void TStatRot::set_avgcnt(::google::protobuf::int32 value) {
  set_has_avgcnt();
  avgcnt_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TStatRot.AvgCnt)
}

// required double Avg = 2;
inline bool TStatRot::has_avg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TStatRot::set_has_avg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TStatRot::clear_has_avg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TStatRot::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
inline double TStatRot::avg() const {
  // @@protoc_insertion_point(field_get:task_manager.TStatRot.Avg)
  return avg_;
}
inline void TStatRot::set_avg(double value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TStatRot.Avg)
}

// required double Min = 3;
inline bool TStatRot::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TStatRot::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TStatRot::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TStatRot::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double TStatRot::min() const {
  // @@protoc_insertion_point(field_get:task_manager.TStatRot.Min)
  return min_;
}
inline void TStatRot::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TStatRot.Min)
}

// required double Max = 4;
inline bool TStatRot::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TStatRot::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TStatRot::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TStatRot::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double TStatRot::max() const {
  // @@protoc_insertion_point(field_get:task_manager.TStatRot.Max)
  return max_;
}
inline void TStatRot::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TStatRot.Max)
}

// -------------------------------------------------------------------

// TOffset

// required int32 Type = 1;
inline bool TOffset::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOffset::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOffset::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOffset::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TOffset::type() const {
  // @@protoc_insertion_point(field_get:task_manager.TOffset.Type)
  return type_;
}
inline void TOffset::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TOffset.Type)
}

// required int64 Value = 2;
inline bool TOffset::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOffset::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOffset::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOffset::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 TOffset::value() const {
  // @@protoc_insertion_point(field_get:task_manager.TOffset.Value)
  return value_;
}
inline void TOffset::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TOffset.Value)
}

// -------------------------------------------------------------------

// TFrotLimits

// required double Frot_min = 1;
inline bool TFrotLimits::has_frot_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFrotLimits::set_has_frot_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFrotLimits::clear_has_frot_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFrotLimits::clear_frot_min() {
  frot_min_ = 0;
  clear_has_frot_min();
}
inline double TFrotLimits::frot_min() const {
  // @@protoc_insertion_point(field_get:task_manager.TFrotLimits.Frot_min)
  return frot_min_;
}
inline void TFrotLimits::set_frot_min(double value) {
  set_has_frot_min();
  frot_min_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TFrotLimits.Frot_min)
}

// required double Frot_max = 2;
inline bool TFrotLimits::has_frot_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFrotLimits::set_has_frot_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFrotLimits::clear_has_frot_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFrotLimits::clear_frot_max() {
  frot_max_ = 0;
  clear_has_frot_max();
}
inline double TFrotLimits::frot_max() const {
  // @@protoc_insertion_point(field_get:task_manager.TFrotLimits.Frot_max)
  return frot_max_;
}
inline void TFrotLimits::set_frot_max(double value) {
  set_has_frot_max();
  frot_max_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TFrotLimits.Frot_max)
}

// required double DeltaFrotOneMeas = 3;
inline bool TFrotLimits::has_deltafrotonemeas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFrotLimits::set_has_deltafrotonemeas() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFrotLimits::clear_has_deltafrotonemeas() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFrotLimits::clear_deltafrotonemeas() {
  deltafrotonemeas_ = 0;
  clear_has_deltafrotonemeas();
}
inline double TFrotLimits::deltafrotonemeas() const {
  // @@protoc_insertion_point(field_get:task_manager.TFrotLimits.DeltaFrotOneMeas)
  return deltafrotonemeas_;
}
inline void TFrotLimits::set_deltafrotonemeas(double value) {
  set_has_deltafrotonemeas();
  deltafrotonemeas_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TFrotLimits.DeltaFrotOneMeas)
}

// required double DeltaFrotAllMeas = 4;
inline bool TFrotLimits::has_deltafrotallmeas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFrotLimits::set_has_deltafrotallmeas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFrotLimits::clear_has_deltafrotallmeas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFrotLimits::clear_deltafrotallmeas() {
  deltafrotallmeas_ = 0;
  clear_has_deltafrotallmeas();
}
inline double TFrotLimits::deltafrotallmeas() const {
  // @@protoc_insertion_point(field_get:task_manager.TFrotLimits.DeltaFrotAllMeas)
  return deltafrotallmeas_;
}
inline void TFrotLimits::set_deltafrotallmeas(double value) {
  set_has_deltafrotallmeas();
  deltafrotallmeas_ = value;
  // @@protoc_insertion_point(field_set:task_manager.TFrotLimits.DeltaFrotAllMeas)
}

// -------------------------------------------------------------------

// RBitem

// required double ValueY = 1;
inline bool RBitem::has_valuey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RBitem::set_has_valuey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RBitem::clear_has_valuey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RBitem::clear_valuey() {
  valuey_ = 0;
  clear_has_valuey();
}
inline double RBitem::valuey() const {
  // @@protoc_insertion_point(field_get:task_manager.RBitem.ValueY)
  return valuey_;
}
inline void RBitem::set_valuey(double value) {
  set_has_valuey();
  valuey_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RBitem.ValueY)
}

// required double ValueX = 2;
inline bool RBitem::has_valuex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RBitem::set_has_valuex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RBitem::clear_has_valuex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RBitem::clear_valuex() {
  valuex_ = 0;
  clear_has_valuex();
}
inline double RBitem::valuex() const {
  // @@protoc_insertion_point(field_get:task_manager.RBitem.ValueX)
  return valuex_;
}
inline void RBitem::set_valuex(double value) {
  set_has_valuex();
  valuex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RBitem.ValueX)
}

// required bool ValidExtern = 3;
inline bool RBitem::has_validextern() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RBitem::set_has_validextern() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RBitem::clear_has_validextern() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RBitem::clear_validextern() {
  validextern_ = false;
  clear_has_validextern();
}
inline bool RBitem::validextern() const {
  // @@protoc_insertion_point(field_get:task_manager.RBitem.ValidExtern)
  return validextern_;
}
inline void RBitem::set_validextern(bool value) {
  set_has_validextern();
  validextern_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RBitem.ValidExtern)
}

// required bool Valid = 4;
inline bool RBitem::has_valid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RBitem::set_has_valid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RBitem::clear_has_valid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RBitem::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool RBitem::valid() const {
  // @@protoc_insertion_point(field_get:task_manager.RBitem.Valid)
  return valid_;
}
inline void RBitem::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RBitem.Valid)
}

// required bool ValidRough = 5;
inline bool RBitem::has_validrough() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RBitem::set_has_validrough() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RBitem::clear_has_validrough() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RBitem::clear_validrough() {
  validrough_ = false;
  clear_has_validrough();
}
inline bool RBitem::validrough() const {
  // @@protoc_insertion_point(field_get:task_manager.RBitem.ValidRough)
  return validrough_;
}
inline void RBitem::set_validrough(bool value) {
  set_has_validrough();
  validrough_ = value;
  // @@protoc_insertion_point(field_set:task_manager.RBitem.ValidRough)
}

// -------------------------------------------------------------------

// Vharmonic_data

// required double amp = 1;
inline bool Vharmonic_data::has_amp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vharmonic_data::set_has_amp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vharmonic_data::clear_has_amp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vharmonic_data::clear_amp() {
  amp_ = 0;
  clear_has_amp();
}
inline double Vharmonic_data::amp() const {
  // @@protoc_insertion_point(field_get:task_manager.Vharmonic_data.amp)
  return amp_;
}
inline void Vharmonic_data::set_amp(double value) {
  set_has_amp();
  amp_ = value;
  // @@protoc_insertion_point(field_set:task_manager.Vharmonic_data.amp)
}

// required double ph = 2;
inline bool Vharmonic_data::has_ph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vharmonic_data::set_has_ph() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vharmonic_data::clear_has_ph() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vharmonic_data::clear_ph() {
  ph_ = 0;
  clear_has_ph();
}
inline double Vharmonic_data::ph() const {
  // @@protoc_insertion_point(field_get:task_manager.Vharmonic_data.ph)
  return ph_;
}
inline void Vharmonic_data::set_ph(double value) {
  set_has_ph();
  ph_ = value;
  // @@protoc_insertion_point(field_set:task_manager.Vharmonic_data.ph)
}

// required double freq = 3;
inline bool Vharmonic_data::has_freq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vharmonic_data::set_has_freq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vharmonic_data::clear_has_freq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vharmonic_data::clear_freq() {
  freq_ = 0;
  clear_has_freq();
}
inline double Vharmonic_data::freq() const {
  // @@protoc_insertion_point(field_get:task_manager.Vharmonic_data.freq)
  return freq_;
}
inline void Vharmonic_data::set_freq(double value) {
  set_has_freq();
  freq_ = value;
  // @@protoc_insertion_point(field_set:task_manager.Vharmonic_data.freq)
}

// required .task_manager.TStatRot StatRot = 4;
inline bool Vharmonic_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vharmonic_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vharmonic_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vharmonic_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& Vharmonic_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.Vharmonic_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* Vharmonic_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.Vharmonic_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* Vharmonic_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void Vharmonic_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.Vharmonic_data.StatRot)
}

// required uint32 AvgCount = 5;
inline bool Vharmonic_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Vharmonic_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Vharmonic_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Vharmonic_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 Vharmonic_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.Vharmonic_data.AvgCount)
  return avgcount_;
}
inline void Vharmonic_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.Vharmonic_data.AvgCount)
}

// -------------------------------------------------------------------

// StatKurtosis_data

// required double min = 1;
inline bool StatKurtosis_data::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatKurtosis_data::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatKurtosis_data::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatKurtosis_data::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double StatKurtosis_data::min() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.min)
  return min_;
}
inline void StatKurtosis_data::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.min)
}

// required double max = 2;
inline bool StatKurtosis_data::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatKurtosis_data::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatKurtosis_data::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatKurtosis_data::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double StatKurtosis_data::max() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.max)
  return max_;
}
inline void StatKurtosis_data::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.max)
}

// required double mean = 3;
inline bool StatKurtosis_data::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatKurtosis_data::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatKurtosis_data::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatKurtosis_data::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double StatKurtosis_data::mean() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.mean)
  return mean_;
}
inline void StatKurtosis_data::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.mean)
}

// required double std = 4;
inline bool StatKurtosis_data::has_std() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatKurtosis_data::set_has_std() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatKurtosis_data::clear_has_std() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatKurtosis_data::clear_std() {
  std_ = 0;
  clear_has_std();
}
inline double StatKurtosis_data::std() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.std)
  return std_;
}
inline void StatKurtosis_data::set_std(double value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.std)
}

// required double kurtosis = 5;
inline bool StatKurtosis_data::has_kurtosis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatKurtosis_data::set_has_kurtosis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatKurtosis_data::clear_has_kurtosis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatKurtosis_data::clear_kurtosis() {
  kurtosis_ = 0;
  clear_has_kurtosis();
}
inline double StatKurtosis_data::kurtosis() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.kurtosis)
  return kurtosis_;
}
inline void StatKurtosis_data::set_kurtosis(double value) {
  set_has_kurtosis();
  kurtosis_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.kurtosis)
}

// required double peak_factor = 6;
inline bool StatKurtosis_data::has_peak_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatKurtosis_data::set_has_peak_factor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatKurtosis_data::clear_has_peak_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatKurtosis_data::clear_peak_factor() {
  peak_factor_ = 0;
  clear_has_peak_factor();
}
inline double StatKurtosis_data::peak_factor() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.peak_factor)
  return peak_factor_;
}
inline void StatKurtosis_data::set_peak_factor(double value) {
  set_has_peak_factor();
  peak_factor_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.peak_factor)
}

// required .task_manager.TStatRot StatRot = 7;
inline bool StatKurtosis_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatKurtosis_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatKurtosis_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatKurtosis_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& StatKurtosis_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* StatKurtosis_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.StatKurtosis_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* StatKurtosis_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void StatKurtosis_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.StatKurtosis_data.StatRot)
}

// required uint32 AvgCount = 8;
inline bool StatKurtosis_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StatKurtosis_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StatKurtosis_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StatKurtosis_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 StatKurtosis_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosis_data.AvgCount)
  return avgcount_;
}
inline void StatKurtosis_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosis_data.AvgCount)
}

// -------------------------------------------------------------------

// StatTimeSig_data

// required double min = 1;
inline bool StatTimeSig_data::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatTimeSig_data::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatTimeSig_data::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatTimeSig_data::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double StatTimeSig_data::min() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.min)
  return min_;
}
inline void StatTimeSig_data::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.min)
}

// required double max = 2;
inline bool StatTimeSig_data::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatTimeSig_data::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatTimeSig_data::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatTimeSig_data::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double StatTimeSig_data::max() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.max)
  return max_;
}
inline void StatTimeSig_data::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.max)
}

// required double mean = 3;
inline bool StatTimeSig_data::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatTimeSig_data::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatTimeSig_data::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatTimeSig_data::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double StatTimeSig_data::mean() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.mean)
  return mean_;
}
inline void StatTimeSig_data::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.mean)
}

// required double std = 4;
inline bool StatTimeSig_data::has_std() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatTimeSig_data::set_has_std() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatTimeSig_data::clear_has_std() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatTimeSig_data::clear_std() {
  std_ = 0;
  clear_has_std();
}
inline double StatTimeSig_data::std() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.std)
  return std_;
}
inline void StatTimeSig_data::set_std(double value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.std)
}

// required double kurtosis = 5;
inline bool StatTimeSig_data::has_kurtosis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatTimeSig_data::set_has_kurtosis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatTimeSig_data::clear_has_kurtosis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatTimeSig_data::clear_kurtosis() {
  kurtosis_ = 0;
  clear_has_kurtosis();
}
inline double StatTimeSig_data::kurtosis() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.kurtosis)
  return kurtosis_;
}
inline void StatTimeSig_data::set_kurtosis(double value) {
  set_has_kurtosis();
  kurtosis_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.kurtosis)
}

// required double peak_factor = 6;
inline bool StatTimeSig_data::has_peak_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatTimeSig_data::set_has_peak_factor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatTimeSig_data::clear_has_peak_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatTimeSig_data::clear_peak_factor() {
  peak_factor_ = 0;
  clear_has_peak_factor();
}
inline double StatTimeSig_data::peak_factor() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.peak_factor)
  return peak_factor_;
}
inline void StatTimeSig_data::set_peak_factor(double value) {
  set_has_peak_factor();
  peak_factor_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.peak_factor)
}

// required .task_manager.TStatRot StatRot = 7;
inline bool StatTimeSig_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatTimeSig_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatTimeSig_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatTimeSig_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& StatTimeSig_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* StatTimeSig_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.StatTimeSig_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* StatTimeSig_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void StatTimeSig_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.StatTimeSig_data.StatRot)
}

// required uint32 AvgCount = 8;
inline bool StatTimeSig_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StatTimeSig_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StatTimeSig_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StatTimeSig_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 StatTimeSig_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSig_data.AvgCount)
  return avgcount_;
}
inline void StatTimeSig_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSig_data.AvgCount)
}

// -------------------------------------------------------------------

// QualityTimeSig_data

// required bool SigOverFlow = 1;
inline bool QualityTimeSig_data::has_sigoverflow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QualityTimeSig_data::set_has_sigoverflow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QualityTimeSig_data::clear_has_sigoverflow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QualityTimeSig_data::clear_sigoverflow() {
  sigoverflow_ = false;
  clear_has_sigoverflow();
}
inline bool QualityTimeSig_data::sigoverflow() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.SigOverFlow)
  return sigoverflow_;
}
inline void QualityTimeSig_data::set_sigoverflow(bool value) {
  set_has_sigoverflow();
  sigoverflow_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.SigOverFlow)
}

// required bool SigTooLow = 2;
inline bool QualityTimeSig_data::has_sigtoolow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QualityTimeSig_data::set_has_sigtoolow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QualityTimeSig_data::clear_has_sigtoolow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QualityTimeSig_data::clear_sigtoolow() {
  sigtoolow_ = false;
  clear_has_sigtoolow();
}
inline bool QualityTimeSig_data::sigtoolow() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.SigTooLow)
  return sigtoolow_;
}
inline void QualityTimeSig_data::set_sigtoolow(bool value) {
  set_has_sigtoolow();
  sigtoolow_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.SigTooLow)
}

// required bool SigTooHigh = 3;
inline bool QualityTimeSig_data::has_sigtoohigh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QualityTimeSig_data::set_has_sigtoohigh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QualityTimeSig_data::clear_has_sigtoohigh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QualityTimeSig_data::clear_sigtoohigh() {
  sigtoohigh_ = false;
  clear_has_sigtoohigh();
}
inline bool QualityTimeSig_data::sigtoohigh() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.SigTooHigh)
  return sigtoohigh_;
}
inline void QualityTimeSig_data::set_sigtoohigh(bool value) {
  set_has_sigtoohigh();
  sigtoohigh_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.SigTooHigh)
}

// required double AmpPeakToPeakCalc = 4;
inline bool QualityTimeSig_data::has_amppeaktopeakcalc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QualityTimeSig_data::set_has_amppeaktopeakcalc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QualityTimeSig_data::clear_has_amppeaktopeakcalc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QualityTimeSig_data::clear_amppeaktopeakcalc() {
  amppeaktopeakcalc_ = 0;
  clear_has_amppeaktopeakcalc();
}
inline double QualityTimeSig_data::amppeaktopeakcalc() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.AmpPeakToPeakCalc)
  return amppeaktopeakcalc_;
}
inline void QualityTimeSig_data::set_amppeaktopeakcalc(double value) {
  set_has_amppeaktopeakcalc();
  amppeaktopeakcalc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.AmpPeakToPeakCalc)
}

// required double AmpStdCalc = 5;
inline bool QualityTimeSig_data::has_ampstdcalc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QualityTimeSig_data::set_has_ampstdcalc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QualityTimeSig_data::clear_has_ampstdcalc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QualityTimeSig_data::clear_ampstdcalc() {
  ampstdcalc_ = 0;
  clear_has_ampstdcalc();
}
inline double QualityTimeSig_data::ampstdcalc() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.AmpStdCalc)
  return ampstdcalc_;
}
inline void QualityTimeSig_data::set_ampstdcalc(double value) {
  set_has_ampstdcalc();
  ampstdcalc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.AmpStdCalc)
}

// required int32 SigOverFlowCount = 6;
inline bool QualityTimeSig_data::has_sigoverflowcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QualityTimeSig_data::set_has_sigoverflowcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QualityTimeSig_data::clear_has_sigoverflowcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QualityTimeSig_data::clear_sigoverflowcount() {
  sigoverflowcount_ = 0;
  clear_has_sigoverflowcount();
}
inline ::google::protobuf::int32 QualityTimeSig_data::sigoverflowcount() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.SigOverFlowCount)
  return sigoverflowcount_;
}
inline void QualityTimeSig_data::set_sigoverflowcount(::google::protobuf::int32 value) {
  set_has_sigoverflowcount();
  sigoverflowcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.SigOverFlowCount)
}

// required .task_manager.TStatRot StatRot = 7;
inline bool QualityTimeSig_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QualityTimeSig_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QualityTimeSig_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QualityTimeSig_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& QualityTimeSig_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* QualityTimeSig_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.QualityTimeSig_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* QualityTimeSig_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void QualityTimeSig_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.QualityTimeSig_data.StatRot)
}

// required uint32 AvgCount = 8;
inline bool QualityTimeSig_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QualityTimeSig_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QualityTimeSig_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QualityTimeSig_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 QualityTimeSig_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSig_data.AvgCount)
  return avgcount_;
}
inline void QualityTimeSig_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSig_data.AvgCount)
}

// -------------------------------------------------------------------

// SaveTimeSig_data

// required .task_manager.TStatRot StatRot = 1;
inline bool SaveTimeSig_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveTimeSig_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveTimeSig_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveTimeSig_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& SaveTimeSig_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSig_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* SaveTimeSig_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.SaveTimeSig_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* SaveTimeSig_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void SaveTimeSig_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.SaveTimeSig_data.StatRot)
}

// required uint32 AvgCount = 2;
inline bool SaveTimeSig_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveTimeSig_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveTimeSig_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveTimeSig_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 SaveTimeSig_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSig_data.AvgCount)
  return avgcount_;
}
inline void SaveTimeSig_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SaveTimeSig_data.AvgCount)
}

// -------------------------------------------------------------------

// VsensorFrot_data

// required .task_manager.RBitem Frot = 1;
inline bool VsensorFrot_data::has_frot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VsensorFrot_data::set_has_frot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VsensorFrot_data::clear_has_frot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VsensorFrot_data::clear_frot() {
  if (frot_ != NULL) frot_->::task_manager::RBitem::Clear();
  clear_has_frot();
}
inline const ::task_manager::RBitem& VsensorFrot_data::frot() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrot_data.Frot)
  return frot_ != NULL ? *frot_ : *default_instance_->frot_;
}
inline ::task_manager::RBitem* VsensorFrot_data::mutable_frot() {
  set_has_frot();
  if (frot_ == NULL) frot_ = new ::task_manager::RBitem;
  // @@protoc_insertion_point(field_mutable:task_manager.VsensorFrot_data.Frot)
  return frot_;
}
inline ::task_manager::RBitem* VsensorFrot_data::release_frot() {
  clear_has_frot();
  ::task_manager::RBitem* temp = frot_;
  frot_ = NULL;
  return temp;
}
inline void VsensorFrot_data::set_allocated_frot(::task_manager::RBitem* frot) {
  delete frot_;
  frot_ = frot;
  if (frot) {
    set_has_frot();
  } else {
    clear_has_frot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VsensorFrot_data.Frot)
}

// required .task_manager.TStatRot StatRot = 2;
inline bool VsensorFrot_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VsensorFrot_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VsensorFrot_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VsensorFrot_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& VsensorFrot_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrot_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* VsensorFrot_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.VsensorFrot_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* VsensorFrot_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void VsensorFrot_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VsensorFrot_data.StatRot)
}

// required uint32 AvgCount = 3;
inline bool VsensorFrot_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VsensorFrot_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VsensorFrot_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VsensorFrot_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 VsensorFrot_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrot_data.AvgCount)
  return avgcount_;
}
inline void VsensorFrot_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrot_data.AvgCount)
}

// -------------------------------------------------------------------

// DecimTimeSig_data

// required .task_manager.TStatRot StatRot = 1;
inline bool DecimTimeSig_data::has_statrot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecimTimeSig_data::set_has_statrot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecimTimeSig_data::clear_has_statrot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecimTimeSig_data::clear_statrot() {
  if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
  clear_has_statrot();
}
inline const ::task_manager::TStatRot& DecimTimeSig_data::statrot() const {
  // @@protoc_insertion_point(field_get:task_manager.DecimTimeSig_data.StatRot)
  return statrot_ != NULL ? *statrot_ : *default_instance_->statrot_;
}
inline ::task_manager::TStatRot* DecimTimeSig_data::mutable_statrot() {
  set_has_statrot();
  if (statrot_ == NULL) statrot_ = new ::task_manager::TStatRot;
  // @@protoc_insertion_point(field_mutable:task_manager.DecimTimeSig_data.StatRot)
  return statrot_;
}
inline ::task_manager::TStatRot* DecimTimeSig_data::release_statrot() {
  clear_has_statrot();
  ::task_manager::TStatRot* temp = statrot_;
  statrot_ = NULL;
  return temp;
}
inline void DecimTimeSig_data::set_allocated_statrot(::task_manager::TStatRot* statrot) {
  delete statrot_;
  statrot_ = statrot;
  if (statrot) {
    set_has_statrot();
  } else {
    clear_has_statrot();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.DecimTimeSig_data.StatRot)
}

// required uint32 AvgCount = 2;
inline bool DecimTimeSig_data::has_avgcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecimTimeSig_data::set_has_avgcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecimTimeSig_data::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecimTimeSig_data::clear_avgcount() {
  avgcount_ = 0u;
  clear_has_avgcount();
}
inline ::google::protobuf::uint32 DecimTimeSig_data::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.DecimTimeSig_data.AvgCount)
  return avgcount_;
}
inline void DecimTimeSig_data::set_avgcount(::google::protobuf::uint32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DecimTimeSig_data.AvgCount)
}

// -------------------------------------------------------------------

// AnyTaskResult

// required int32 error_code = 1;
inline bool AnyTaskResult::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnyTaskResult::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnyTaskResult::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnyTaskResult::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AnyTaskResult::error_code() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.error_code)
  return error_code_;
}
inline void AnyTaskResult::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:task_manager.AnyTaskResult.error_code)
}

// optional .task_manager.Vharmonic_data harmonic_res = 2;
inline bool AnyTaskResult::has_harmonic_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnyTaskResult::set_has_harmonic_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnyTaskResult::clear_has_harmonic_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnyTaskResult::clear_harmonic_res() {
  if (harmonic_res_ != NULL) harmonic_res_->::task_manager::Vharmonic_data::Clear();
  clear_has_harmonic_res();
}
inline const ::task_manager::Vharmonic_data& AnyTaskResult::harmonic_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.harmonic_res)
  return harmonic_res_ != NULL ? *harmonic_res_ : *default_instance_->harmonic_res_;
}
inline ::task_manager::Vharmonic_data* AnyTaskResult::mutable_harmonic_res() {
  set_has_harmonic_res();
  if (harmonic_res_ == NULL) harmonic_res_ = new ::task_manager::Vharmonic_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.harmonic_res)
  return harmonic_res_;
}
inline ::task_manager::Vharmonic_data* AnyTaskResult::release_harmonic_res() {
  clear_has_harmonic_res();
  ::task_manager::Vharmonic_data* temp = harmonic_res_;
  harmonic_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_harmonic_res(::task_manager::Vharmonic_data* harmonic_res) {
  delete harmonic_res_;
  harmonic_res_ = harmonic_res;
  if (harmonic_res) {
    set_has_harmonic_res();
  } else {
    clear_has_harmonic_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.harmonic_res)
}

// optional .task_manager.StatKurtosis_data kurtosis_res = 3;
inline bool AnyTaskResult::has_kurtosis_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnyTaskResult::set_has_kurtosis_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnyTaskResult::clear_has_kurtosis_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnyTaskResult::clear_kurtosis_res() {
  if (kurtosis_res_ != NULL) kurtosis_res_->::task_manager::StatKurtosis_data::Clear();
  clear_has_kurtosis_res();
}
inline const ::task_manager::StatKurtosis_data& AnyTaskResult::kurtosis_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.kurtosis_res)
  return kurtosis_res_ != NULL ? *kurtosis_res_ : *default_instance_->kurtosis_res_;
}
inline ::task_manager::StatKurtosis_data* AnyTaskResult::mutable_kurtosis_res() {
  set_has_kurtosis_res();
  if (kurtosis_res_ == NULL) kurtosis_res_ = new ::task_manager::StatKurtosis_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.kurtosis_res)
  return kurtosis_res_;
}
inline ::task_manager::StatKurtosis_data* AnyTaskResult::release_kurtosis_res() {
  clear_has_kurtosis_res();
  ::task_manager::StatKurtosis_data* temp = kurtosis_res_;
  kurtosis_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_kurtosis_res(::task_manager::StatKurtosis_data* kurtosis_res) {
  delete kurtosis_res_;
  kurtosis_res_ = kurtosis_res;
  if (kurtosis_res) {
    set_has_kurtosis_res();
  } else {
    clear_has_kurtosis_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.kurtosis_res)
}

// optional .task_manager.StatTimeSig_data stattimesig_res = 4;
inline bool AnyTaskResult::has_stattimesig_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnyTaskResult::set_has_stattimesig_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnyTaskResult::clear_has_stattimesig_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnyTaskResult::clear_stattimesig_res() {
  if (stattimesig_res_ != NULL) stattimesig_res_->::task_manager::StatTimeSig_data::Clear();
  clear_has_stattimesig_res();
}
inline const ::task_manager::StatTimeSig_data& AnyTaskResult::stattimesig_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.stattimesig_res)
  return stattimesig_res_ != NULL ? *stattimesig_res_ : *default_instance_->stattimesig_res_;
}
inline ::task_manager::StatTimeSig_data* AnyTaskResult::mutable_stattimesig_res() {
  set_has_stattimesig_res();
  if (stattimesig_res_ == NULL) stattimesig_res_ = new ::task_manager::StatTimeSig_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.stattimesig_res)
  return stattimesig_res_;
}
inline ::task_manager::StatTimeSig_data* AnyTaskResult::release_stattimesig_res() {
  clear_has_stattimesig_res();
  ::task_manager::StatTimeSig_data* temp = stattimesig_res_;
  stattimesig_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_stattimesig_res(::task_manager::StatTimeSig_data* stattimesig_res) {
  delete stattimesig_res_;
  stattimesig_res_ = stattimesig_res;
  if (stattimesig_res) {
    set_has_stattimesig_res();
  } else {
    clear_has_stattimesig_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.stattimesig_res)
}

// optional .task_manager.QualityTimeSig_data quality_res = 5;
inline bool AnyTaskResult::has_quality_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnyTaskResult::set_has_quality_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnyTaskResult::clear_has_quality_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnyTaskResult::clear_quality_res() {
  if (quality_res_ != NULL) quality_res_->::task_manager::QualityTimeSig_data::Clear();
  clear_has_quality_res();
}
inline const ::task_manager::QualityTimeSig_data& AnyTaskResult::quality_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.quality_res)
  return quality_res_ != NULL ? *quality_res_ : *default_instance_->quality_res_;
}
inline ::task_manager::QualityTimeSig_data* AnyTaskResult::mutable_quality_res() {
  set_has_quality_res();
  if (quality_res_ == NULL) quality_res_ = new ::task_manager::QualityTimeSig_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.quality_res)
  return quality_res_;
}
inline ::task_manager::QualityTimeSig_data* AnyTaskResult::release_quality_res() {
  clear_has_quality_res();
  ::task_manager::QualityTimeSig_data* temp = quality_res_;
  quality_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_quality_res(::task_manager::QualityTimeSig_data* quality_res) {
  delete quality_res_;
  quality_res_ = quality_res;
  if (quality_res) {
    set_has_quality_res();
  } else {
    clear_has_quality_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.quality_res)
}

// optional .task_manager.SaveTimeSig_data savetimesig_res = 6;
inline bool AnyTaskResult::has_savetimesig_res() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnyTaskResult::set_has_savetimesig_res() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnyTaskResult::clear_has_savetimesig_res() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnyTaskResult::clear_savetimesig_res() {
  if (savetimesig_res_ != NULL) savetimesig_res_->::task_manager::SaveTimeSig_data::Clear();
  clear_has_savetimesig_res();
}
inline const ::task_manager::SaveTimeSig_data& AnyTaskResult::savetimesig_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.savetimesig_res)
  return savetimesig_res_ != NULL ? *savetimesig_res_ : *default_instance_->savetimesig_res_;
}
inline ::task_manager::SaveTimeSig_data* AnyTaskResult::mutable_savetimesig_res() {
  set_has_savetimesig_res();
  if (savetimesig_res_ == NULL) savetimesig_res_ = new ::task_manager::SaveTimeSig_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.savetimesig_res)
  return savetimesig_res_;
}
inline ::task_manager::SaveTimeSig_data* AnyTaskResult::release_savetimesig_res() {
  clear_has_savetimesig_res();
  ::task_manager::SaveTimeSig_data* temp = savetimesig_res_;
  savetimesig_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_savetimesig_res(::task_manager::SaveTimeSig_data* savetimesig_res) {
  delete savetimesig_res_;
  savetimesig_res_ = savetimesig_res;
  if (savetimesig_res) {
    set_has_savetimesig_res();
  } else {
    clear_has_savetimesig_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.savetimesig_res)
}

// optional .task_manager.VsensorFrot_data vsensorfrot_res = 7;
inline bool AnyTaskResult::has_vsensorfrot_res() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnyTaskResult::set_has_vsensorfrot_res() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnyTaskResult::clear_has_vsensorfrot_res() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnyTaskResult::clear_vsensorfrot_res() {
  if (vsensorfrot_res_ != NULL) vsensorfrot_res_->::task_manager::VsensorFrot_data::Clear();
  clear_has_vsensorfrot_res();
}
inline const ::task_manager::VsensorFrot_data& AnyTaskResult::vsensorfrot_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.vsensorfrot_res)
  return vsensorfrot_res_ != NULL ? *vsensorfrot_res_ : *default_instance_->vsensorfrot_res_;
}
inline ::task_manager::VsensorFrot_data* AnyTaskResult::mutable_vsensorfrot_res() {
  set_has_vsensorfrot_res();
  if (vsensorfrot_res_ == NULL) vsensorfrot_res_ = new ::task_manager::VsensorFrot_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.vsensorfrot_res)
  return vsensorfrot_res_;
}
inline ::task_manager::VsensorFrot_data* AnyTaskResult::release_vsensorfrot_res() {
  clear_has_vsensorfrot_res();
  ::task_manager::VsensorFrot_data* temp = vsensorfrot_res_;
  vsensorfrot_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_vsensorfrot_res(::task_manager::VsensorFrot_data* vsensorfrot_res) {
  delete vsensorfrot_res_;
  vsensorfrot_res_ = vsensorfrot_res;
  if (vsensorfrot_res) {
    set_has_vsensorfrot_res();
  } else {
    clear_has_vsensorfrot_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.vsensorfrot_res)
}

// optional .task_manager.DecimTimeSig_data decim_res = 8;
inline bool AnyTaskResult::has_decim_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AnyTaskResult::set_has_decim_res() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AnyTaskResult::clear_has_decim_res() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AnyTaskResult::clear_decim_res() {
  if (decim_res_ != NULL) decim_res_->::task_manager::DecimTimeSig_data::Clear();
  clear_has_decim_res();
}
inline const ::task_manager::DecimTimeSig_data& AnyTaskResult::decim_res() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskResult.decim_res)
  return decim_res_ != NULL ? *decim_res_ : *default_instance_->decim_res_;
}
inline ::task_manager::DecimTimeSig_data* AnyTaskResult::mutable_decim_res() {
  set_has_decim_res();
  if (decim_res_ == NULL) decim_res_ = new ::task_manager::DecimTimeSig_data;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskResult.decim_res)
  return decim_res_;
}
inline ::task_manager::DecimTimeSig_data* AnyTaskResult::release_decim_res() {
  clear_has_decim_res();
  ::task_manager::DecimTimeSig_data* temp = decim_res_;
  decim_res_ = NULL;
  return temp;
}
inline void AnyTaskResult::set_allocated_decim_res(::task_manager::DecimTimeSig_data* decim_res) {
  delete decim_res_;
  decim_res_ = decim_res;
  if (decim_res) {
    set_has_decim_res();
  } else {
    clear_has_decim_res();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskResult.decim_res)
}

// -------------------------------------------------------------------

// CommonTaskParams

// required .task_manager.TOffset OffSet = 1;
inline bool CommonTaskParams::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonTaskParams::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonTaskParams::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonTaskParams::clear_offset() {
  if (offset_ != NULL) offset_->::task_manager::TOffset::Clear();
  clear_has_offset();
}
inline const ::task_manager::TOffset& CommonTaskParams::offset() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.OffSet)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
inline ::task_manager::TOffset* CommonTaskParams::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) offset_ = new ::task_manager::TOffset;
  // @@protoc_insertion_point(field_mutable:task_manager.CommonTaskParams.OffSet)
  return offset_;
}
inline ::task_manager::TOffset* CommonTaskParams::release_offset() {
  clear_has_offset();
  ::task_manager::TOffset* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline void CommonTaskParams::set_allocated_offset(::task_manager::TOffset* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    set_has_offset();
  } else {
    clear_has_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.CommonTaskParams.OffSet)
}

// required .task_manager.TOffset DeltaOffSet = 2;
inline bool CommonTaskParams::has_deltaoffset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonTaskParams::set_has_deltaoffset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonTaskParams::clear_has_deltaoffset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonTaskParams::clear_deltaoffset() {
  if (deltaoffset_ != NULL) deltaoffset_->::task_manager::TOffset::Clear();
  clear_has_deltaoffset();
}
inline const ::task_manager::TOffset& CommonTaskParams::deltaoffset() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.DeltaOffSet)
  return deltaoffset_ != NULL ? *deltaoffset_ : *default_instance_->deltaoffset_;
}
inline ::task_manager::TOffset* CommonTaskParams::mutable_deltaoffset() {
  set_has_deltaoffset();
  if (deltaoffset_ == NULL) deltaoffset_ = new ::task_manager::TOffset;
  // @@protoc_insertion_point(field_mutable:task_manager.CommonTaskParams.DeltaOffSet)
  return deltaoffset_;
}
inline ::task_manager::TOffset* CommonTaskParams::release_deltaoffset() {
  clear_has_deltaoffset();
  ::task_manager::TOffset* temp = deltaoffset_;
  deltaoffset_ = NULL;
  return temp;
}
inline void CommonTaskParams::set_allocated_deltaoffset(::task_manager::TOffset* deltaoffset) {
  delete deltaoffset_;
  deltaoffset_ = deltaoffset;
  if (deltaoffset) {
    set_has_deltaoffset();
  } else {
    clear_has_deltaoffset();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.CommonTaskParams.DeltaOffSet)
}

// required bool Monitoring = 3;
inline bool CommonTaskParams::has_monitoring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonTaskParams::set_has_monitoring() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonTaskParams::clear_has_monitoring() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonTaskParams::clear_monitoring() {
  monitoring_ = false;
  clear_has_monitoring();
}
inline bool CommonTaskParams::monitoring() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.Monitoring)
  return monitoring_;
}
inline void CommonTaskParams::set_monitoring(bool value) {
  set_has_monitoring();
  monitoring_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.Monitoring)
}

// required int32 TimesigType = 4;
inline bool CommonTaskParams::has_timesigtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonTaskParams::set_has_timesigtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonTaskParams::clear_has_timesigtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonTaskParams::clear_timesigtype() {
  timesigtype_ = 0;
  clear_has_timesigtype();
}
inline ::google::protobuf::int32 CommonTaskParams::timesigtype() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.TimesigType)
  return timesigtype_;
}
inline void CommonTaskParams::set_timesigtype(::google::protobuf::int32 value) {
  set_has_timesigtype();
  timesigtype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.TimesigType)
}

// required int32 LPFilterIndex = 5;
inline bool CommonTaskParams::has_lpfilterindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonTaskParams::set_has_lpfilterindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonTaskParams::clear_has_lpfilterindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonTaskParams::clear_lpfilterindex() {
  lpfilterindex_ = 0;
  clear_has_lpfilterindex();
}
inline ::google::protobuf::int32 CommonTaskParams::lpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.LPFilterIndex)
  return lpfilterindex_;
}
inline void CommonTaskParams::set_lpfilterindex(::google::protobuf::int32 value) {
  set_has_lpfilterindex();
  lpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.LPFilterIndex)
}

// required uint32 LPFilterDecim = 6;
inline bool CommonTaskParams::has_lpfilterdecim() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonTaskParams::set_has_lpfilterdecim() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonTaskParams::clear_has_lpfilterdecim() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonTaskParams::clear_lpfilterdecim() {
  lpfilterdecim_ = 0u;
  clear_has_lpfilterdecim();
}
inline ::google::protobuf::uint32 CommonTaskParams::lpfilterdecim() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.LPFilterDecim)
  return lpfilterdecim_;
}
inline void CommonTaskParams::set_lpfilterdecim(::google::protobuf::uint32 value) {
  set_has_lpfilterdecim();
  lpfilterdecim_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.LPFilterDecim)
}

// required int32 LPFilterType = 7;
inline bool CommonTaskParams::has_lpfiltertype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonTaskParams::set_has_lpfiltertype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonTaskParams::clear_has_lpfiltertype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonTaskParams::clear_lpfiltertype() {
  lpfiltertype_ = 0;
  clear_has_lpfiltertype();
}
inline ::google::protobuf::int32 CommonTaskParams::lpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.LPFilterType)
  return lpfiltertype_;
}
inline void CommonTaskParams::set_lpfiltertype(::google::protobuf::int32 value) {
  set_has_lpfiltertype();
  lpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.LPFilterType)
}

// required bool LPFilterUsualW = 8;
inline bool CommonTaskParams::has_lpfilterusualw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonTaskParams::set_has_lpfilterusualw() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonTaskParams::clear_has_lpfilterusualw() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonTaskParams::clear_lpfilterusualw() {
  lpfilterusualw_ = false;
  clear_has_lpfilterusualw();
}
inline bool CommonTaskParams::lpfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.LPFilterUsualW)
  return lpfilterusualw_;
}
inline void CommonTaskParams::set_lpfilterusualw(bool value) {
  set_has_lpfilterusualw();
  lpfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.LPFilterUsualW)
}

// required int32 BPFilterIndex = 9;
inline bool CommonTaskParams::has_bpfilterindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonTaskParams::set_has_bpfilterindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonTaskParams::clear_has_bpfilterindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonTaskParams::clear_bpfilterindex() {
  bpfilterindex_ = 0;
  clear_has_bpfilterindex();
}
inline ::google::protobuf::int32 CommonTaskParams::bpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.BPFilterIndex)
  return bpfilterindex_;
}
inline void CommonTaskParams::set_bpfilterindex(::google::protobuf::int32 value) {
  set_has_bpfilterindex();
  bpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.BPFilterIndex)
}

// required int32 BPFilterType = 10;
inline bool CommonTaskParams::has_bpfiltertype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommonTaskParams::set_has_bpfiltertype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommonTaskParams::clear_has_bpfiltertype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommonTaskParams::clear_bpfiltertype() {
  bpfiltertype_ = 0;
  clear_has_bpfiltertype();
}
inline ::google::protobuf::int32 CommonTaskParams::bpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.BPFilterType)
  return bpfiltertype_;
}
inline void CommonTaskParams::set_bpfiltertype(::google::protobuf::int32 value) {
  set_has_bpfiltertype();
  bpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.BPFilterType)
}

// required bool BPFilterUsualW = 11;
inline bool CommonTaskParams::has_bpfilterusualw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CommonTaskParams::set_has_bpfilterusualw() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CommonTaskParams::clear_has_bpfilterusualw() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CommonTaskParams::clear_bpfilterusualw() {
  bpfilterusualw_ = false;
  clear_has_bpfilterusualw();
}
inline bool CommonTaskParams::bpfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.BPFilterUsualW)
  return bpfilterusualw_;
}
inline void CommonTaskParams::set_bpfilterusualw(bool value) {
  set_has_bpfilterusualw();
  bpfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.BPFilterUsualW)
}

// required int32 RSMPFilterIndex = 12;
inline bool CommonTaskParams::has_rsmpfilterindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CommonTaskParams::set_has_rsmpfilterindex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CommonTaskParams::clear_has_rsmpfilterindex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CommonTaskParams::clear_rsmpfilterindex() {
  rsmpfilterindex_ = 0;
  clear_has_rsmpfilterindex();
}
inline ::google::protobuf::int32 CommonTaskParams::rsmpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.RSMPFilterIndex)
  return rsmpfilterindex_;
}
inline void CommonTaskParams::set_rsmpfilterindex(::google::protobuf::int32 value) {
  set_has_rsmpfilterindex();
  rsmpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.RSMPFilterIndex)
}

// required int32 RSMPFilterType = 13;
inline bool CommonTaskParams::has_rsmpfiltertype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CommonTaskParams::set_has_rsmpfiltertype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CommonTaskParams::clear_has_rsmpfiltertype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CommonTaskParams::clear_rsmpfiltertype() {
  rsmpfiltertype_ = 0;
  clear_has_rsmpfiltertype();
}
inline ::google::protobuf::int32 CommonTaskParams::rsmpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.RSMPFilterType)
  return rsmpfiltertype_;
}
inline void CommonTaskParams::set_rsmpfiltertype(::google::protobuf::int32 value) {
  set_has_rsmpfiltertype();
  rsmpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.RSMPFilterType)
}

// required bool RSMPFilterUsualW = 14;
inline bool CommonTaskParams::has_rsmpfilterusualw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CommonTaskParams::set_has_rsmpfilterusualw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CommonTaskParams::clear_has_rsmpfilterusualw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CommonTaskParams::clear_rsmpfilterusualw() {
  rsmpfilterusualw_ = false;
  clear_has_rsmpfilterusualw();
}
inline bool CommonTaskParams::rsmpfilterusualw() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.RSMPFilterUsualW)
  return rsmpfilterusualw_;
}
inline void CommonTaskParams::set_rsmpfilterusualw(bool value) {
  set_has_rsmpfilterusualw();
  rsmpfilterusualw_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.RSMPFilterUsualW)
}

// required int32 HPFilterIndex = 15;
inline bool CommonTaskParams::has_hpfilterindex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CommonTaskParams::set_has_hpfilterindex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CommonTaskParams::clear_has_hpfilterindex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CommonTaskParams::clear_hpfilterindex() {
  hpfilterindex_ = 0;
  clear_has_hpfilterindex();
}
inline ::google::protobuf::int32 CommonTaskParams::hpfilterindex() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.HPFilterIndex)
  return hpfilterindex_;
}
inline void CommonTaskParams::set_hpfilterindex(::google::protobuf::int32 value) {
  set_has_hpfilterindex();
  hpfilterindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.HPFilterIndex)
}

// required int32 HPFilterType = 16;
inline bool CommonTaskParams::has_hpfiltertype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CommonTaskParams::set_has_hpfiltertype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CommonTaskParams::clear_has_hpfiltertype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CommonTaskParams::clear_hpfiltertype() {
  hpfiltertype_ = 0;
  clear_has_hpfiltertype();
}
inline ::google::protobuf::int32 CommonTaskParams::hpfiltertype() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.HPFilterType)
  return hpfiltertype_;
}
inline void CommonTaskParams::set_hpfiltertype(::google::protobuf::int32 value) {
  set_has_hpfiltertype();
  hpfiltertype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.HPFilterType)
}

// required double HPFilterParam1 = 17;
inline bool CommonTaskParams::has_hpfilterparam1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CommonTaskParams::set_has_hpfilterparam1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CommonTaskParams::clear_has_hpfilterparam1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CommonTaskParams::clear_hpfilterparam1() {
  hpfilterparam1_ = 0;
  clear_has_hpfilterparam1();
}
inline double CommonTaskParams::hpfilterparam1() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.HPFilterParam1)
  return hpfilterparam1_;
}
inline void CommonTaskParams::set_hpfilterparam1(double value) {
  set_has_hpfilterparam1();
  hpfilterparam1_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.HPFilterParam1)
}

// repeated .task_manager.FParams FParamsList = 18;
inline int CommonTaskParams::fparamslist_size() const {
  return fparamslist_.size();
}
inline void CommonTaskParams::clear_fparamslist() {
  fparamslist_.Clear();
}
inline const ::task_manager::FParams& CommonTaskParams::fparamslist(int index) const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.FParamsList)
  return fparamslist_.Get(index);
}
inline ::task_manager::FParams* CommonTaskParams::mutable_fparamslist(int index) {
  // @@protoc_insertion_point(field_mutable:task_manager.CommonTaskParams.FParamsList)
  return fparamslist_.Mutable(index);
}
inline ::task_manager::FParams* CommonTaskParams::add_fparamslist() {
  // @@protoc_insertion_point(field_add:task_manager.CommonTaskParams.FParamsList)
  return fparamslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::task_manager::FParams >&
CommonTaskParams::fparamslist() const {
  // @@protoc_insertion_point(field_list:task_manager.CommonTaskParams.FParamsList)
  return fparamslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::task_manager::FParams >*
CommonTaskParams::mutable_fparamslist() {
  // @@protoc_insertion_point(field_mutable_list:task_manager.CommonTaskParams.FParamsList)
  return &fparamslist_;
}

// required int32 FParamsCount = 19;
inline bool CommonTaskParams::has_fparamscount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CommonTaskParams::set_has_fparamscount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CommonTaskParams::clear_has_fparamscount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CommonTaskParams::clear_fparamscount() {
  fparamscount_ = 0;
  clear_has_fparamscount();
}
inline ::google::protobuf::int32 CommonTaskParams::fparamscount() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.FParamsCount)
  return fparamscount_;
}
inline void CommonTaskParams::set_fparamscount(::google::protobuf::int32 value) {
  set_has_fparamscount();
  fparamscount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.FParamsCount)
}

// required int32 AvgCount = 20;
inline bool CommonTaskParams::has_avgcount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CommonTaskParams::set_has_avgcount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CommonTaskParams::clear_has_avgcount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CommonTaskParams::clear_avgcount() {
  avgcount_ = 0;
  clear_has_avgcount();
}
inline ::google::protobuf::int32 CommonTaskParams::avgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.AvgCount)
  return avgcount_;
}
inline void CommonTaskParams::set_avgcount(::google::protobuf::int32 value) {
  set_has_avgcount();
  avgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.AvgCount)
}

// required .task_manager.TFrotLimits FrotLimits = 21;
inline bool CommonTaskParams::has_frotlimits() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CommonTaskParams::set_has_frotlimits() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CommonTaskParams::clear_has_frotlimits() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CommonTaskParams::clear_frotlimits() {
  if (frotlimits_ != NULL) frotlimits_->::task_manager::TFrotLimits::Clear();
  clear_has_frotlimits();
}
inline const ::task_manager::TFrotLimits& CommonTaskParams::frotlimits() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.FrotLimits)
  return frotlimits_ != NULL ? *frotlimits_ : *default_instance_->frotlimits_;
}
inline ::task_manager::TFrotLimits* CommonTaskParams::mutable_frotlimits() {
  set_has_frotlimits();
  if (frotlimits_ == NULL) frotlimits_ = new ::task_manager::TFrotLimits;
  // @@protoc_insertion_point(field_mutable:task_manager.CommonTaskParams.FrotLimits)
  return frotlimits_;
}
inline ::task_manager::TFrotLimits* CommonTaskParams::release_frotlimits() {
  clear_has_frotlimits();
  ::task_manager::TFrotLimits* temp = frotlimits_;
  frotlimits_ = NULL;
  return temp;
}
inline void CommonTaskParams::set_allocated_frotlimits(::task_manager::TFrotLimits* frotlimits) {
  delete frotlimits_;
  frotlimits_ = frotlimits;
  if (frotlimits) {
    set_has_frotlimits();
  } else {
    clear_has_frotlimits();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.CommonTaskParams.FrotLimits)
}

// required bool FrotLimitsActive = 22;
inline bool CommonTaskParams::has_frotlimitsactive() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CommonTaskParams::set_has_frotlimitsactive() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CommonTaskParams::clear_has_frotlimitsactive() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CommonTaskParams::clear_frotlimitsactive() {
  frotlimitsactive_ = false;
  clear_has_frotlimitsactive();
}
inline bool CommonTaskParams::frotlimitsactive() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.FrotLimitsActive)
  return frotlimitsactive_;
}
inline void CommonTaskParams::set_frotlimitsactive(bool value) {
  set_has_frotlimitsactive();
  frotlimitsactive_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.FrotLimitsActive)
}

// required bool StabControl = 23;
inline bool CommonTaskParams::has_stabcontrol() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CommonTaskParams::set_has_stabcontrol() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CommonTaskParams::clear_has_stabcontrol() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CommonTaskParams::clear_stabcontrol() {
  stabcontrol_ = false;
  clear_has_stabcontrol();
}
inline bool CommonTaskParams::stabcontrol() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.StabControl)
  return stabcontrol_;
}
inline void CommonTaskParams::set_stabcontrol(bool value) {
  set_has_stabcontrol();
  stabcontrol_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.StabControl)
}

// required bool RotControl = 24;
inline bool CommonTaskParams::has_rotcontrol() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CommonTaskParams::set_has_rotcontrol() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CommonTaskParams::clear_has_rotcontrol() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CommonTaskParams::clear_rotcontrol() {
  rotcontrol_ = false;
  clear_has_rotcontrol();
}
inline bool CommonTaskParams::rotcontrol() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.RotControl)
  return rotcontrol_;
}
inline void CommonTaskParams::set_rotcontrol(bool value) {
  set_has_rotcontrol();
  rotcontrol_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.RotControl)
}

// required double WaitPeriodForRotMetka = 25;
inline bool CommonTaskParams::has_waitperiodforrotmetka() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CommonTaskParams::set_has_waitperiodforrotmetka() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CommonTaskParams::clear_has_waitperiodforrotmetka() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CommonTaskParams::clear_waitperiodforrotmetka() {
  waitperiodforrotmetka_ = 0;
  clear_has_waitperiodforrotmetka();
}
inline double CommonTaskParams::waitperiodforrotmetka() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.WaitPeriodForRotMetka)
  return waitperiodforrotmetka_;
}
inline void CommonTaskParams::set_waitperiodforrotmetka(double value) {
  set_has_waitperiodforrotmetka();
  waitperiodforrotmetka_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.WaitPeriodForRotMetka)
}

// required int32 TimeSigSrcType = 26;
inline bool CommonTaskParams::has_timesigsrctype() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CommonTaskParams::set_has_timesigsrctype() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CommonTaskParams::clear_has_timesigsrctype() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CommonTaskParams::clear_timesigsrctype() {
  timesigsrctype_ = 0;
  clear_has_timesigsrctype();
}
inline ::google::protobuf::int32 CommonTaskParams::timesigsrctype() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.TimeSigSrcType)
  return timesigsrctype_;
}
inline void CommonTaskParams::set_timesigsrctype(::google::protobuf::int32 value) {
  set_has_timesigsrctype();
  timesigsrctype_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.TimeSigSrcType)
}

// required int32 TimeSigID = 27;
inline bool CommonTaskParams::has_timesigid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CommonTaskParams::set_has_timesigid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CommonTaskParams::clear_has_timesigid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CommonTaskParams::clear_timesigid() {
  timesigid_ = 0;
  clear_has_timesigid();
}
inline ::google::protobuf::int32 CommonTaskParams::timesigid() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.TimeSigID)
  return timesigid_;
}
inline void CommonTaskParams::set_timesigid(::google::protobuf::int32 value) {
  set_has_timesigid();
  timesigid_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.TimeSigID)
}

// required int32 InitTaskState = 28;
inline bool CommonTaskParams::has_inittaskstate() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CommonTaskParams::set_has_inittaskstate() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CommonTaskParams::clear_has_inittaskstate() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CommonTaskParams::clear_inittaskstate() {
  inittaskstate_ = 0;
  clear_has_inittaskstate();
}
inline ::google::protobuf::int32 CommonTaskParams::inittaskstate() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.InitTaskState)
  return inittaskstate_;
}
inline void CommonTaskParams::set_inittaskstate(::google::protobuf::int32 value) {
  set_has_inittaskstate();
  inittaskstate_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.InitTaskState)
}

// required int32 FinalTaskState = 29;
inline bool CommonTaskParams::has_finaltaskstate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CommonTaskParams::set_has_finaltaskstate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CommonTaskParams::clear_has_finaltaskstate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CommonTaskParams::clear_finaltaskstate() {
  finaltaskstate_ = 0;
  clear_has_finaltaskstate();
}
inline ::google::protobuf::int32 CommonTaskParams::finaltaskstate() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.FinalTaskState)
  return finaltaskstate_;
}
inline void CommonTaskParams::set_finaltaskstate(::google::protobuf::int32 value) {
  set_has_finaltaskstate();
  finaltaskstate_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.FinalTaskState)
}

// required int32 TSDTC = 30;
inline bool CommonTaskParams::has_tsdtc() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CommonTaskParams::set_has_tsdtc() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CommonTaskParams::clear_has_tsdtc() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CommonTaskParams::clear_tsdtc() {
  tsdtc_ = 0;
  clear_has_tsdtc();
}
inline ::google::protobuf::int32 CommonTaskParams::tsdtc() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.TSDTC)
  return tsdtc_;
}
inline void CommonTaskParams::set_tsdtc(::google::protobuf::int32 value) {
  set_has_tsdtc();
  tsdtc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.TSDTC)
}

// required int32 CalcTypeTSDTC = 31;
inline bool CommonTaskParams::has_calctypetsdtc() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CommonTaskParams::set_has_calctypetsdtc() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CommonTaskParams::clear_has_calctypetsdtc() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CommonTaskParams::clear_calctypetsdtc() {
  calctypetsdtc_ = 0;
  clear_has_calctypetsdtc();
}
inline ::google::protobuf::int32 CommonTaskParams::calctypetsdtc() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.CalcTypeTSDTC)
  return calctypetsdtc_;
}
inline void CommonTaskParams::set_calctypetsdtc(::google::protobuf::int32 value) {
  set_has_calctypetsdtc();
  calctypetsdtc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.CalcTypeTSDTC)
}

// required int32 TDE = 32;
inline bool CommonTaskParams::has_tde() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CommonTaskParams::set_has_tde() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CommonTaskParams::clear_has_tde() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CommonTaskParams::clear_tde() {
  tde_ = 0;
  clear_has_tde();
}
inline ::google::protobuf::int32 CommonTaskParams::tde() const {
  // @@protoc_insertion_point(field_get:task_manager.CommonTaskParams.TDE)
  return tde_;
}
inline void CommonTaskParams::set_tde(::google::protobuf::int32 value) {
  set_has_tde();
  tde_ = value;
  // @@protoc_insertion_point(field_set:task_manager.CommonTaskParams.TDE)
}

// -------------------------------------------------------------------

// SpectrTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool SpectrTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpectrTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpectrTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpectrTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& SpectrTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.SpectrTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* SpectrTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.SpectrTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* SpectrTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void SpectrTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.SpectrTaskParams.CMN)
}

// required int32 SpectrClassCode = 2;
inline bool SpectrTaskParams::has_spectrclasscode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpectrTaskParams::set_has_spectrclasscode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpectrTaskParams::clear_has_spectrclasscode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpectrTaskParams::clear_spectrclasscode() {
  spectrclasscode_ = 0;
  clear_has_spectrclasscode();
}
inline ::google::protobuf::int32 SpectrTaskParams::spectrclasscode() const {
  // @@protoc_insertion_point(field_get:task_manager.SpectrTaskParams.SpectrClassCode)
  return spectrclasscode_;
}
inline void SpectrTaskParams::set_spectrclasscode(::google::protobuf::int32 value) {
  set_has_spectrclasscode();
  spectrclasscode_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SpectrTaskParams.SpectrClassCode)
}

// required int32 SpectLinesArrIndex = 3;
inline bool SpectrTaskParams::has_spectlinesarrindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpectrTaskParams::set_has_spectlinesarrindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpectrTaskParams::clear_has_spectlinesarrindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpectrTaskParams::clear_spectlinesarrindex() {
  spectlinesarrindex_ = 0;
  clear_has_spectlinesarrindex();
}
inline ::google::protobuf::int32 SpectrTaskParams::spectlinesarrindex() const {
  // @@protoc_insertion_point(field_get:task_manager.SpectrTaskParams.SpectLinesArrIndex)
  return spectlinesarrindex_;
}
inline void SpectrTaskParams::set_spectlinesarrindex(::google::protobuf::int32 value) {
  set_has_spectlinesarrindex();
  spectlinesarrindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SpectrTaskParams.SpectLinesArrIndex)
}

// required uint32 SpectAmpUnit = 4;
inline bool SpectrTaskParams::has_spectampunit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpectrTaskParams::set_has_spectampunit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpectrTaskParams::clear_has_spectampunit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpectrTaskParams::clear_spectampunit() {
  spectampunit_ = 0u;
  clear_has_spectampunit();
}
inline ::google::protobuf::uint32 SpectrTaskParams::spectampunit() const {
  // @@protoc_insertion_point(field_get:task_manager.SpectrTaskParams.SpectAmpUnit)
  return spectampunit_;
}
inline void SpectrTaskParams::set_spectampunit(::google::protobuf::uint32 value) {
  set_has_spectampunit();
  spectampunit_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SpectrTaskParams.SpectAmpUnit)
}

// required bool RemoveAvgLine = 5;
inline bool SpectrTaskParams::has_removeavgline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpectrTaskParams::set_has_removeavgline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpectrTaskParams::clear_has_removeavgline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpectrTaskParams::clear_removeavgline() {
  removeavgline_ = false;
  clear_has_removeavgline();
}
inline bool SpectrTaskParams::removeavgline() const {
  // @@protoc_insertion_point(field_get:task_manager.SpectrTaskParams.RemoveAvgLine)
  return removeavgline_;
}
inline void SpectrTaskParams::set_removeavgline(bool value) {
  set_has_removeavgline();
  removeavgline_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SpectrTaskParams.RemoveAvgLine)
}

// -------------------------------------------------------------------

// VharmonicTaskParams

// optional .task_manager.SpectrTaskParams STP = 1;
inline bool VharmonicTaskParams::has_stp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VharmonicTaskParams::set_has_stp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VharmonicTaskParams::clear_has_stp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VharmonicTaskParams::clear_stp() {
  if (stp_ != NULL) stp_->::task_manager::SpectrTaskParams::Clear();
  clear_has_stp();
}
inline const ::task_manager::SpectrTaskParams& VharmonicTaskParams::stp() const {
  // @@protoc_insertion_point(field_get:task_manager.VharmonicTaskParams.STP)
  return stp_ != NULL ? *stp_ : *default_instance_->stp_;
}
inline ::task_manager::SpectrTaskParams* VharmonicTaskParams::mutable_stp() {
  set_has_stp();
  if (stp_ == NULL) stp_ = new ::task_manager::SpectrTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.VharmonicTaskParams.STP)
  return stp_;
}
inline ::task_manager::SpectrTaskParams* VharmonicTaskParams::release_stp() {
  clear_has_stp();
  ::task_manager::SpectrTaskParams* temp = stp_;
  stp_ = NULL;
  return temp;
}
inline void VharmonicTaskParams::set_allocated_stp(::task_manager::SpectrTaskParams* stp) {
  delete stp_;
  stp_ = stp;
  if (stp) {
    set_has_stp();
  } else {
    clear_has_stp();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VharmonicTaskParams.STP)
}

// required .task_manager.CommonTaskParams CMN = 2;
inline bool VharmonicTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VharmonicTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VharmonicTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VharmonicTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& VharmonicTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.VharmonicTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* VharmonicTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.VharmonicTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* VharmonicTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void VharmonicTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VharmonicTaskParams.CMN)
}

// required int32 VHarmonicsCount = 3;
inline bool VharmonicTaskParams::has_vharmonicscount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VharmonicTaskParams::set_has_vharmonicscount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VharmonicTaskParams::clear_has_vharmonicscount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VharmonicTaskParams::clear_vharmonicscount() {
  vharmonicscount_ = 0;
  clear_has_vharmonicscount();
}
inline ::google::protobuf::int32 VharmonicTaskParams::vharmonicscount() const {
  // @@protoc_insertion_point(field_get:task_manager.VharmonicTaskParams.VHarmonicsCount)
  return vharmonicscount_;
}
inline void VharmonicTaskParams::set_vharmonicscount(::google::protobuf::int32 value) {
  set_has_vharmonicscount();
  vharmonicscount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VharmonicTaskParams.VHarmonicsCount)
}

// optional int32 VHarmonicsAvgCount = 4;
inline bool VharmonicTaskParams::has_vharmonicsavgcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VharmonicTaskParams::set_has_vharmonicsavgcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VharmonicTaskParams::clear_has_vharmonicsavgcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VharmonicTaskParams::clear_vharmonicsavgcount() {
  vharmonicsavgcount_ = 0;
  clear_has_vharmonicsavgcount();
}
inline ::google::protobuf::int32 VharmonicTaskParams::vharmonicsavgcount() const {
  // @@protoc_insertion_point(field_get:task_manager.VharmonicTaskParams.VHarmonicsAvgCount)
  return vharmonicsavgcount_;
}
inline void VharmonicTaskParams::set_vharmonicsavgcount(::google::protobuf::int32 value) {
  set_has_vharmonicsavgcount();
  vharmonicsavgcount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VharmonicTaskParams.VHarmonicsAvgCount)
}

// required int32 SpectLinesArrIndex = 5;
inline bool VharmonicTaskParams::has_spectlinesarrindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VharmonicTaskParams::set_has_spectlinesarrindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VharmonicTaskParams::clear_has_spectlinesarrindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VharmonicTaskParams::clear_spectlinesarrindex() {
  spectlinesarrindex_ = 0;
  clear_has_spectlinesarrindex();
}
inline ::google::protobuf::int32 VharmonicTaskParams::spectlinesarrindex() const {
  // @@protoc_insertion_point(field_get:task_manager.VharmonicTaskParams.SpectLinesArrIndex)
  return spectlinesarrindex_;
}
inline void VharmonicTaskParams::set_spectlinesarrindex(::google::protobuf::int32 value) {
  set_has_spectlinesarrindex();
  spectlinesarrindex_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VharmonicTaskParams.SpectLinesArrIndex)
}

// -------------------------------------------------------------------

// StatKurtosisTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool StatKurtosisTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatKurtosisTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatKurtosisTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatKurtosisTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& StatKurtosisTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosisTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* StatKurtosisTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.StatKurtosisTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* StatKurtosisTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void StatKurtosisTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.StatKurtosisTaskParams.CMN)
}

// required int32 OneMeasTimeSigLength = 2;
inline bool StatKurtosisTaskParams::has_onemeastimesiglength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatKurtosisTaskParams::set_has_onemeastimesiglength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatKurtosisTaskParams::clear_has_onemeastimesiglength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatKurtosisTaskParams::clear_onemeastimesiglength() {
  onemeastimesiglength_ = 0;
  clear_has_onemeastimesiglength();
}
inline ::google::protobuf::int32 StatKurtosisTaskParams::onemeastimesiglength() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosisTaskParams.OneMeasTimeSigLength)
  return onemeastimesiglength_;
}
inline void StatKurtosisTaskParams::set_onemeastimesiglength(::google::protobuf::int32 value) {
  set_has_onemeastimesiglength();
  onemeastimesiglength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosisTaskParams.OneMeasTimeSigLength)
}

// required int32 MeasCount = 3;
inline bool StatKurtosisTaskParams::has_meascount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatKurtosisTaskParams::set_has_meascount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatKurtosisTaskParams::clear_has_meascount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatKurtosisTaskParams::clear_meascount() {
  meascount_ = 0;
  clear_has_meascount();
}
inline ::google::protobuf::int32 StatKurtosisTaskParams::meascount() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosisTaskParams.MeasCount)
  return meascount_;
}
inline void StatKurtosisTaskParams::set_meascount(::google::protobuf::int32 value) {
  set_has_meascount();
  meascount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosisTaskParams.MeasCount)
}

// required double CoefCover = 4;
inline bool StatKurtosisTaskParams::has_coefcover() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatKurtosisTaskParams::set_has_coefcover() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatKurtosisTaskParams::clear_has_coefcover() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatKurtosisTaskParams::clear_coefcover() {
  coefcover_ = 0;
  clear_has_coefcover();
}
inline double StatKurtosisTaskParams::coefcover() const {
  // @@protoc_insertion_point(field_get:task_manager.StatKurtosisTaskParams.CoefCover)
  return coefcover_;
}
inline void StatKurtosisTaskParams::set_coefcover(double value) {
  set_has_coefcover();
  coefcover_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatKurtosisTaskParams.CoefCover)
}

// -------------------------------------------------------------------

// StatTimeSigTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool StatTimeSigTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatTimeSigTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatTimeSigTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatTimeSigTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& StatTimeSigTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSigTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* StatTimeSigTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.StatTimeSigTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* StatTimeSigTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void StatTimeSigTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.StatTimeSigTaskParams.CMN)
}

// required int32 OneMeasTimeSigLength = 2;
inline bool StatTimeSigTaskParams::has_onemeastimesiglength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatTimeSigTaskParams::set_has_onemeastimesiglength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatTimeSigTaskParams::clear_has_onemeastimesiglength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatTimeSigTaskParams::clear_onemeastimesiglength() {
  onemeastimesiglength_ = 0;
  clear_has_onemeastimesiglength();
}
inline ::google::protobuf::int32 StatTimeSigTaskParams::onemeastimesiglength() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSigTaskParams.OneMeasTimeSigLength)
  return onemeastimesiglength_;
}
inline void StatTimeSigTaskParams::set_onemeastimesiglength(::google::protobuf::int32 value) {
  set_has_onemeastimesiglength();
  onemeastimesiglength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSigTaskParams.OneMeasTimeSigLength)
}

// required uint32 AmpUnit = 3;
inline bool StatTimeSigTaskParams::has_ampunit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatTimeSigTaskParams::set_has_ampunit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatTimeSigTaskParams::clear_has_ampunit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatTimeSigTaskParams::clear_ampunit() {
  ampunit_ = 0u;
  clear_has_ampunit();
}
inline ::google::protobuf::uint32 StatTimeSigTaskParams::ampunit() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSigTaskParams.AmpUnit)
  return ampunit_;
}
inline void StatTimeSigTaskParams::set_ampunit(::google::protobuf::uint32 value) {
  set_has_ampunit();
  ampunit_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSigTaskParams.AmpUnit)
}

// required bool IntegrateInTimeDomain = 4;
inline bool StatTimeSigTaskParams::has_integrateintimedomain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatTimeSigTaskParams::set_has_integrateintimedomain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatTimeSigTaskParams::clear_has_integrateintimedomain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatTimeSigTaskParams::clear_integrateintimedomain() {
  integrateintimedomain_ = false;
  clear_has_integrateintimedomain();
}
inline bool StatTimeSigTaskParams::integrateintimedomain() const {
  // @@protoc_insertion_point(field_get:task_manager.StatTimeSigTaskParams.IntegrateInTimeDomain)
  return integrateintimedomain_;
}
inline void StatTimeSigTaskParams::set_integrateintimedomain(bool value) {
  set_has_integrateintimedomain();
  integrateintimedomain_ = value;
  // @@protoc_insertion_point(field_set:task_manager.StatTimeSigTaskParams.IntegrateInTimeDomain)
}

// -------------------------------------------------------------------

// PlayerTimeSigTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool PlayerTimeSigTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerTimeSigTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerTimeSigTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerTimeSigTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& PlayerTimeSigTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.PlayerTimeSigTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* PlayerTimeSigTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.PlayerTimeSigTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* PlayerTimeSigTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void PlayerTimeSigTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.PlayerTimeSigTaskParams.CMN)
}

// -------------------------------------------------------------------

// VibegTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool VibegTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VibegTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VibegTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VibegTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& VibegTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.VibegTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* VibegTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.VibegTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* VibegTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void VibegTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VibegTaskParams.CMN)
}

// required double Frot_base = 2;
inline bool VibegTaskParams::has_frot_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VibegTaskParams::set_has_frot_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VibegTaskParams::clear_has_frot_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VibegTaskParams::clear_frot_base() {
  frot_base_ = 0;
  clear_has_frot_base();
}
inline double VibegTaskParams::frot_base() const {
  // @@protoc_insertion_point(field_get:task_manager.VibegTaskParams.Frot_base)
  return frot_base_;
}
inline void VibegTaskParams::set_frot_base(double value) {
  set_has_frot_base();
  frot_base_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VibegTaskParams.Frot_base)
}

// required uint32 FrotAvgMetkasCount = 3;
inline bool VibegTaskParams::has_frotavgmetkascount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VibegTaskParams::set_has_frotavgmetkascount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VibegTaskParams::clear_has_frotavgmetkascount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VibegTaskParams::clear_frotavgmetkascount() {
  frotavgmetkascount_ = 0u;
  clear_has_frotavgmetkascount();
}
inline ::google::protobuf::uint32 VibegTaskParams::frotavgmetkascount() const {
  // @@protoc_insertion_point(field_get:task_manager.VibegTaskParams.FrotAvgMetkasCount)
  return frotavgmetkascount_;
}
inline void VibegTaskParams::set_frotavgmetkascount(::google::protobuf::uint32 value) {
  set_has_frotavgmetkascount();
  frotavgmetkascount_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VibegTaskParams.FrotAvgMetkasCount)
}

// -------------------------------------------------------------------

// QualityTimeSigTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool QualityTimeSigTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QualityTimeSigTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QualityTimeSigTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QualityTimeSigTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& QualityTimeSigTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSigTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* QualityTimeSigTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.QualityTimeSigTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* QualityTimeSigTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void QualityTimeSigTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.QualityTimeSigTaskParams.CMN)
}

// required int32 OneMeasTimeSigLength = 2;
inline bool QualityTimeSigTaskParams::has_onemeastimesiglength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QualityTimeSigTaskParams::set_has_onemeastimesiglength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QualityTimeSigTaskParams::clear_has_onemeastimesiglength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QualityTimeSigTaskParams::clear_onemeastimesiglength() {
  onemeastimesiglength_ = 0;
  clear_has_onemeastimesiglength();
}
inline ::google::protobuf::int32 QualityTimeSigTaskParams::onemeastimesiglength() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSigTaskParams.OneMeasTimeSigLength)
  return onemeastimesiglength_;
}
inline void QualityTimeSigTaskParams::set_onemeastimesiglength(::google::protobuf::int32 value) {
  set_has_onemeastimesiglength();
  onemeastimesiglength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSigTaskParams.OneMeasTimeSigLength)
}

// required double AmpPeakToPeakMin = 3;
inline bool QualityTimeSigTaskParams::has_amppeaktopeakmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QualityTimeSigTaskParams::set_has_amppeaktopeakmin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QualityTimeSigTaskParams::clear_has_amppeaktopeakmin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QualityTimeSigTaskParams::clear_amppeaktopeakmin() {
  amppeaktopeakmin_ = 0;
  clear_has_amppeaktopeakmin();
}
inline double QualityTimeSigTaskParams::amppeaktopeakmin() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSigTaskParams.AmpPeakToPeakMin)
  return amppeaktopeakmin_;
}
inline void QualityTimeSigTaskParams::set_amppeaktopeakmin(double value) {
  set_has_amppeaktopeakmin();
  amppeaktopeakmin_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSigTaskParams.AmpPeakToPeakMin)
}

// required double AmpPeakToPeakMax = 4;
inline bool QualityTimeSigTaskParams::has_amppeaktopeakmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QualityTimeSigTaskParams::set_has_amppeaktopeakmax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QualityTimeSigTaskParams::clear_has_amppeaktopeakmax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QualityTimeSigTaskParams::clear_amppeaktopeakmax() {
  amppeaktopeakmax_ = 0;
  clear_has_amppeaktopeakmax();
}
inline double QualityTimeSigTaskParams::amppeaktopeakmax() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSigTaskParams.AmpPeakToPeakMax)
  return amppeaktopeakmax_;
}
inline void QualityTimeSigTaskParams::set_amppeaktopeakmax(double value) {
  set_has_amppeaktopeakmax();
  amppeaktopeakmax_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSigTaskParams.AmpPeakToPeakMax)
}

// required double AmpStdMin = 5;
inline bool QualityTimeSigTaskParams::has_ampstdmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QualityTimeSigTaskParams::set_has_ampstdmin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QualityTimeSigTaskParams::clear_has_ampstdmin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QualityTimeSigTaskParams::clear_ampstdmin() {
  ampstdmin_ = 0;
  clear_has_ampstdmin();
}
inline double QualityTimeSigTaskParams::ampstdmin() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSigTaskParams.AmpStdMin)
  return ampstdmin_;
}
inline void QualityTimeSigTaskParams::set_ampstdmin(double value) {
  set_has_ampstdmin();
  ampstdmin_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSigTaskParams.AmpStdMin)
}

// required double AmpStdMax = 6;
inline bool QualityTimeSigTaskParams::has_ampstdmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QualityTimeSigTaskParams::set_has_ampstdmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QualityTimeSigTaskParams::clear_has_ampstdmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QualityTimeSigTaskParams::clear_ampstdmax() {
  ampstdmax_ = 0;
  clear_has_ampstdmax();
}
inline double QualityTimeSigTaskParams::ampstdmax() const {
  // @@protoc_insertion_point(field_get:task_manager.QualityTimeSigTaskParams.AmpStdMax)
  return ampstdmax_;
}
inline void QualityTimeSigTaskParams::set_ampstdmax(double value) {
  set_has_ampstdmax();
  ampstdmax_ = value;
  // @@protoc_insertion_point(field_set:task_manager.QualityTimeSigTaskParams.AmpStdMax)
}

// -------------------------------------------------------------------

// SaveTimeSigTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool SaveTimeSigTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveTimeSigTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveTimeSigTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveTimeSigTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& SaveTimeSigTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSigTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* SaveTimeSigTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.SaveTimeSigTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* SaveTimeSigTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void SaveTimeSigTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.SaveTimeSigTaskParams.CMN)
}

// required string FileName = 2;
inline bool SaveTimeSigTaskParams::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveTimeSigTaskParams::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveTimeSigTaskParams::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveTimeSigTaskParams::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& SaveTimeSigTaskParams::filename() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSigTaskParams.FileName)
  return *filename_;
}
inline void SaveTimeSigTaskParams::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:task_manager.SaveTimeSigTaskParams.FileName)
}
inline void SaveTimeSigTaskParams::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:task_manager.SaveTimeSigTaskParams.FileName)
}
inline void SaveTimeSigTaskParams::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:task_manager.SaveTimeSigTaskParams.FileName)
}
inline ::std::string* SaveTimeSigTaskParams::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:task_manager.SaveTimeSigTaskParams.FileName)
  return filename_;
}
inline ::std::string* SaveTimeSigTaskParams::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SaveTimeSigTaskParams::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.SaveTimeSigTaskParams.FileName)
}

// required uint32 OnePartTimeSigLength = 3;
inline bool SaveTimeSigTaskParams::has_oneparttimesiglength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveTimeSigTaskParams::set_has_oneparttimesiglength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveTimeSigTaskParams::clear_has_oneparttimesiglength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveTimeSigTaskParams::clear_oneparttimesiglength() {
  oneparttimesiglength_ = 0u;
  clear_has_oneparttimesiglength();
}
inline ::google::protobuf::uint32 SaveTimeSigTaskParams::oneparttimesiglength() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSigTaskParams.OnePartTimeSigLength)
  return oneparttimesiglength_;
}
inline void SaveTimeSigTaskParams::set_oneparttimesiglength(::google::protobuf::uint32 value) {
  set_has_oneparttimesiglength();
  oneparttimesiglength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SaveTimeSigTaskParams.OnePartTimeSigLength)
}

// required uint32 TotalTimeSigLength = 4;
inline bool SaveTimeSigTaskParams::has_totaltimesiglength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveTimeSigTaskParams::set_has_totaltimesiglength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveTimeSigTaskParams::clear_has_totaltimesiglength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveTimeSigTaskParams::clear_totaltimesiglength() {
  totaltimesiglength_ = 0u;
  clear_has_totaltimesiglength();
}
inline ::google::protobuf::uint32 SaveTimeSigTaskParams::totaltimesiglength() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSigTaskParams.TotalTimeSigLength)
  return totaltimesiglength_;
}
inline void SaveTimeSigTaskParams::set_totaltimesiglength(::google::protobuf::uint32 value) {
  set_has_totaltimesiglength();
  totaltimesiglength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SaveTimeSigTaskParams.TotalTimeSigLength)
}

// required bool SigLengthWithFsSrc = 5;
inline bool SaveTimeSigTaskParams::has_siglengthwithfssrc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveTimeSigTaskParams::set_has_siglengthwithfssrc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveTimeSigTaskParams::clear_has_siglengthwithfssrc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveTimeSigTaskParams::clear_siglengthwithfssrc() {
  siglengthwithfssrc_ = false;
  clear_has_siglengthwithfssrc();
}
inline bool SaveTimeSigTaskParams::siglengthwithfssrc() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSigTaskParams.SigLengthWithFsSrc)
  return siglengthwithfssrc_;
}
inline void SaveTimeSigTaskParams::set_siglengthwithfssrc(bool value) {
  set_has_siglengthwithfssrc();
  siglengthwithfssrc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SaveTimeSigTaskParams.SigLengthWithFsSrc)
}

// required uint32 TSDTC = 6;
inline bool SaveTimeSigTaskParams::has_tsdtc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveTimeSigTaskParams::set_has_tsdtc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaveTimeSigTaskParams::clear_has_tsdtc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaveTimeSigTaskParams::clear_tsdtc() {
  tsdtc_ = 0u;
  clear_has_tsdtc();
}
inline ::google::protobuf::uint32 SaveTimeSigTaskParams::tsdtc() const {
  // @@protoc_insertion_point(field_get:task_manager.SaveTimeSigTaskParams.TSDTC)
  return tsdtc_;
}
inline void SaveTimeSigTaskParams::set_tsdtc(::google::protobuf::uint32 value) {
  set_has_tsdtc();
  tsdtc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.SaveTimeSigTaskParams.TSDTC)
}

// -------------------------------------------------------------------

// VsensorFrotTaskParams

// optional .task_manager.CommonTaskParams CMN = 1;
inline bool VsensorFrotTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VsensorFrotTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VsensorFrotTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VsensorFrotTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& VsensorFrotTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* VsensorFrotTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.VsensorFrotTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* VsensorFrotTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void VsensorFrotTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VsensorFrotTaskParams.CMN)
}

// optional .task_manager.SpectrTaskParams STP = 2;
inline bool VsensorFrotTaskParams::has_stp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VsensorFrotTaskParams::set_has_stp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VsensorFrotTaskParams::clear_has_stp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VsensorFrotTaskParams::clear_stp() {
  if (stp_ != NULL) stp_->::task_manager::SpectrTaskParams::Clear();
  clear_has_stp();
}
inline const ::task_manager::SpectrTaskParams& VsensorFrotTaskParams::stp() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.STP)
  return stp_ != NULL ? *stp_ : *default_instance_->stp_;
}
inline ::task_manager::SpectrTaskParams* VsensorFrotTaskParams::mutable_stp() {
  set_has_stp();
  if (stp_ == NULL) stp_ = new ::task_manager::SpectrTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.VsensorFrotTaskParams.STP)
  return stp_;
}
inline ::task_manager::SpectrTaskParams* VsensorFrotTaskParams::release_stp() {
  clear_has_stp();
  ::task_manager::SpectrTaskParams* temp = stp_;
  stp_ = NULL;
  return temp;
}
inline void VsensorFrotTaskParams::set_allocated_stp(::task_manager::SpectrTaskParams* stp) {
  delete stp_;
  stp_ = stp;
  if (stp) {
    set_has_stp();
  } else {
    clear_has_stp();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.VsensorFrotTaskParams.STP)
}

// required double DeltaOffSetInSec = 3;
inline bool VsensorFrotTaskParams::has_deltaoffsetinsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VsensorFrotTaskParams::set_has_deltaoffsetinsec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VsensorFrotTaskParams::clear_has_deltaoffsetinsec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VsensorFrotTaskParams::clear_deltaoffsetinsec() {
  deltaoffsetinsec_ = 0;
  clear_has_deltaoffsetinsec();
}
inline double VsensorFrotTaskParams::deltaoffsetinsec() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.DeltaOffSetInSec)
  return deltaoffsetinsec_;
}
inline void VsensorFrotTaskParams::set_deltaoffsetinsec(double value) {
  set_has_deltaoffsetinsec();
  deltaoffsetinsec_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.DeltaOffSetInSec)
}

// required uint32 ScaleKoeffFFt = 4;
inline bool VsensorFrotTaskParams::has_scalekoefffft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VsensorFrotTaskParams::set_has_scalekoefffft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VsensorFrotTaskParams::clear_has_scalekoefffft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VsensorFrotTaskParams::clear_scalekoefffft() {
  scalekoefffft_ = 0u;
  clear_has_scalekoefffft();
}
inline ::google::protobuf::uint32 VsensorFrotTaskParams::scalekoefffft() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.ScaleKoeffFFt)
  return scalekoefffft_;
}
inline void VsensorFrotTaskParams::set_scalekoefffft(::google::protobuf::uint32 value) {
  set_has_scalekoefffft();
  scalekoefffft_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.ScaleKoeffFFt)
}

// required double FrotMin = 5;
inline bool VsensorFrotTaskParams::has_frotmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VsensorFrotTaskParams::set_has_frotmin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VsensorFrotTaskParams::clear_has_frotmin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VsensorFrotTaskParams::clear_frotmin() {
  frotmin_ = 0;
  clear_has_frotmin();
}
inline double VsensorFrotTaskParams::frotmin() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.FrotMin)
  return frotmin_;
}
inline void VsensorFrotTaskParams::set_frotmin(double value) {
  set_has_frotmin();
  frotmin_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.FrotMin)
}

// required double FrotMax = 6;
inline bool VsensorFrotTaskParams::has_frotmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VsensorFrotTaskParams::set_has_frotmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VsensorFrotTaskParams::clear_has_frotmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VsensorFrotTaskParams::clear_frotmax() {
  frotmax_ = 0;
  clear_has_frotmax();
}
inline double VsensorFrotTaskParams::frotmax() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.FrotMax)
  return frotmax_;
}
inline void VsensorFrotTaskParams::set_frotmax(double value) {
  set_has_frotmax();
  frotmax_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.FrotMax)
}

// required double FrotAccelMax = 7;
inline bool VsensorFrotTaskParams::has_frotaccelmax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VsensorFrotTaskParams::set_has_frotaccelmax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VsensorFrotTaskParams::clear_has_frotaccelmax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VsensorFrotTaskParams::clear_frotaccelmax() {
  frotaccelmax_ = 0;
  clear_has_frotaccelmax();
}
inline double VsensorFrotTaskParams::frotaccelmax() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.FrotAccelMax)
  return frotaccelmax_;
}
inline void VsensorFrotTaskParams::set_frotaccelmax(double value) {
  set_has_frotaccelmax();
  frotaccelmax_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.FrotAccelMax)
}

// required double AmpModulMin = 8;
inline bool VsensorFrotTaskParams::has_ampmodulmin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VsensorFrotTaskParams::set_has_ampmodulmin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VsensorFrotTaskParams::clear_has_ampmodulmin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VsensorFrotTaskParams::clear_ampmodulmin() {
  ampmodulmin_ = 0;
  clear_has_ampmodulmin();
}
inline double VsensorFrotTaskParams::ampmodulmin() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.AmpModulMin)
  return ampmodulmin_;
}
inline void VsensorFrotTaskParams::set_ampmodulmin(double value) {
  set_has_ampmodulmin();
  ampmodulmin_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.AmpModulMin)
}

// required double STDMin = 9;
inline bool VsensorFrotTaskParams::has_stdmin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VsensorFrotTaskParams::set_has_stdmin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VsensorFrotTaskParams::clear_has_stdmin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VsensorFrotTaskParams::clear_stdmin() {
  stdmin_ = 0;
  clear_has_stdmin();
}
inline double VsensorFrotTaskParams::stdmin() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.STDMin)
  return stdmin_;
}
inline void VsensorFrotTaskParams::set_stdmin(double value) {
  set_has_stdmin();
  stdmin_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.STDMin)
}

// required int32 RBFilterLength = 10;
inline bool VsensorFrotTaskParams::has_rbfilterlength() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VsensorFrotTaskParams::set_has_rbfilterlength() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VsensorFrotTaskParams::clear_has_rbfilterlength() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VsensorFrotTaskParams::clear_rbfilterlength() {
  rbfilterlength_ = 0;
  clear_has_rbfilterlength();
}
inline ::google::protobuf::int32 VsensorFrotTaskParams::rbfilterlength() const {
  // @@protoc_insertion_point(field_get:task_manager.VsensorFrotTaskParams.RBFilterLength)
  return rbfilterlength_;
}
inline void VsensorFrotTaskParams::set_rbfilterlength(::google::protobuf::int32 value) {
  set_has_rbfilterlength();
  rbfilterlength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.VsensorFrotTaskParams.RBFilterLength)
}

// -------------------------------------------------------------------

// DecimTimeSigTaskParams

// required .task_manager.CommonTaskParams CMN = 1;
inline bool DecimTimeSigTaskParams::has_cmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecimTimeSigTaskParams::set_has_cmn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecimTimeSigTaskParams::clear_has_cmn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecimTimeSigTaskParams::clear_cmn() {
  if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  clear_has_cmn();
}
inline const ::task_manager::CommonTaskParams& DecimTimeSigTaskParams::cmn() const {
  // @@protoc_insertion_point(field_get:task_manager.DecimTimeSigTaskParams.CMN)
  return cmn_ != NULL ? *cmn_ : *default_instance_->cmn_;
}
inline ::task_manager::CommonTaskParams* DecimTimeSigTaskParams::mutable_cmn() {
  set_has_cmn();
  if (cmn_ == NULL) cmn_ = new ::task_manager::CommonTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.DecimTimeSigTaskParams.CMN)
  return cmn_;
}
inline ::task_manager::CommonTaskParams* DecimTimeSigTaskParams::release_cmn() {
  clear_has_cmn();
  ::task_manager::CommonTaskParams* temp = cmn_;
  cmn_ = NULL;
  return temp;
}
inline void DecimTimeSigTaskParams::set_allocated_cmn(::task_manager::CommonTaskParams* cmn) {
  delete cmn_;
  cmn_ = cmn;
  if (cmn) {
    set_has_cmn();
  } else {
    clear_has_cmn();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.DecimTimeSigTaskParams.CMN)
}

// required uint32 OnePartTimeSigLength = 2;
inline bool DecimTimeSigTaskParams::has_oneparttimesiglength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecimTimeSigTaskParams::set_has_oneparttimesiglength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecimTimeSigTaskParams::clear_has_oneparttimesiglength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecimTimeSigTaskParams::clear_oneparttimesiglength() {
  oneparttimesiglength_ = 0u;
  clear_has_oneparttimesiglength();
}
inline ::google::protobuf::uint32 DecimTimeSigTaskParams::oneparttimesiglength() const {
  // @@protoc_insertion_point(field_get:task_manager.DecimTimeSigTaskParams.OnePartTimeSigLength)
  return oneparttimesiglength_;
}
inline void DecimTimeSigTaskParams::set_oneparttimesiglength(::google::protobuf::uint32 value) {
  set_has_oneparttimesiglength();
  oneparttimesiglength_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DecimTimeSigTaskParams.OnePartTimeSigLength)
}

// required bool ForgetFsSrc = 3;
inline bool DecimTimeSigTaskParams::has_forgetfssrc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DecimTimeSigTaskParams::set_has_forgetfssrc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DecimTimeSigTaskParams::clear_has_forgetfssrc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DecimTimeSigTaskParams::clear_forgetfssrc() {
  forgetfssrc_ = false;
  clear_has_forgetfssrc();
}
inline bool DecimTimeSigTaskParams::forgetfssrc() const {
  // @@protoc_insertion_point(field_get:task_manager.DecimTimeSigTaskParams.ForgetFsSrc)
  return forgetfssrc_;
}
inline void DecimTimeSigTaskParams::set_forgetfssrc(bool value) {
  set_has_forgetfssrc();
  forgetfssrc_ = value;
  // @@protoc_insertion_point(field_set:task_manager.DecimTimeSigTaskParams.ForgetFsSrc)
}

// -------------------------------------------------------------------

// AnyTaskParams

// required int32 error_code = 1;
inline bool AnyTaskParams::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnyTaskParams::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnyTaskParams::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnyTaskParams::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AnyTaskParams::error_code() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.error_code)
  return error_code_;
}
inline void AnyTaskParams::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:task_manager.AnyTaskParams.error_code)
}

// optional .task_manager.SpectrTaskParams spect_par = 2;
inline bool AnyTaskParams::has_spect_par() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnyTaskParams::set_has_spect_par() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnyTaskParams::clear_has_spect_par() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnyTaskParams::clear_spect_par() {
  if (spect_par_ != NULL) spect_par_->::task_manager::SpectrTaskParams::Clear();
  clear_has_spect_par();
}
inline const ::task_manager::SpectrTaskParams& AnyTaskParams::spect_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.spect_par)
  return spect_par_ != NULL ? *spect_par_ : *default_instance_->spect_par_;
}
inline ::task_manager::SpectrTaskParams* AnyTaskParams::mutable_spect_par() {
  set_has_spect_par();
  if (spect_par_ == NULL) spect_par_ = new ::task_manager::SpectrTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.spect_par)
  return spect_par_;
}
inline ::task_manager::SpectrTaskParams* AnyTaskParams::release_spect_par() {
  clear_has_spect_par();
  ::task_manager::SpectrTaskParams* temp = spect_par_;
  spect_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_spect_par(::task_manager::SpectrTaskParams* spect_par) {
  delete spect_par_;
  spect_par_ = spect_par;
  if (spect_par) {
    set_has_spect_par();
  } else {
    clear_has_spect_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.spect_par)
}

// optional .task_manager.VharmonicTaskParams harmonic_par = 3;
inline bool AnyTaskParams::has_harmonic_par() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnyTaskParams::set_has_harmonic_par() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnyTaskParams::clear_has_harmonic_par() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnyTaskParams::clear_harmonic_par() {
  if (harmonic_par_ != NULL) harmonic_par_->::task_manager::VharmonicTaskParams::Clear();
  clear_has_harmonic_par();
}
inline const ::task_manager::VharmonicTaskParams& AnyTaskParams::harmonic_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.harmonic_par)
  return harmonic_par_ != NULL ? *harmonic_par_ : *default_instance_->harmonic_par_;
}
inline ::task_manager::VharmonicTaskParams* AnyTaskParams::mutable_harmonic_par() {
  set_has_harmonic_par();
  if (harmonic_par_ == NULL) harmonic_par_ = new ::task_manager::VharmonicTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.harmonic_par)
  return harmonic_par_;
}
inline ::task_manager::VharmonicTaskParams* AnyTaskParams::release_harmonic_par() {
  clear_has_harmonic_par();
  ::task_manager::VharmonicTaskParams* temp = harmonic_par_;
  harmonic_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_harmonic_par(::task_manager::VharmonicTaskParams* harmonic_par) {
  delete harmonic_par_;
  harmonic_par_ = harmonic_par;
  if (harmonic_par) {
    set_has_harmonic_par();
  } else {
    clear_has_harmonic_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.harmonic_par)
}

// optional .task_manager.StatKurtosisTaskParams kurtosis_par = 4;
inline bool AnyTaskParams::has_kurtosis_par() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnyTaskParams::set_has_kurtosis_par() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnyTaskParams::clear_has_kurtosis_par() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnyTaskParams::clear_kurtosis_par() {
  if (kurtosis_par_ != NULL) kurtosis_par_->::task_manager::StatKurtosisTaskParams::Clear();
  clear_has_kurtosis_par();
}
inline const ::task_manager::StatKurtosisTaskParams& AnyTaskParams::kurtosis_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.kurtosis_par)
  return kurtosis_par_ != NULL ? *kurtosis_par_ : *default_instance_->kurtosis_par_;
}
inline ::task_manager::StatKurtosisTaskParams* AnyTaskParams::mutable_kurtosis_par() {
  set_has_kurtosis_par();
  if (kurtosis_par_ == NULL) kurtosis_par_ = new ::task_manager::StatKurtosisTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.kurtosis_par)
  return kurtosis_par_;
}
inline ::task_manager::StatKurtosisTaskParams* AnyTaskParams::release_kurtosis_par() {
  clear_has_kurtosis_par();
  ::task_manager::StatKurtosisTaskParams* temp = kurtosis_par_;
  kurtosis_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_kurtosis_par(::task_manager::StatKurtosisTaskParams* kurtosis_par) {
  delete kurtosis_par_;
  kurtosis_par_ = kurtosis_par;
  if (kurtosis_par) {
    set_has_kurtosis_par();
  } else {
    clear_has_kurtosis_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.kurtosis_par)
}

// optional .task_manager.StatTimeSigTaskParams stattimesig_par = 5;
inline bool AnyTaskParams::has_stattimesig_par() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnyTaskParams::set_has_stattimesig_par() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnyTaskParams::clear_has_stattimesig_par() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnyTaskParams::clear_stattimesig_par() {
  if (stattimesig_par_ != NULL) stattimesig_par_->::task_manager::StatTimeSigTaskParams::Clear();
  clear_has_stattimesig_par();
}
inline const ::task_manager::StatTimeSigTaskParams& AnyTaskParams::stattimesig_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.stattimesig_par)
  return stattimesig_par_ != NULL ? *stattimesig_par_ : *default_instance_->stattimesig_par_;
}
inline ::task_manager::StatTimeSigTaskParams* AnyTaskParams::mutable_stattimesig_par() {
  set_has_stattimesig_par();
  if (stattimesig_par_ == NULL) stattimesig_par_ = new ::task_manager::StatTimeSigTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.stattimesig_par)
  return stattimesig_par_;
}
inline ::task_manager::StatTimeSigTaskParams* AnyTaskParams::release_stattimesig_par() {
  clear_has_stattimesig_par();
  ::task_manager::StatTimeSigTaskParams* temp = stattimesig_par_;
  stattimesig_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_stattimesig_par(::task_manager::StatTimeSigTaskParams* stattimesig_par) {
  delete stattimesig_par_;
  stattimesig_par_ = stattimesig_par;
  if (stattimesig_par) {
    set_has_stattimesig_par();
  } else {
    clear_has_stattimesig_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.stattimesig_par)
}

// optional .task_manager.PlayerTimeSigTaskParams player_par = 6;
inline bool AnyTaskParams::has_player_par() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnyTaskParams::set_has_player_par() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnyTaskParams::clear_has_player_par() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnyTaskParams::clear_player_par() {
  if (player_par_ != NULL) player_par_->::task_manager::PlayerTimeSigTaskParams::Clear();
  clear_has_player_par();
}
inline const ::task_manager::PlayerTimeSigTaskParams& AnyTaskParams::player_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.player_par)
  return player_par_ != NULL ? *player_par_ : *default_instance_->player_par_;
}
inline ::task_manager::PlayerTimeSigTaskParams* AnyTaskParams::mutable_player_par() {
  set_has_player_par();
  if (player_par_ == NULL) player_par_ = new ::task_manager::PlayerTimeSigTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.player_par)
  return player_par_;
}
inline ::task_manager::PlayerTimeSigTaskParams* AnyTaskParams::release_player_par() {
  clear_has_player_par();
  ::task_manager::PlayerTimeSigTaskParams* temp = player_par_;
  player_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_player_par(::task_manager::PlayerTimeSigTaskParams* player_par) {
  delete player_par_;
  player_par_ = player_par;
  if (player_par) {
    set_has_player_par();
  } else {
    clear_has_player_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.player_par)
}

// optional .task_manager.VibegTaskParams vibeg_par = 7;
inline bool AnyTaskParams::has_vibeg_par() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnyTaskParams::set_has_vibeg_par() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnyTaskParams::clear_has_vibeg_par() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnyTaskParams::clear_vibeg_par() {
  if (vibeg_par_ != NULL) vibeg_par_->::task_manager::VibegTaskParams::Clear();
  clear_has_vibeg_par();
}
inline const ::task_manager::VibegTaskParams& AnyTaskParams::vibeg_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.vibeg_par)
  return vibeg_par_ != NULL ? *vibeg_par_ : *default_instance_->vibeg_par_;
}
inline ::task_manager::VibegTaskParams* AnyTaskParams::mutable_vibeg_par() {
  set_has_vibeg_par();
  if (vibeg_par_ == NULL) vibeg_par_ = new ::task_manager::VibegTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.vibeg_par)
  return vibeg_par_;
}
inline ::task_manager::VibegTaskParams* AnyTaskParams::release_vibeg_par() {
  clear_has_vibeg_par();
  ::task_manager::VibegTaskParams* temp = vibeg_par_;
  vibeg_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_vibeg_par(::task_manager::VibegTaskParams* vibeg_par) {
  delete vibeg_par_;
  vibeg_par_ = vibeg_par;
  if (vibeg_par) {
    set_has_vibeg_par();
  } else {
    clear_has_vibeg_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.vibeg_par)
}

// optional .task_manager.QualityTimeSigTaskParams quality_par = 8;
inline bool AnyTaskParams::has_quality_par() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AnyTaskParams::set_has_quality_par() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AnyTaskParams::clear_has_quality_par() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AnyTaskParams::clear_quality_par() {
  if (quality_par_ != NULL) quality_par_->::task_manager::QualityTimeSigTaskParams::Clear();
  clear_has_quality_par();
}
inline const ::task_manager::QualityTimeSigTaskParams& AnyTaskParams::quality_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.quality_par)
  return quality_par_ != NULL ? *quality_par_ : *default_instance_->quality_par_;
}
inline ::task_manager::QualityTimeSigTaskParams* AnyTaskParams::mutable_quality_par() {
  set_has_quality_par();
  if (quality_par_ == NULL) quality_par_ = new ::task_manager::QualityTimeSigTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.quality_par)
  return quality_par_;
}
inline ::task_manager::QualityTimeSigTaskParams* AnyTaskParams::release_quality_par() {
  clear_has_quality_par();
  ::task_manager::QualityTimeSigTaskParams* temp = quality_par_;
  quality_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_quality_par(::task_manager::QualityTimeSigTaskParams* quality_par) {
  delete quality_par_;
  quality_par_ = quality_par;
  if (quality_par) {
    set_has_quality_par();
  } else {
    clear_has_quality_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.quality_par)
}

// optional .task_manager.SaveTimeSigTaskParams savetimesig_par = 9;
inline bool AnyTaskParams::has_savetimesig_par() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AnyTaskParams::set_has_savetimesig_par() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AnyTaskParams::clear_has_savetimesig_par() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AnyTaskParams::clear_savetimesig_par() {
  if (savetimesig_par_ != NULL) savetimesig_par_->::task_manager::SaveTimeSigTaskParams::Clear();
  clear_has_savetimesig_par();
}
inline const ::task_manager::SaveTimeSigTaskParams& AnyTaskParams::savetimesig_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.savetimesig_par)
  return savetimesig_par_ != NULL ? *savetimesig_par_ : *default_instance_->savetimesig_par_;
}
inline ::task_manager::SaveTimeSigTaskParams* AnyTaskParams::mutable_savetimesig_par() {
  set_has_savetimesig_par();
  if (savetimesig_par_ == NULL) savetimesig_par_ = new ::task_manager::SaveTimeSigTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.savetimesig_par)
  return savetimesig_par_;
}
inline ::task_manager::SaveTimeSigTaskParams* AnyTaskParams::release_savetimesig_par() {
  clear_has_savetimesig_par();
  ::task_manager::SaveTimeSigTaskParams* temp = savetimesig_par_;
  savetimesig_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_savetimesig_par(::task_manager::SaveTimeSigTaskParams* savetimesig_par) {
  delete savetimesig_par_;
  savetimesig_par_ = savetimesig_par;
  if (savetimesig_par) {
    set_has_savetimesig_par();
  } else {
    clear_has_savetimesig_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.savetimesig_par)
}

// optional .task_manager.VsensorFrotTaskParams vsensorfrot_par = 10;
inline bool AnyTaskParams::has_vsensorfrot_par() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AnyTaskParams::set_has_vsensorfrot_par() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AnyTaskParams::clear_has_vsensorfrot_par() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AnyTaskParams::clear_vsensorfrot_par() {
  if (vsensorfrot_par_ != NULL) vsensorfrot_par_->::task_manager::VsensorFrotTaskParams::Clear();
  clear_has_vsensorfrot_par();
}
inline const ::task_manager::VsensorFrotTaskParams& AnyTaskParams::vsensorfrot_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.vsensorfrot_par)
  return vsensorfrot_par_ != NULL ? *vsensorfrot_par_ : *default_instance_->vsensorfrot_par_;
}
inline ::task_manager::VsensorFrotTaskParams* AnyTaskParams::mutable_vsensorfrot_par() {
  set_has_vsensorfrot_par();
  if (vsensorfrot_par_ == NULL) vsensorfrot_par_ = new ::task_manager::VsensorFrotTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.vsensorfrot_par)
  return vsensorfrot_par_;
}
inline ::task_manager::VsensorFrotTaskParams* AnyTaskParams::release_vsensorfrot_par() {
  clear_has_vsensorfrot_par();
  ::task_manager::VsensorFrotTaskParams* temp = vsensorfrot_par_;
  vsensorfrot_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_vsensorfrot_par(::task_manager::VsensorFrotTaskParams* vsensorfrot_par) {
  delete vsensorfrot_par_;
  vsensorfrot_par_ = vsensorfrot_par;
  if (vsensorfrot_par) {
    set_has_vsensorfrot_par();
  } else {
    clear_has_vsensorfrot_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.vsensorfrot_par)
}

// optional .task_manager.DecimTimeSigTaskParams decim_par = 11;
inline bool AnyTaskParams::has_decim_par() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AnyTaskParams::set_has_decim_par() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AnyTaskParams::clear_has_decim_par() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AnyTaskParams::clear_decim_par() {
  if (decim_par_ != NULL) decim_par_->::task_manager::DecimTimeSigTaskParams::Clear();
  clear_has_decim_par();
}
inline const ::task_manager::DecimTimeSigTaskParams& AnyTaskParams::decim_par() const {
  // @@protoc_insertion_point(field_get:task_manager.AnyTaskParams.decim_par)
  return decim_par_ != NULL ? *decim_par_ : *default_instance_->decim_par_;
}
inline ::task_manager::DecimTimeSigTaskParams* AnyTaskParams::mutable_decim_par() {
  set_has_decim_par();
  if (decim_par_ == NULL) decim_par_ = new ::task_manager::DecimTimeSigTaskParams;
  // @@protoc_insertion_point(field_mutable:task_manager.AnyTaskParams.decim_par)
  return decim_par_;
}
inline ::task_manager::DecimTimeSigTaskParams* AnyTaskParams::release_decim_par() {
  clear_has_decim_par();
  ::task_manager::DecimTimeSigTaskParams* temp = decim_par_;
  decim_par_ = NULL;
  return temp;
}
inline void AnyTaskParams::set_allocated_decim_par(::task_manager::DecimTimeSigTaskParams* decim_par) {
  delete decim_par_;
  decim_par_ = decim_par;
  if (decim_par) {
    set_has_decim_par();
  } else {
    clear_has_decim_par();
  }
  // @@protoc_insertion_point(field_set_allocated:task_manager.AnyTaskParams.decim_par)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace task_manager

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_5fmanager_2eproto__INCLUDED
