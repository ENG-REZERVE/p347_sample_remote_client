// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace task_manager {

namespace {

const ::google::protobuf::Descriptor* DSPEmulInitParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSPEmulInitParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* LPFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LPFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LPFilter_params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LPFilter_params_reflection_ = NULL;
const ::google::protobuf::Descriptor* BPFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BPFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BPFilter_params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BPFilter_params_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSMPFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSMPFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSMPFilter_params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSMPFilter_params_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HPFilter_params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HPFilter_params_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPFilter_params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPFilter_params_reflection_ = NULL;
const ::google::protobuf::Descriptor* INTGFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INTGFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* INTGFilter_params_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  INTGFilter_params_reflection_ = NULL;
const ::google::protobuf::Descriptor* FParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* TStatRot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TStatRot_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFrotLimits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFrotLimits_reflection_ = NULL;
const ::google::protobuf::Descriptor* RBitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RBitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spectr_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spectr_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vharmonic_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vharmonic_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatKurtosis_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatKurtosis_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatTimeSig_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatTimeSig_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* QualityTimeSig_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QualityTimeSig_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTimeSig_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTimeSig_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* VsensorFrot_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VsensorFrot_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecimTimeSig_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecimTimeSig_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnyTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnyTaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpectrTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpectrTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* VharmonicTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VharmonicTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatKurtosisTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatKurtosisTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatTimeSigTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatTimeSigTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTimeSigTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTimeSigTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* VibegTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VibegTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* QualityTimeSigTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QualityTimeSigTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTimeSigTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTimeSigTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* VsensorFrotTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VsensorFrotTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecimTimeSigTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecimTimeSigTaskParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnyTaskParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnyTaskParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_5fmanager_2eproto() {
  protobuf_AddDesc_task_5fmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task_manager.proto");
  GOOGLE_CHECK(file != NULL);
  DSPEmulInitParams_descriptor_ = file->message_type(0);
  static const int DSPEmulInitParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, atsdtc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, ainitsigbufferlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, asigbufferincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, ainitrotbufferlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, arotbufferincrement_),
  };
  DSPEmulInitParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSPEmulInitParams_descriptor_,
      DSPEmulInitParams::default_instance_,
      DSPEmulInitParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPEmulInitParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSPEmulInitParams));
  IntArray_descriptor_ = file->message_type(1);
  static const int IntArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, values_),
  };
  IntArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntArray_descriptor_,
      IntArray::default_instance_,
      IntArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntArray));
  LPFilter_descriptor_ = file->message_type(2);
  static const int LPFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter, mfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter, rfreq_),
  };
  LPFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LPFilter_descriptor_,
      LPFilter::default_instance_,
      LPFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LPFilter));
  LPFilter_params_descriptor_ = file->message_type(3);
  static const int LPFilter_params_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter_params, lpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter_params, lpfilterdecim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter_params, lpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter_params, lpfilterusualw_),
  };
  LPFilter_params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LPFilter_params_descriptor_,
      LPFilter_params::default_instance_,
      LPFilter_params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter_params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LPFilter_params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LPFilter_params));
  BPFilter_descriptor_ = file->message_type(4);
  static const int BPFilter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, cfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, oct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, dec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, predec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, bpdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, envtype_),
  };
  BPFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BPFilter_descriptor_,
      BPFilter::default_instance_,
      BPFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BPFilter));
  BPFilter_params_descriptor_ = file->message_type(5);
  static const int BPFilter_params_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter_params, bpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter_params, bpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter_params, bpfilterusualw_),
  };
  BPFilter_params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BPFilter_params_descriptor_,
      BPFilter_params::default_instance_,
      BPFilter_params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter_params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BPFilter_params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BPFilter_params));
  RSMPFilter_descriptor_ = file->message_type(6);
  static const int RSMPFilter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, interp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, dec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, rel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, resampletype_),
  };
  RSMPFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSMPFilter_descriptor_,
      RSMPFilter::default_instance_,
      RSMPFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSMPFilter));
  RSMPFilter_params_descriptor_ = file->message_type(7);
  static const int RSMPFilter_params_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter_params, rsmpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter_params, rsmpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter_params, rsmpfilterusualw_),
  };
  RSMPFilter_params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSMPFilter_params_descriptor_,
      RSMPFilter_params::default_instance_,
      RSMPFilter_params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter_params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMPFilter_params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSMPFilter_params));
  HPFilter_descriptor_ = file->message_type(8);
  static const int HPFilter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, sfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, mfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, rfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, hpftype_),
  };
  HPFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFilter_descriptor_,
      HPFilter::default_instance_,
      HPFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFilter));
  HPFilter_params_descriptor_ = file->message_type(9);
  static const int HPFilter_params_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter_params, hpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter_params, hpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter_params, hpfilterparam1_),
  };
  HPFilter_params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HPFilter_params_descriptor_,
      HPFilter_params::default_instance_,
      HPFilter_params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter_params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HPFilter_params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HPFilter_params));
  SPFilter_descriptor_ = file->message_type(10);
  static const int SPFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter, rfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter, spftype_),
  };
  SPFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPFilter_descriptor_,
      SPFilter::default_instance_,
      SPFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPFilter));
  SPFilter_params_descriptor_ = file->message_type(11);
  static const int SPFilter_params_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter_params, spfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter_params, spfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter_params, spfilterusualw_),
  };
  SPFilter_params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPFilter_params_descriptor_,
      SPFilter_params::default_instance_,
      SPFilter_params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter_params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPFilter_params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPFilter_params));
  INTGFilter_descriptor_ = file->message_type(12);
  static const int INTGFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter, intgftype_),
  };
  INTGFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INTGFilter_descriptor_,
      INTGFilter::default_instance_,
      INTGFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INTGFilter));
  INTGFilter_params_descriptor_ = file->message_type(13);
  static const int INTGFilter_params_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter_params, intgfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter_params, intgfiltertype_),
  };
  INTGFilter_params_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      INTGFilter_params_descriptor_,
      INTGFilter_params::default_instance_,
      INTGFilter_params_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter_params, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(INTGFilter_params, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(INTGFilter_params));
  FParams_descriptor_ = file->message_type(14);
  static const int FParams_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, lpf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, bpf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, rsmpf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, hpf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, spf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, intgf_),
  };
  FParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FParams_descriptor_,
      FParams::default_instance_,
      FParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FParams));
  TStatRot_descriptor_ = file->message_type(15);
  static const int TStatRot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStatRot, avgcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStatRot, avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStatRot, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStatRot, max_),
  };
  TStatRot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TStatRot_descriptor_,
      TStatRot::default_instance_,
      TStatRot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStatRot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TStatRot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TStatRot));
  TOffset_descriptor_ = file->message_type(16);
  static const int TOffset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOffset, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOffset, value_),
  };
  TOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOffset_descriptor_,
      TOffset::default_instance_,
      TOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOffset));
  TFrotLimits_descriptor_ = file->message_type(17);
  static const int TFrotLimits_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrotLimits, frot_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrotLimits, frot_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrotLimits, deltafrotonemeas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrotLimits, deltafrotallmeas_),
  };
  TFrotLimits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFrotLimits_descriptor_,
      TFrotLimits::default_instance_,
      TFrotLimits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrotLimits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFrotLimits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFrotLimits));
  RBitem_descriptor_ = file->message_type(18);
  static const int RBitem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, valuey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, valuex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, validextern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, validrough_),
  };
  RBitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RBitem_descriptor_,
      RBitem::default_instance_,
      RBitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RBitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RBitem));
  Spectr_data_descriptor_ = file->message_type(19);
  static const int Spectr_data_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, ftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, flpfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, fbpfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, fstatrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, favgcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, fbegfreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, ffreqstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, flinescnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, fampunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, famp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, fsiamp_),
  };
  Spectr_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spectr_data_descriptor_,
      Spectr_data::default_instance_,
      Spectr_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectr_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spectr_data));
  Vharmonic_data_descriptor_ = file->message_type(20);
  static const int Vharmonic_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, ph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, avgcount_),
  };
  Vharmonic_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vharmonic_data_descriptor_,
      Vharmonic_data::default_instance_,
      Vharmonic_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vharmonic_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vharmonic_data));
  StatKurtosis_data_descriptor_ = file->message_type(21);
  static const int StatKurtosis_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, kurtosis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, peak_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, avgcount_),
  };
  StatKurtosis_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatKurtosis_data_descriptor_,
      StatKurtosis_data::default_instance_,
      StatKurtosis_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosis_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatKurtosis_data));
  StatTimeSig_data_descriptor_ = file->message_type(22);
  static const int StatTimeSig_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, kurtosis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, peak_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, avgcount_),
  };
  StatTimeSig_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatTimeSig_data_descriptor_,
      StatTimeSig_data::default_instance_,
      StatTimeSig_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSig_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatTimeSig_data));
  QualityTimeSig_data_descriptor_ = file->message_type(23);
  static const int QualityTimeSig_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, sigoverflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, sigtoolow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, sigtoohigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, amppeaktopeakcalc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, ampstdcalc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, sigoverflowcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, avgcount_),
  };
  QualityTimeSig_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QualityTimeSig_data_descriptor_,
      QualityTimeSig_data::default_instance_,
      QualityTimeSig_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSig_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QualityTimeSig_data));
  SaveTimeSig_data_descriptor_ = file->message_type(24);
  static const int SaveTimeSig_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSig_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSig_data, avgcount_),
  };
  SaveTimeSig_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTimeSig_data_descriptor_,
      SaveTimeSig_data::default_instance_,
      SaveTimeSig_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSig_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSig_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTimeSig_data));
  VsensorFrot_data_descriptor_ = file->message_type(25);
  static const int VsensorFrot_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrot_data, frot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrot_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrot_data, avgcount_),
  };
  VsensorFrot_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VsensorFrot_data_descriptor_,
      VsensorFrot_data::default_instance_,
      VsensorFrot_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrot_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrot_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VsensorFrot_data));
  DecimTimeSig_data_descriptor_ = file->message_type(26);
  static const int DecimTimeSig_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSig_data, statrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSig_data, avgcount_),
  };
  DecimTimeSig_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecimTimeSig_data_descriptor_,
      DecimTimeSig_data::default_instance_,
      DecimTimeSig_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSig_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSig_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecimTimeSig_data));
  AnyTaskResult_descriptor_ = file->message_type(27);
  static const int AnyTaskResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, harmonic_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, kurtosis_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, stattimesig_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, quality_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, savetimesig_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, vsensorfrot_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, decim_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, spectr_res_),
  };
  AnyTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnyTaskResult_descriptor_,
      AnyTaskResult::default_instance_,
      AnyTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnyTaskResult));
  CommonTaskParams_descriptor_ = file->message_type(28);
  static const int CommonTaskParams_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, deltaoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, monitoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, timesigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, lpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, lpfilterdecim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, lpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, lpfilterusualw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, bpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, bpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, bpfilterusualw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, rsmpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, rsmpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, rsmpfilterusualw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, hpfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, hpfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, hpfilterparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, fparamslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, fparamscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, avgcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, frotlimits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, frotlimitsactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, stabcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, rotcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, waitperiodforrotmetka_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, timesigsrctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, timesigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, inittaskstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, finaltaskstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, tsdtc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, calctypetsdtc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, tde_),
  };
  CommonTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonTaskParams_descriptor_,
      CommonTaskParams::default_instance_,
      CommonTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonTaskParams));
  SpectrTaskParams_descriptor_ = file->message_type(29);
  static const int SpectrTaskParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, spectrclasscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, spectlinesarrindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, spectampunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, removeavgline_),
  };
  SpectrTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpectrTaskParams_descriptor_,
      SpectrTaskParams::default_instance_,
      SpectrTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpectrTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpectrTaskParams));
  VharmonicTaskParams_descriptor_ = file->message_type(30);
  static const int VharmonicTaskParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, stp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, vharmonicscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, vharmonicsavgcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, spectlinesarrindex_),
  };
  VharmonicTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VharmonicTaskParams_descriptor_,
      VharmonicTaskParams::default_instance_,
      VharmonicTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VharmonicTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VharmonicTaskParams));
  StatKurtosisTaskParams_descriptor_ = file->message_type(31);
  static const int StatKurtosisTaskParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosisTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosisTaskParams, onemeastimesiglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosisTaskParams, meascount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosisTaskParams, coefcover_),
  };
  StatKurtosisTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatKurtosisTaskParams_descriptor_,
      StatKurtosisTaskParams::default_instance_,
      StatKurtosisTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosisTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatKurtosisTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatKurtosisTaskParams));
  StatTimeSigTaskParams_descriptor_ = file->message_type(32);
  static const int StatTimeSigTaskParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSigTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSigTaskParams, onemeastimesiglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSigTaskParams, ampunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSigTaskParams, integrateintimedomain_),
  };
  StatTimeSigTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatTimeSigTaskParams_descriptor_,
      StatTimeSigTaskParams::default_instance_,
      StatTimeSigTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSigTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatTimeSigTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatTimeSigTaskParams));
  PlayerTimeSigTaskParams_descriptor_ = file->message_type(33);
  static const int PlayerTimeSigTaskParams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTimeSigTaskParams, cmn_),
  };
  PlayerTimeSigTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTimeSigTaskParams_descriptor_,
      PlayerTimeSigTaskParams::default_instance_,
      PlayerTimeSigTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTimeSigTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTimeSigTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTimeSigTaskParams));
  VibegTaskParams_descriptor_ = file->message_type(34);
  static const int VibegTaskParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibegTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibegTaskParams, frot_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibegTaskParams, frotavgmetkascount_),
  };
  VibegTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VibegTaskParams_descriptor_,
      VibegTaskParams::default_instance_,
      VibegTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibegTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VibegTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VibegTaskParams));
  QualityTimeSigTaskParams_descriptor_ = file->message_type(35);
  static const int QualityTimeSigTaskParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, onemeastimesiglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, amppeaktopeakmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, amppeaktopeakmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, ampstdmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, ampstdmax_),
  };
  QualityTimeSigTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QualityTimeSigTaskParams_descriptor_,
      QualityTimeSigTaskParams::default_instance_,
      QualityTimeSigTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityTimeSigTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QualityTimeSigTaskParams));
  SaveTimeSigTaskParams_descriptor_ = file->message_type(36);
  static const int SaveTimeSigTaskParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, oneparttimesiglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, totaltimesiglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, siglengthwithfssrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, tsdtc_),
  };
  SaveTimeSigTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTimeSigTaskParams_descriptor_,
      SaveTimeSigTaskParams::default_instance_,
      SaveTimeSigTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTimeSigTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTimeSigTaskParams));
  VsensorFrotTaskParams_descriptor_ = file->message_type(37);
  static const int VsensorFrotTaskParams_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, stp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, deltaoffsetinsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, scalekoefffft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, frotmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, frotmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, frotaccelmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, ampmodulmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, stdmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, rbfilterlength_),
  };
  VsensorFrotTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VsensorFrotTaskParams_descriptor_,
      VsensorFrotTaskParams::default_instance_,
      VsensorFrotTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VsensorFrotTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VsensorFrotTaskParams));
  DecimTimeSigTaskParams_descriptor_ = file->message_type(38);
  static const int DecimTimeSigTaskParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSigTaskParams, cmn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSigTaskParams, oneparttimesiglength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSigTaskParams, forgetfssrc_),
  };
  DecimTimeSigTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecimTimeSigTaskParams_descriptor_,
      DecimTimeSigTaskParams::default_instance_,
      DecimTimeSigTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSigTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecimTimeSigTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecimTimeSigTaskParams));
  AnyTaskParams_descriptor_ = file->message_type(39);
  static const int AnyTaskParams_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, spect_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, harmonic_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, kurtosis_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, stattimesig_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, player_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, vibeg_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, quality_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, savetimesig_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, vsensorfrot_par_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, decim_par_),
  };
  AnyTaskParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnyTaskParams_descriptor_,
      AnyTaskParams::default_instance_,
      AnyTaskParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyTaskParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnyTaskParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_5fmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSPEmulInitParams_descriptor_, &DSPEmulInitParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntArray_descriptor_, &IntArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LPFilter_descriptor_, &LPFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LPFilter_params_descriptor_, &LPFilter_params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BPFilter_descriptor_, &BPFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BPFilter_params_descriptor_, &BPFilter_params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSMPFilter_descriptor_, &RSMPFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSMPFilter_params_descriptor_, &RSMPFilter_params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFilter_descriptor_, &HPFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HPFilter_params_descriptor_, &HPFilter_params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPFilter_descriptor_, &SPFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPFilter_params_descriptor_, &SPFilter_params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INTGFilter_descriptor_, &INTGFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    INTGFilter_params_descriptor_, &INTGFilter_params::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FParams_descriptor_, &FParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TStatRot_descriptor_, &TStatRot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOffset_descriptor_, &TOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFrotLimits_descriptor_, &TFrotLimits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RBitem_descriptor_, &RBitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spectr_data_descriptor_, &Spectr_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vharmonic_data_descriptor_, &Vharmonic_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatKurtosis_data_descriptor_, &StatKurtosis_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatTimeSig_data_descriptor_, &StatTimeSig_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QualityTimeSig_data_descriptor_, &QualityTimeSig_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTimeSig_data_descriptor_, &SaveTimeSig_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VsensorFrot_data_descriptor_, &VsensorFrot_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecimTimeSig_data_descriptor_, &DecimTimeSig_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnyTaskResult_descriptor_, &AnyTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonTaskParams_descriptor_, &CommonTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpectrTaskParams_descriptor_, &SpectrTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VharmonicTaskParams_descriptor_, &VharmonicTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatKurtosisTaskParams_descriptor_, &StatKurtosisTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatTimeSigTaskParams_descriptor_, &StatTimeSigTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTimeSigTaskParams_descriptor_, &PlayerTimeSigTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VibegTaskParams_descriptor_, &VibegTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QualityTimeSigTaskParams_descriptor_, &QualityTimeSigTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTimeSigTaskParams_descriptor_, &SaveTimeSigTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VsensorFrotTaskParams_descriptor_, &VsensorFrotTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecimTimeSigTaskParams_descriptor_, &DecimTimeSigTaskParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnyTaskParams_descriptor_, &AnyTaskParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_5fmanager_2eproto() {
  delete DSPEmulInitParams::default_instance_;
  delete DSPEmulInitParams_reflection_;
  delete IntArray::default_instance_;
  delete IntArray_reflection_;
  delete LPFilter::default_instance_;
  delete LPFilter_reflection_;
  delete LPFilter_params::default_instance_;
  delete LPFilter_params_reflection_;
  delete BPFilter::default_instance_;
  delete BPFilter_reflection_;
  delete BPFilter_params::default_instance_;
  delete BPFilter_params_reflection_;
  delete RSMPFilter::default_instance_;
  delete RSMPFilter_reflection_;
  delete RSMPFilter_params::default_instance_;
  delete RSMPFilter_params_reflection_;
  delete HPFilter::default_instance_;
  delete HPFilter_reflection_;
  delete HPFilter_params::default_instance_;
  delete HPFilter_params_reflection_;
  delete SPFilter::default_instance_;
  delete SPFilter_reflection_;
  delete SPFilter_params::default_instance_;
  delete SPFilter_params_reflection_;
  delete INTGFilter::default_instance_;
  delete INTGFilter_reflection_;
  delete INTGFilter_params::default_instance_;
  delete INTGFilter_params_reflection_;
  delete FParams::default_instance_;
  delete FParams_reflection_;
  delete TStatRot::default_instance_;
  delete TStatRot_reflection_;
  delete TOffset::default_instance_;
  delete TOffset_reflection_;
  delete TFrotLimits::default_instance_;
  delete TFrotLimits_reflection_;
  delete RBitem::default_instance_;
  delete RBitem_reflection_;
  delete Spectr_data::default_instance_;
  delete Spectr_data_reflection_;
  delete Vharmonic_data::default_instance_;
  delete Vharmonic_data_reflection_;
  delete StatKurtosis_data::default_instance_;
  delete StatKurtosis_data_reflection_;
  delete StatTimeSig_data::default_instance_;
  delete StatTimeSig_data_reflection_;
  delete QualityTimeSig_data::default_instance_;
  delete QualityTimeSig_data_reflection_;
  delete SaveTimeSig_data::default_instance_;
  delete SaveTimeSig_data_reflection_;
  delete VsensorFrot_data::default_instance_;
  delete VsensorFrot_data_reflection_;
  delete DecimTimeSig_data::default_instance_;
  delete DecimTimeSig_data_reflection_;
  delete AnyTaskResult::default_instance_;
  delete AnyTaskResult_reflection_;
  delete CommonTaskParams::default_instance_;
  delete CommonTaskParams_reflection_;
  delete SpectrTaskParams::default_instance_;
  delete SpectrTaskParams_reflection_;
  delete VharmonicTaskParams::default_instance_;
  delete VharmonicTaskParams_reflection_;
  delete StatKurtosisTaskParams::default_instance_;
  delete StatKurtosisTaskParams_reflection_;
  delete StatTimeSigTaskParams::default_instance_;
  delete StatTimeSigTaskParams_reflection_;
  delete PlayerTimeSigTaskParams::default_instance_;
  delete PlayerTimeSigTaskParams_reflection_;
  delete VibegTaskParams::default_instance_;
  delete VibegTaskParams_reflection_;
  delete QualityTimeSigTaskParams::default_instance_;
  delete QualityTimeSigTaskParams_reflection_;
  delete SaveTimeSigTaskParams::default_instance_;
  delete SaveTimeSigTaskParams_reflection_;
  delete VsensorFrotTaskParams::default_instance_;
  delete VsensorFrotTaskParams_reflection_;
  delete DecimTimeSigTaskParams::default_instance_;
  delete DecimTimeSigTaskParams_reflection_;
  delete AnyTaskParams::default_instance_;
  delete AnyTaskParams_reflection_;
}

void protobuf_AddDesc_task_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022task_manager.proto\022\014task_manager\"\231\001\n\021D"
    "SPEmulInitParams\022\016\n\006ATSDTC\030\001 \002(\r\022\034\n\024AIni"
    "tSigBufferLength\030\002 \002(\r\022\033\n\023ASigBufferIncr"
    "ement\030\003 \002(\r\022\034\n\024AInitRotBufferLength\030\004 \002("
    "\r\022\033\n\023ARotBufferIncrement\030\005 \002(\r\"\036\n\010IntArr"
    "ay\022\022\n\006values\030\001 \003(\005B\002\020\001\"7\n\010LPFilter\022\r\n\005In"
    "dex\030\001 \002(\005\022\r\n\005MFreq\030\002 \002(\001\022\r\n\005RFreq\030\003 \002(\005\""
    "m\n\017LPFilter_params\022\025\n\rLPFilterIndex\030\001 \002("
    "\005\022\025\n\rLPFilterDecim\030\002 \002(\r\022\024\n\014LPFilterType"
    "\030\003 \002(\005\022\026\n\016LPFilterUsualW\030\004 \002(\010\"\201\001\n\010BPFil"
    "ter\022\r\n\005Index\030\001 \002(\005\022\r\n\005CFreq\030\002 \002(\005\022\r\n\005Wid"
    "th\030\003 \002(\005\022\013\n\003Oct\030\004 \002(\005\022\013\n\003Dec\030\005 \002(\005\022\016\n\006Pr"
    "eDec\030\006 \002(\005\022\r\n\005BPDec\030\007 \002(\005\022\017\n\007EnvType\030\010 \002"
    "(\005\"V\n\017BPFilter_params\022\025\n\rBPFilterIndex\030\001"
    " \002(\005\022\024\n\014BPFilterType\030\002 \002(\005\022\026\n\016BPFilterUs"
    "ualW\030\003 \002(\010\"[\n\nRSMPFilter\022\r\n\005Index\030\001 \002(\005\022"
    "\016\n\006Interp\030\002 \002(\005\022\013\n\003Dec\030\003 \002(\005\022\013\n\003Rel\030\004 \002("
    "\001\022\024\n\014ResampleType\030\005 \002(\005\"^\n\021RSMPFilter_pa"
    "rams\022\027\n\017RSMPFilterIndex\030\001 \002(\005\022\026\n\016RSMPFil"
    "terType\030\002 \002(\005\022\030\n\020RSMPFilterUsualW\030\003 \002(\010\""
    "W\n\010HPFilter\022\r\n\005Index\030\001 \002(\005\022\r\n\005SFreq\030\002 \002("
    "\001\022\r\n\005MFreq\030\003 \002(\001\022\r\n\005RFreq\030\004 \002(\005\022\017\n\007HPFTy"
    "pe\030\005 \002(\005\"V\n\017HPFilter_params\022\025\n\rHPFilterI"
    "ndex\030\001 \002(\005\022\024\n\014HPFilterType\030\002 \002(\005\022\026\n\016HPFi"
    "lterParam1\030\003 \002(\001\"9\n\010SPFilter\022\r\n\005Index\030\001 "
    "\002(\005\022\r\n\005RFreq\030\002 \002(\005\022\017\n\007SPFType\030\003 \002(\005\"V\n\017S"
    "PFilter_params\022\025\n\rSPFilterIndex\030\001 \002(\005\022\024\n"
    "\014SPFilterType\030\002 \002(\005\022\026\n\016SPFilterUsualW\030\003 "
    "\002(\010\".\n\nINTGFilter\022\r\n\005Index\030\001 \002(\005\022\021\n\tINTG"
    "FType\030\002 \002(\005\"D\n\021INTGFilter_params\022\027\n\017INTG"
    "FilterIndex\030\001 \002(\005\022\026\n\016INTGFilterType\030\002 \002("
    "\005\"\247\002\n\007FParams\022\014\n\004Type\030\001 \002(\005\022*\n\003LPF\030\002 \001(\013"
    "2\035.task_manager.LPFilter_params\022*\n\003BPF\030\003"
    " \001(\0132\035.task_manager.BPFilter_params\022.\n\005R"
    "SMPF\030\004 \001(\0132\037.task_manager.RSMPFilter_par"
    "ams\022*\n\003HPF\030\005 \001(\0132\035.task_manager.HPFilter"
    "_params\022*\n\003SPF\030\006 \001(\0132\035.task_manager.SPFi"
    "lter_params\022.\n\005INTGF\030\007 \001(\0132\037.task_manage"
    "r.INTGFilter_params\"A\n\010TStatRot\022\016\n\006AvgCn"
    "t\030\001 \002(\005\022\013\n\003Avg\030\002 \002(\001\022\013\n\003Min\030\003 \002(\001\022\013\n\003Max"
    "\030\004 \002(\001\"&\n\007TOffset\022\014\n\004Type\030\001 \002(\005\022\r\n\005Value"
    "\030\002 \002(\003\"e\n\013TFrotLimits\022\020\n\010Frot_min\030\001 \002(\001\022"
    "\020\n\010Frot_max\030\002 \002(\001\022\030\n\020DeltaFrotOneMeas\030\003 "
    "\002(\001\022\030\n\020DeltaFrotAllMeas\030\004 \002(\001\"`\n\006RBitem\022"
    "\016\n\006ValueY\030\001 \002(\001\022\016\n\006ValueX\030\002 \002(\001\022\023\n\013Valid"
    "Extern\030\003 \002(\010\022\r\n\005Valid\030\004 \002(\010\022\022\n\nValidRoug"
    "h\030\005 \002(\010\"\237\002\n\013Spectr_data\022\r\n\005FType\030\001 \002(\r\022)"
    "\n\tFLPFilter\030\002 \002(\0132\026.task_manager.LPFilte"
    "r\022)\n\tFBPFilter\030\003 \002(\0132\026.task_manager.BPFi"
    "lter\022(\n\010FStatRot\030\004 \002(\0132\026.task_manager.TS"
    "tatRot\022\021\n\tFAvgCount\030\005 \002(\r\022\020\n\010FBegFreq\030\006 "
    "\002(\001\022\021\n\tFFreqStep\030\007 \002(\001\022\021\n\tFLinesCnt\030\010 \002("
    "\r\022\020\n\010FAmpUnit\030\t \002(\r\022\020\n\004FAmp\030\n \003(\001B\002\020\001\022\022\n"
    "\006FSIAmp\030\013 \003(\001B\002\020\001\"r\n\016Vharmonic_data\022\013\n\003a"
    "mp\030\001 \002(\001\022\n\n\002ph\030\002 \002(\001\022\014\n\004freq\030\003 \002(\001\022\'\n\007St"
    "atRot\030\004 \002(\0132\026.task_manager.TStatRot\022\020\n\010A"
    "vgCount\030\005 \002(\r\"\252\001\n\021StatKurtosis_data\022\013\n\003m"
    "in\030\001 \002(\001\022\013\n\003max\030\002 \002(\001\022\014\n\004mean\030\003 \002(\001\022\013\n\003s"
    "td\030\004 \002(\001\022\020\n\010kurtosis\030\005 \002(\001\022\023\n\013peak_facto"
    "r\030\006 \002(\001\022\'\n\007StatRot\030\007 \002(\0132\026.task_manager."
    "TStatRot\022\020\n\010AvgCount\030\010 \002(\r\"\251\001\n\020StatTimeS"
    "ig_data\022\013\n\003min\030\001 \002(\001\022\013\n\003max\030\002 \002(\001\022\014\n\004mea"
    "n\030\003 \002(\001\022\013\n\003std\030\004 \002(\001\022\020\n\010kurtosis\030\005 \002(\001\022\023"
    "\n\013peak_factor\030\006 \002(\001\022\'\n\007StatRot\030\007 \002(\0132\026.t"
    "ask_manager.TStatRot\022\020\n\010AvgCount\030\010 \002(\r\"\325"
    "\001\n\023QualityTimeSig_data\022\023\n\013SigOverFlow\030\001 "
    "\002(\010\022\021\n\tSigTooLow\030\002 \002(\010\022\022\n\nSigTooHigh\030\003 \002"
    "(\010\022\031\n\021AmpPeakToPeakCalc\030\004 \002(\001\022\022\n\nAmpStdC"
    "alc\030\005 \002(\001\022\030\n\020SigOverFlowCount\030\006 \002(\005\022\'\n\007S"
    "tatRot\030\007 \002(\0132\026.task_manager.TStatRot\022\020\n\010"
    "AvgCount\030\010 \002(\r\"M\n\020SaveTimeSig_data\022\'\n\007St"
    "atRot\030\001 \002(\0132\026.task_manager.TStatRot\022\020\n\010A"
    "vgCount\030\002 \002(\r\"q\n\020VsensorFrot_data\022\"\n\004Fro"
    "t\030\001 \002(\0132\024.task_manager.RBitem\022\'\n\007StatRot"
    "\030\002 \002(\0132\026.task_manager.TStatRot\022\020\n\010AvgCou"
    "nt\030\003 \002(\r\"N\n\021DecimTimeSig_data\022\'\n\007StatRot"
    "\030\001 \002(\0132\026.task_manager.TStatRot\022\020\n\010AvgCou"
    "nt\030\002 \002(\r\"\324\003\n\rAnyTaskResult\022\022\n\nerror_code"
    "\030\001 \002(\005\0222\n\014harmonic_res\030\002 \001(\0132\034.task_mana"
    "ger.Vharmonic_data\0225\n\014kurtosis_res\030\003 \001(\013"
    "2\037.task_manager.StatKurtosis_data\0227\n\017sta"
    "ttimesig_res\030\004 \001(\0132\036.task_manager.StatTi"
    "meSig_data\0226\n\013quality_res\030\005 \001(\0132!.task_m"
    "anager.QualityTimeSig_data\0227\n\017savetimesi"
    "g_res\030\006 \001(\0132\036.task_manager.SaveTimeSig_d"
    "ata\0227\n\017vsensorfrot_res\030\007 \001(\0132\036.task_mana"
    "ger.VsensorFrot_data\0222\n\tdecim_res\030\010 \001(\0132"
    "\037.task_manager.DecimTimeSig_data\022-\n\nspec"
    "tr_res\030\t \001(\0132\031.task_manager.Spectr_data\""
    "\261\006\n\020CommonTaskParams\022%\n\006OffSet\030\001 \002(\0132\025.t"
    "ask_manager.TOffset\022*\n\013DeltaOffSet\030\002 \002(\013"
    "2\025.task_manager.TOffset\022\022\n\nMonitoring\030\003 "
    "\002(\010\022\023\n\013TimesigType\030\004 \002(\005\022\025\n\rLPFilterInde"
    "x\030\005 \002(\005\022\025\n\rLPFilterDecim\030\006 \002(\r\022\024\n\014LPFilt"
    "erType\030\007 \002(\005\022\026\n\016LPFilterUsualW\030\010 \002(\010\022\025\n\r"
    "BPFilterIndex\030\t \002(\005\022\024\n\014BPFilterType\030\n \002("
    "\005\022\026\n\016BPFilterUsualW\030\013 \002(\010\022\027\n\017RSMPFilterI"
    "ndex\030\014 \002(\005\022\026\n\016RSMPFilterType\030\r \002(\005\022\030\n\020RS"
    "MPFilterUsualW\030\016 \002(\010\022\025\n\rHPFilterIndex\030\017 "
    "\002(\005\022\024\n\014HPFilterType\030\020 \002(\005\022\026\n\016HPFilterPar"
    "am1\030\021 \002(\001\022*\n\013FParamsList\030\022 \003(\0132\025.task_ma"
    "nager.FParams\022\024\n\014FParamsCount\030\023 \002(\005\022\020\n\010A"
    "vgCount\030\024 \002(\005\022-\n\nFrotLimits\030\025 \002(\0132\031.task"
    "_manager.TFrotLimits\022\030\n\020FrotLimitsActive"
    "\030\026 \002(\010\022\023\n\013StabControl\030\027 \002(\010\022\022\n\nRotContro"
    "l\030\030 \002(\010\022\035\n\025WaitPeriodForRotMetka\030\031 \002(\001\022\026"
    "\n\016TimeSigSrcType\030\032 \002(\005\022\021\n\tTimeSigID\030\033 \002("
    "\005\022\025\n\rInitTaskState\030\034 \002(\005\022\026\n\016FinalTaskSta"
    "te\030\035 \002(\005\022\r\n\005TSDTC\030\036 \002(\005\022\025\n\rCalcTypeTSDTC"
    "\030\037 \002(\005\022\013\n\003TDE\030  \002(\005\"\241\001\n\020SpectrTaskParams"
    "\022+\n\003CMN\030\001 \002(\0132\036.task_manager.CommonTaskP"
    "arams\022\027\n\017SpectrClassCode\030\002 \002(\005\022\032\n\022SpectL"
    "inesArrIndex\030\003 \002(\005\022\024\n\014SpectAmpUnit\030\004 \002(\r"
    "\022\025\n\rRemoveAvgLine\030\005 \002(\010\"\300\001\n\023VharmonicTas"
    "kParams\022+\n\003STP\030\001 \001(\0132\036.task_manager.Spec"
    "trTaskParams\022+\n\003CMN\030\002 \002(\0132\036.task_manager"
    ".CommonTaskParams\022\027\n\017VHarmonicsCount\030\003 \002"
    "(\005\022\032\n\022VHarmonicsAvgCount\030\004 \001(\005\022\032\n\022SpectL"
    "inesArrIndex\030\005 \002(\005\"\211\001\n\026StatKurtosisTaskP"
    "arams\022+\n\003CMN\030\001 \002(\0132\036.task_manager.Common"
    "TaskParams\022\034\n\024OneMeasTimeSigLength\030\002 \002(\005"
    "\022\021\n\tMeasCount\030\003 \002(\005\022\021\n\tCoefCover\030\004 \002(\001\"\222"
    "\001\n\025StatTimeSigTaskParams\022+\n\003CMN\030\001 \002(\0132\036."
    "task_manager.CommonTaskParams\022\034\n\024OneMeas"
    "TimeSigLength\030\002 \002(\005\022\017\n\007AmpUnit\030\003 \002(\r\022\035\n\025"
    "IntegrateInTimeDomain\030\004 \002(\010\"F\n\027PlayerTim"
    "eSigTaskParams\022+\n\003CMN\030\001 \002(\0132\036.task_manag"
    "er.CommonTaskParams\"m\n\017VibegTaskParams\022+"
    "\n\003CMN\030\001 \002(\0132\036.task_manager.CommonTaskPar"
    "ams\022\021\n\tFrot_base\030\002 \002(\001\022\032\n\022FrotAvgMetkasC"
    "ount\030\003 \002(\r\"\277\001\n\030QualityTimeSigTaskParams\022"
    "+\n\003CMN\030\001 \002(\0132\036.task_manager.CommonTaskPa"
    "rams\022\034\n\024OneMeasTimeSigLength\030\002 \002(\005\022\030\n\020Am"
    "pPeakToPeakMin\030\003 \002(\001\022\030\n\020AmpPeakToPeakMax"
    "\030\004 \002(\001\022\021\n\tAmpStdMin\030\005 \002(\001\022\021\n\tAmpStdMax\030\006"
    " \002(\001\"\273\001\n\025SaveTimeSigTaskParams\022+\n\003CMN\030\001 "
    "\002(\0132\036.task_manager.CommonTaskParams\022\020\n\010F"
    "ileName\030\002 \002(\t\022\034\n\024OnePartTimeSigLength\030\003 "
    "\002(\r\022\032\n\022TotalTimeSigLength\030\004 \002(\r\022\032\n\022SigLe"
    "ngthWithFsSrc\030\005 \002(\010\022\r\n\005TSDTC\030\006 \002(\r\"\227\002\n\025V"
    "sensorFrotTaskParams\022+\n\003CMN\030\001 \001(\0132\036.task"
    "_manager.CommonTaskParams\022+\n\003STP\030\002 \001(\0132\036"
    ".task_manager.SpectrTaskParams\022\030\n\020DeltaO"
    "ffSetInSec\030\003 \002(\001\022\025\n\rScaleKoeffFFt\030\004 \002(\r\022"
    "\017\n\007FrotMin\030\005 \002(\001\022\017\n\007FrotMax\030\006 \002(\001\022\024\n\014Fro"
    "tAccelMax\030\007 \002(\001\022\023\n\013AmpModulMin\030\010 \002(\001\022\016\n\006"
    "STDMin\030\t \002(\001\022\026\n\016RBFilterLength\030\n \002(\005\"x\n\026"
    "DecimTimeSigTaskParams\022+\n\003CMN\030\001 \002(\0132\036.ta"
    "sk_manager.CommonTaskParams\022\034\n\024OnePartTi"
    "meSigLength\030\002 \002(\r\022\023\n\013ForgetFsSrc\030\003 \002(\010\"\350"
    "\004\n\rAnyTaskParams\022\022\n\nerror_code\030\001 \002(\005\0221\n\t"
    "spect_par\030\002 \001(\0132\036.task_manager.SpectrTas"
    "kParams\0227\n\014harmonic_par\030\003 \001(\0132!.task_man"
    "ager.VharmonicTaskParams\022:\n\014kurtosis_par"
    "\030\004 \001(\0132$.task_manager.StatKurtosisTaskPa"
    "rams\022<\n\017stattimesig_par\030\005 \001(\0132#.task_man"
    "ager.StatTimeSigTaskParams\0229\n\nplayer_par"
    "\030\006 \001(\0132%.task_manager.PlayerTimeSigTaskP"
    "arams\0220\n\tvibeg_par\030\007 \001(\0132\035.task_manager."
    "VibegTaskParams\022;\n\013quality_par\030\010 \001(\0132&.t"
    "ask_manager.QualityTimeSigTaskParams\022<\n\017"
    "savetimesig_par\030\t \001(\0132#.task_manager.Sav"
    "eTimeSigTaskParams\022<\n\017vsensorfrot_par\030\n "
    "\001(\0132#.task_manager.VsensorFrotTaskParams"
    "\0227\n\tdecim_par\030\013 \001(\0132$.task_manager.Decim"
    "TimeSigTaskParams", 6617);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task_manager.proto", &protobuf_RegisterTypes);
  DSPEmulInitParams::default_instance_ = new DSPEmulInitParams();
  IntArray::default_instance_ = new IntArray();
  LPFilter::default_instance_ = new LPFilter();
  LPFilter_params::default_instance_ = new LPFilter_params();
  BPFilter::default_instance_ = new BPFilter();
  BPFilter_params::default_instance_ = new BPFilter_params();
  RSMPFilter::default_instance_ = new RSMPFilter();
  RSMPFilter_params::default_instance_ = new RSMPFilter_params();
  HPFilter::default_instance_ = new HPFilter();
  HPFilter_params::default_instance_ = new HPFilter_params();
  SPFilter::default_instance_ = new SPFilter();
  SPFilter_params::default_instance_ = new SPFilter_params();
  INTGFilter::default_instance_ = new INTGFilter();
  INTGFilter_params::default_instance_ = new INTGFilter_params();
  FParams::default_instance_ = new FParams();
  TStatRot::default_instance_ = new TStatRot();
  TOffset::default_instance_ = new TOffset();
  TFrotLimits::default_instance_ = new TFrotLimits();
  RBitem::default_instance_ = new RBitem();
  Spectr_data::default_instance_ = new Spectr_data();
  Vharmonic_data::default_instance_ = new Vharmonic_data();
  StatKurtosis_data::default_instance_ = new StatKurtosis_data();
  StatTimeSig_data::default_instance_ = new StatTimeSig_data();
  QualityTimeSig_data::default_instance_ = new QualityTimeSig_data();
  SaveTimeSig_data::default_instance_ = new SaveTimeSig_data();
  VsensorFrot_data::default_instance_ = new VsensorFrot_data();
  DecimTimeSig_data::default_instance_ = new DecimTimeSig_data();
  AnyTaskResult::default_instance_ = new AnyTaskResult();
  CommonTaskParams::default_instance_ = new CommonTaskParams();
  SpectrTaskParams::default_instance_ = new SpectrTaskParams();
  VharmonicTaskParams::default_instance_ = new VharmonicTaskParams();
  StatKurtosisTaskParams::default_instance_ = new StatKurtosisTaskParams();
  StatTimeSigTaskParams::default_instance_ = new StatTimeSigTaskParams();
  PlayerTimeSigTaskParams::default_instance_ = new PlayerTimeSigTaskParams();
  VibegTaskParams::default_instance_ = new VibegTaskParams();
  QualityTimeSigTaskParams::default_instance_ = new QualityTimeSigTaskParams();
  SaveTimeSigTaskParams::default_instance_ = new SaveTimeSigTaskParams();
  VsensorFrotTaskParams::default_instance_ = new VsensorFrotTaskParams();
  DecimTimeSigTaskParams::default_instance_ = new DecimTimeSigTaskParams();
  AnyTaskParams::default_instance_ = new AnyTaskParams();
  DSPEmulInitParams::default_instance_->InitAsDefaultInstance();
  IntArray::default_instance_->InitAsDefaultInstance();
  LPFilter::default_instance_->InitAsDefaultInstance();
  LPFilter_params::default_instance_->InitAsDefaultInstance();
  BPFilter::default_instance_->InitAsDefaultInstance();
  BPFilter_params::default_instance_->InitAsDefaultInstance();
  RSMPFilter::default_instance_->InitAsDefaultInstance();
  RSMPFilter_params::default_instance_->InitAsDefaultInstance();
  HPFilter::default_instance_->InitAsDefaultInstance();
  HPFilter_params::default_instance_->InitAsDefaultInstance();
  SPFilter::default_instance_->InitAsDefaultInstance();
  SPFilter_params::default_instance_->InitAsDefaultInstance();
  INTGFilter::default_instance_->InitAsDefaultInstance();
  INTGFilter_params::default_instance_->InitAsDefaultInstance();
  FParams::default_instance_->InitAsDefaultInstance();
  TStatRot::default_instance_->InitAsDefaultInstance();
  TOffset::default_instance_->InitAsDefaultInstance();
  TFrotLimits::default_instance_->InitAsDefaultInstance();
  RBitem::default_instance_->InitAsDefaultInstance();
  Spectr_data::default_instance_->InitAsDefaultInstance();
  Vharmonic_data::default_instance_->InitAsDefaultInstance();
  StatKurtosis_data::default_instance_->InitAsDefaultInstance();
  StatTimeSig_data::default_instance_->InitAsDefaultInstance();
  QualityTimeSig_data::default_instance_->InitAsDefaultInstance();
  SaveTimeSig_data::default_instance_->InitAsDefaultInstance();
  VsensorFrot_data::default_instance_->InitAsDefaultInstance();
  DecimTimeSig_data::default_instance_->InitAsDefaultInstance();
  AnyTaskResult::default_instance_->InitAsDefaultInstance();
  CommonTaskParams::default_instance_->InitAsDefaultInstance();
  SpectrTaskParams::default_instance_->InitAsDefaultInstance();
  VharmonicTaskParams::default_instance_->InitAsDefaultInstance();
  StatKurtosisTaskParams::default_instance_->InitAsDefaultInstance();
  StatTimeSigTaskParams::default_instance_->InitAsDefaultInstance();
  PlayerTimeSigTaskParams::default_instance_->InitAsDefaultInstance();
  VibegTaskParams::default_instance_->InitAsDefaultInstance();
  QualityTimeSigTaskParams::default_instance_->InitAsDefaultInstance();
  SaveTimeSigTaskParams::default_instance_->InitAsDefaultInstance();
  VsensorFrotTaskParams::default_instance_->InitAsDefaultInstance();
  DecimTimeSigTaskParams::default_instance_->InitAsDefaultInstance();
  AnyTaskParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_5fmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_5fmanager_2eproto {
  StaticDescriptorInitializer_task_5fmanager_2eproto() {
    protobuf_AddDesc_task_5fmanager_2eproto();
  }
} static_descriptor_initializer_task_5fmanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DSPEmulInitParams::kATSDTCFieldNumber;
const int DSPEmulInitParams::kAInitSigBufferLengthFieldNumber;
const int DSPEmulInitParams::kASigBufferIncrementFieldNumber;
const int DSPEmulInitParams::kAInitRotBufferLengthFieldNumber;
const int DSPEmulInitParams::kARotBufferIncrementFieldNumber;
#endif  // !_MSC_VER

DSPEmulInitParams::DSPEmulInitParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.DSPEmulInitParams)
}

void DSPEmulInitParams::InitAsDefaultInstance() {
}

DSPEmulInitParams::DSPEmulInitParams(const DSPEmulInitParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.DSPEmulInitParams)
}

void DSPEmulInitParams::SharedCtor() {
  _cached_size_ = 0;
  atsdtc_ = 0u;
  ainitsigbufferlength_ = 0u;
  asigbufferincrement_ = 0u;
  ainitrotbufferlength_ = 0u;
  arotbufferincrement_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSPEmulInitParams::~DSPEmulInitParams() {
  // @@protoc_insertion_point(destructor:task_manager.DSPEmulInitParams)
  SharedDtor();
}

void DSPEmulInitParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DSPEmulInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSPEmulInitParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSPEmulInitParams_descriptor_;
}

const DSPEmulInitParams& DSPEmulInitParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

DSPEmulInitParams* DSPEmulInitParams::default_instance_ = NULL;

DSPEmulInitParams* DSPEmulInitParams::New() const {
  return new DSPEmulInitParams;
}

void DSPEmulInitParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DSPEmulInitParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(atsdtc_, arotbufferincrement_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSPEmulInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.DSPEmulInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ATSDTC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atsdtc_)));
          set_has_atsdtc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AInitSigBufferLength;
        break;
      }

      // required uint32 AInitSigBufferLength = 2;
      case 2: {
        if (tag == 16) {
         parse_AInitSigBufferLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ainitsigbufferlength_)));
          set_has_ainitsigbufferlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ASigBufferIncrement;
        break;
      }

      // required uint32 ASigBufferIncrement = 3;
      case 3: {
        if (tag == 24) {
         parse_ASigBufferIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asigbufferincrement_)));
          set_has_asigbufferincrement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AInitRotBufferLength;
        break;
      }

      // required uint32 AInitRotBufferLength = 4;
      case 4: {
        if (tag == 32) {
         parse_AInitRotBufferLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ainitrotbufferlength_)));
          set_has_ainitrotbufferlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ARotBufferIncrement;
        break;
      }

      // required uint32 ARotBufferIncrement = 5;
      case 5: {
        if (tag == 40) {
         parse_ARotBufferIncrement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arotbufferincrement_)));
          set_has_arotbufferincrement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.DSPEmulInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.DSPEmulInitParams)
  return false;
#undef DO_
}

void DSPEmulInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.DSPEmulInitParams)
  // required uint32 ATSDTC = 1;
  if (has_atsdtc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atsdtc(), output);
  }

  // required uint32 AInitSigBufferLength = 2;
  if (has_ainitsigbufferlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ainitsigbufferlength(), output);
  }

  // required uint32 ASigBufferIncrement = 3;
  if (has_asigbufferincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->asigbufferincrement(), output);
  }

  // required uint32 AInitRotBufferLength = 4;
  if (has_ainitrotbufferlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ainitrotbufferlength(), output);
  }

  // required uint32 ARotBufferIncrement = 5;
  if (has_arotbufferincrement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->arotbufferincrement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.DSPEmulInitParams)
}

::google::protobuf::uint8* DSPEmulInitParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.DSPEmulInitParams)
  // required uint32 ATSDTC = 1;
  if (has_atsdtc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atsdtc(), target);
  }

  // required uint32 AInitSigBufferLength = 2;
  if (has_ainitsigbufferlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ainitsigbufferlength(), target);
  }

  // required uint32 ASigBufferIncrement = 3;
  if (has_asigbufferincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->asigbufferincrement(), target);
  }

  // required uint32 AInitRotBufferLength = 4;
  if (has_ainitrotbufferlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ainitrotbufferlength(), target);
  }

  // required uint32 ARotBufferIncrement = 5;
  if (has_arotbufferincrement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->arotbufferincrement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.DSPEmulInitParams)
  return target;
}

int DSPEmulInitParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ATSDTC = 1;
    if (has_atsdtc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atsdtc());
    }

    // required uint32 AInitSigBufferLength = 2;
    if (has_ainitsigbufferlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ainitsigbufferlength());
    }

    // required uint32 ASigBufferIncrement = 3;
    if (has_asigbufferincrement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asigbufferincrement());
    }

    // required uint32 AInitRotBufferLength = 4;
    if (has_ainitrotbufferlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ainitrotbufferlength());
    }

    // required uint32 ARotBufferIncrement = 5;
    if (has_arotbufferincrement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arotbufferincrement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSPEmulInitParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSPEmulInitParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSPEmulInitParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSPEmulInitParams::MergeFrom(const DSPEmulInitParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atsdtc()) {
      set_atsdtc(from.atsdtc());
    }
    if (from.has_ainitsigbufferlength()) {
      set_ainitsigbufferlength(from.ainitsigbufferlength());
    }
    if (from.has_asigbufferincrement()) {
      set_asigbufferincrement(from.asigbufferincrement());
    }
    if (from.has_ainitrotbufferlength()) {
      set_ainitrotbufferlength(from.ainitrotbufferlength());
    }
    if (from.has_arotbufferincrement()) {
      set_arotbufferincrement(from.arotbufferincrement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSPEmulInitParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSPEmulInitParams::CopyFrom(const DSPEmulInitParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPEmulInitParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DSPEmulInitParams::Swap(DSPEmulInitParams* other) {
  if (other != this) {
    std::swap(atsdtc_, other->atsdtc_);
    std::swap(ainitsigbufferlength_, other->ainitsigbufferlength_);
    std::swap(asigbufferincrement_, other->asigbufferincrement_);
    std::swap(ainitrotbufferlength_, other->ainitrotbufferlength_);
    std::swap(arotbufferincrement_, other->arotbufferincrement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSPEmulInitParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSPEmulInitParams_descriptor_;
  metadata.reflection = DSPEmulInitParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntArray::kValuesFieldNumber;
#endif  // !_MSC_VER

IntArray::IntArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.IntArray)
}

void IntArray::InitAsDefaultInstance() {
}

IntArray::IntArray(const IntArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.IntArray)
}

void IntArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntArray::~IntArray() {
  // @@protoc_insertion_point(destructor:task_manager.IntArray)
  SharedDtor();
}

void IntArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntArray_descriptor_;
}

const IntArray& IntArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

IntArray* IntArray::default_instance_ = NULL;

IntArray* IntArray::New() const {
  return new IntArray;
}

void IntArray::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.IntArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 values = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_values())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.IntArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.IntArray)
  return false;
#undef DO_
}

void IntArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.IntArray)
  // repeated int32 values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.IntArray)
}

::google::protobuf::uint8* IntArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.IntArray)
  // repeated int32 values = 1 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.IntArray)
  return target;
}

int IntArray::ByteSize() const {
  int total_size = 0;

  // repeated int32 values = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntArray::MergeFrom(const IntArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntArray::CopyFrom(const IntArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntArray::IsInitialized() const {

  return true;
}

void IntArray::Swap(IntArray* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntArray_descriptor_;
  metadata.reflection = IntArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LPFilter::kIndexFieldNumber;
const int LPFilter::kMFreqFieldNumber;
const int LPFilter::kRFreqFieldNumber;
#endif  // !_MSC_VER

LPFilter::LPFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.LPFilter)
}

void LPFilter::InitAsDefaultInstance() {
}

LPFilter::LPFilter(const LPFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.LPFilter)
}

void LPFilter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  mfreq_ = 0;
  rfreq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LPFilter::~LPFilter() {
  // @@protoc_insertion_point(destructor:task_manager.LPFilter)
  SharedDtor();
}

void LPFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LPFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LPFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LPFilter_descriptor_;
}

const LPFilter& LPFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

LPFilter* LPFilter::default_instance_ = NULL;

LPFilter* LPFilter::New() const {
  return new LPFilter;
}

void LPFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LPFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mfreq_, rfreq_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LPFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.LPFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_MFreq;
        break;
      }

      // required double MFreq = 2;
      case 2: {
        if (tag == 17) {
         parse_MFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mfreq_)));
          set_has_mfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RFreq;
        break;
      }

      // required int32 RFreq = 3;
      case 3: {
        if (tag == 24) {
         parse_RFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfreq_)));
          set_has_rfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.LPFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.LPFilter)
  return false;
#undef DO_
}

void LPFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.LPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required double MFreq = 2;
  if (has_mfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mfreq(), output);
  }

  // required int32 RFreq = 3;
  if (has_rfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rfreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.LPFilter)
}

::google::protobuf::uint8* LPFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.LPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required double MFreq = 2;
  if (has_mfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mfreq(), target);
  }

  // required int32 RFreq = 3;
  if (has_rfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rfreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.LPFilter)
  return target;
}

int LPFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required double MFreq = 2;
    if (has_mfreq()) {
      total_size += 1 + 8;
    }

    // required int32 RFreq = 3;
    if (has_rfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LPFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LPFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LPFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LPFilter::MergeFrom(const LPFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_mfreq()) {
      set_mfreq(from.mfreq());
    }
    if (from.has_rfreq()) {
      set_rfreq(from.rfreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LPFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LPFilter::CopyFrom(const LPFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LPFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LPFilter::Swap(LPFilter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(mfreq_, other->mfreq_);
    std::swap(rfreq_, other->rfreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LPFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LPFilter_descriptor_;
  metadata.reflection = LPFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LPFilter_params::kLPFilterIndexFieldNumber;
const int LPFilter_params::kLPFilterDecimFieldNumber;
const int LPFilter_params::kLPFilterTypeFieldNumber;
const int LPFilter_params::kLPFilterUsualWFieldNumber;
#endif  // !_MSC_VER

LPFilter_params::LPFilter_params()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.LPFilter_params)
}

void LPFilter_params::InitAsDefaultInstance() {
}

LPFilter_params::LPFilter_params(const LPFilter_params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.LPFilter_params)
}

void LPFilter_params::SharedCtor() {
  _cached_size_ = 0;
  lpfilterindex_ = 0;
  lpfilterdecim_ = 0u;
  lpfiltertype_ = 0;
  lpfilterusualw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LPFilter_params::~LPFilter_params() {
  // @@protoc_insertion_point(destructor:task_manager.LPFilter_params)
  SharedDtor();
}

void LPFilter_params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LPFilter_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LPFilter_params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LPFilter_params_descriptor_;
}

const LPFilter_params& LPFilter_params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

LPFilter_params* LPFilter_params::default_instance_ = NULL;

LPFilter_params* LPFilter_params::New() const {
  return new LPFilter_params;
}

void LPFilter_params::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LPFilter_params*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lpfilterindex_, lpfilterusualw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LPFilter_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.LPFilter_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 LPFilterIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lpfilterindex_)));
          set_has_lpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LPFilterDecim;
        break;
      }

      // required uint32 LPFilterDecim = 2;
      case 2: {
        if (tag == 16) {
         parse_LPFilterDecim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lpfilterdecim_)));
          set_has_lpfilterdecim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LPFilterType;
        break;
      }

      // required int32 LPFilterType = 3;
      case 3: {
        if (tag == 24) {
         parse_LPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lpfiltertype_)));
          set_has_lpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LPFilterUsualW;
        break;
      }

      // required bool LPFilterUsualW = 4;
      case 4: {
        if (tag == 32) {
         parse_LPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lpfilterusualw_)));
          set_has_lpfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.LPFilter_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.LPFilter_params)
  return false;
#undef DO_
}

void LPFilter_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.LPFilter_params)
  // required int32 LPFilterIndex = 1;
  if (has_lpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lpfilterindex(), output);
  }

  // required uint32 LPFilterDecim = 2;
  if (has_lpfilterdecim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lpfilterdecim(), output);
  }

  // required int32 LPFilterType = 3;
  if (has_lpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lpfiltertype(), output);
  }

  // required bool LPFilterUsualW = 4;
  if (has_lpfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->lpfilterusualw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.LPFilter_params)
}

::google::protobuf::uint8* LPFilter_params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.LPFilter_params)
  // required int32 LPFilterIndex = 1;
  if (has_lpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lpfilterindex(), target);
  }

  // required uint32 LPFilterDecim = 2;
  if (has_lpfilterdecim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lpfilterdecim(), target);
  }

  // required int32 LPFilterType = 3;
  if (has_lpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lpfiltertype(), target);
  }

  // required bool LPFilterUsualW = 4;
  if (has_lpfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->lpfilterusualw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.LPFilter_params)
  return target;
}

int LPFilter_params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 LPFilterIndex = 1;
    if (has_lpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lpfilterindex());
    }

    // required uint32 LPFilterDecim = 2;
    if (has_lpfilterdecim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lpfilterdecim());
    }

    // required int32 LPFilterType = 3;
    if (has_lpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lpfiltertype());
    }

    // required bool LPFilterUsualW = 4;
    if (has_lpfilterusualw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LPFilter_params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LPFilter_params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LPFilter_params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LPFilter_params::MergeFrom(const LPFilter_params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lpfilterindex()) {
      set_lpfilterindex(from.lpfilterindex());
    }
    if (from.has_lpfilterdecim()) {
      set_lpfilterdecim(from.lpfilterdecim());
    }
    if (from.has_lpfiltertype()) {
      set_lpfiltertype(from.lpfiltertype());
    }
    if (from.has_lpfilterusualw()) {
      set_lpfilterusualw(from.lpfilterusualw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LPFilter_params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LPFilter_params::CopyFrom(const LPFilter_params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LPFilter_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LPFilter_params::Swap(LPFilter_params* other) {
  if (other != this) {
    std::swap(lpfilterindex_, other->lpfilterindex_);
    std::swap(lpfilterdecim_, other->lpfilterdecim_);
    std::swap(lpfiltertype_, other->lpfiltertype_);
    std::swap(lpfilterusualw_, other->lpfilterusualw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LPFilter_params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LPFilter_params_descriptor_;
  metadata.reflection = LPFilter_params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BPFilter::kIndexFieldNumber;
const int BPFilter::kCFreqFieldNumber;
const int BPFilter::kWidthFieldNumber;
const int BPFilter::kOctFieldNumber;
const int BPFilter::kDecFieldNumber;
const int BPFilter::kPreDecFieldNumber;
const int BPFilter::kBPDecFieldNumber;
const int BPFilter::kEnvTypeFieldNumber;
#endif  // !_MSC_VER

BPFilter::BPFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.BPFilter)
}

void BPFilter::InitAsDefaultInstance() {
}

BPFilter::BPFilter(const BPFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.BPFilter)
}

void BPFilter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  cfreq_ = 0;
  width_ = 0;
  oct_ = 0;
  dec_ = 0;
  predec_ = 0;
  bpdec_ = 0;
  envtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BPFilter::~BPFilter() {
  // @@protoc_insertion_point(destructor:task_manager.BPFilter)
  SharedDtor();
}

void BPFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BPFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BPFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BPFilter_descriptor_;
}

const BPFilter& BPFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

BPFilter* BPFilter::default_instance_ = NULL;

BPFilter* BPFilter::New() const {
  return new BPFilter;
}

void BPFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BPFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(index_, envtype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BPFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.BPFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CFreq;
        break;
      }

      // required int32 CFreq = 2;
      case 2: {
        if (tag == 16) {
         parse_CFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfreq_)));
          set_has_cfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // required int32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Oct;
        break;
      }

      // required int32 Oct = 4;
      case 4: {
        if (tag == 32) {
         parse_Oct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oct_)));
          set_has_oct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Dec;
        break;
      }

      // required int32 Dec = 5;
      case 5: {
        if (tag == 40) {
         parse_Dec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dec_)));
          set_has_dec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PreDec;
        break;
      }

      // required int32 PreDec = 6;
      case 6: {
        if (tag == 48) {
         parse_PreDec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predec_)));
          set_has_predec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BPDec;
        break;
      }

      // required int32 BPDec = 7;
      case 7: {
        if (tag == 56) {
         parse_BPDec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpdec_)));
          set_has_bpdec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_EnvType;
        break;
      }

      // required int32 EnvType = 8;
      case 8: {
        if (tag == 64) {
         parse_EnvType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envtype_)));
          set_has_envtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.BPFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.BPFilter)
  return false;
#undef DO_
}

void BPFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.BPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 CFreq = 2;
  if (has_cfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cfreq(), output);
  }

  // required int32 Width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required int32 Oct = 4;
  if (has_oct()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oct(), output);
  }

  // required int32 Dec = 5;
  if (has_dec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dec(), output);
  }

  // required int32 PreDec = 6;
  if (has_predec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->predec(), output);
  }

  // required int32 BPDec = 7;
  if (has_bpdec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bpdec(), output);
  }

  // required int32 EnvType = 8;
  if (has_envtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->envtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.BPFilter)
}

::google::protobuf::uint8* BPFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.BPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 CFreq = 2;
  if (has_cfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cfreq(), target);
  }

  // required int32 Width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required int32 Oct = 4;
  if (has_oct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oct(), target);
  }

  // required int32 Dec = 5;
  if (has_dec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dec(), target);
  }

  // required int32 PreDec = 6;
  if (has_predec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->predec(), target);
  }

  // required int32 BPDec = 7;
  if (has_bpdec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bpdec(), target);
  }

  // required int32 EnvType = 8;
  if (has_envtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->envtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.BPFilter)
  return target;
}

int BPFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 CFreq = 2;
    if (has_cfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfreq());
    }

    // required int32 Width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 Oct = 4;
    if (has_oct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oct());
    }

    // required int32 Dec = 5;
    if (has_dec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dec());
    }

    // required int32 PreDec = 6;
    if (has_predec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predec());
    }

    // required int32 BPDec = 7;
    if (has_bpdec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpdec());
    }

    // required int32 EnvType = 8;
    if (has_envtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BPFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BPFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BPFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BPFilter::MergeFrom(const BPFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cfreq()) {
      set_cfreq(from.cfreq());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_oct()) {
      set_oct(from.oct());
    }
    if (from.has_dec()) {
      set_dec(from.dec());
    }
    if (from.has_predec()) {
      set_predec(from.predec());
    }
    if (from.has_bpdec()) {
      set_bpdec(from.bpdec());
    }
    if (from.has_envtype()) {
      set_envtype(from.envtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BPFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPFilter::CopyFrom(const BPFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void BPFilter::Swap(BPFilter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(cfreq_, other->cfreq_);
    std::swap(width_, other->width_);
    std::swap(oct_, other->oct_);
    std::swap(dec_, other->dec_);
    std::swap(predec_, other->predec_);
    std::swap(bpdec_, other->bpdec_);
    std::swap(envtype_, other->envtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BPFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BPFilter_descriptor_;
  metadata.reflection = BPFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BPFilter_params::kBPFilterIndexFieldNumber;
const int BPFilter_params::kBPFilterTypeFieldNumber;
const int BPFilter_params::kBPFilterUsualWFieldNumber;
#endif  // !_MSC_VER

BPFilter_params::BPFilter_params()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.BPFilter_params)
}

void BPFilter_params::InitAsDefaultInstance() {
}

BPFilter_params::BPFilter_params(const BPFilter_params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.BPFilter_params)
}

void BPFilter_params::SharedCtor() {
  _cached_size_ = 0;
  bpfilterindex_ = 0;
  bpfiltertype_ = 0;
  bpfilterusualw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BPFilter_params::~BPFilter_params() {
  // @@protoc_insertion_point(destructor:task_manager.BPFilter_params)
  SharedDtor();
}

void BPFilter_params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BPFilter_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BPFilter_params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BPFilter_params_descriptor_;
}

const BPFilter_params& BPFilter_params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

BPFilter_params* BPFilter_params::default_instance_ = NULL;

BPFilter_params* BPFilter_params::New() const {
  return new BPFilter_params;
}

void BPFilter_params::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BPFilter_params*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bpfilterindex_, bpfilterusualw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BPFilter_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.BPFilter_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BPFilterIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpfilterindex_)));
          set_has_bpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BPFilterType;
        break;
      }

      // required int32 BPFilterType = 2;
      case 2: {
        if (tag == 16) {
         parse_BPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpfiltertype_)));
          set_has_bpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BPFilterUsualW;
        break;
      }

      // required bool BPFilterUsualW = 3;
      case 3: {
        if (tag == 24) {
         parse_BPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bpfilterusualw_)));
          set_has_bpfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.BPFilter_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.BPFilter_params)
  return false;
#undef DO_
}

void BPFilter_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.BPFilter_params)
  // required int32 BPFilterIndex = 1;
  if (has_bpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bpfilterindex(), output);
  }

  // required int32 BPFilterType = 2;
  if (has_bpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bpfiltertype(), output);
  }

  // required bool BPFilterUsualW = 3;
  if (has_bpfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bpfilterusualw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.BPFilter_params)
}

::google::protobuf::uint8* BPFilter_params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.BPFilter_params)
  // required int32 BPFilterIndex = 1;
  if (has_bpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bpfilterindex(), target);
  }

  // required int32 BPFilterType = 2;
  if (has_bpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bpfiltertype(), target);
  }

  // required bool BPFilterUsualW = 3;
  if (has_bpfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bpfilterusualw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.BPFilter_params)
  return target;
}

int BPFilter_params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BPFilterIndex = 1;
    if (has_bpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpfilterindex());
    }

    // required int32 BPFilterType = 2;
    if (has_bpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpfiltertype());
    }

    // required bool BPFilterUsualW = 3;
    if (has_bpfilterusualw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BPFilter_params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BPFilter_params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BPFilter_params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BPFilter_params::MergeFrom(const BPFilter_params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bpfilterindex()) {
      set_bpfilterindex(from.bpfilterindex());
    }
    if (from.has_bpfiltertype()) {
      set_bpfiltertype(from.bpfiltertype());
    }
    if (from.has_bpfilterusualw()) {
      set_bpfilterusualw(from.bpfilterusualw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BPFilter_params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BPFilter_params::CopyFrom(const BPFilter_params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BPFilter_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BPFilter_params::Swap(BPFilter_params* other) {
  if (other != this) {
    std::swap(bpfilterindex_, other->bpfilterindex_);
    std::swap(bpfiltertype_, other->bpfiltertype_);
    std::swap(bpfilterusualw_, other->bpfilterusualw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BPFilter_params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BPFilter_params_descriptor_;
  metadata.reflection = BPFilter_params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSMPFilter::kIndexFieldNumber;
const int RSMPFilter::kInterpFieldNumber;
const int RSMPFilter::kDecFieldNumber;
const int RSMPFilter::kRelFieldNumber;
const int RSMPFilter::kResampleTypeFieldNumber;
#endif  // !_MSC_VER

RSMPFilter::RSMPFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.RSMPFilter)
}

void RSMPFilter::InitAsDefaultInstance() {
}

RSMPFilter::RSMPFilter(const RSMPFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.RSMPFilter)
}

void RSMPFilter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  interp_ = 0;
  dec_ = 0;
  rel_ = 0;
  resampletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSMPFilter::~RSMPFilter() {
  // @@protoc_insertion_point(destructor:task_manager.RSMPFilter)
  SharedDtor();
}

void RSMPFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RSMPFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSMPFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSMPFilter_descriptor_;
}

const RSMPFilter& RSMPFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

RSMPFilter* RSMPFilter::default_instance_ = NULL;

RSMPFilter* RSMPFilter::New() const {
  return new RSMPFilter;
}

void RSMPFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RSMPFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index_, resampletype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSMPFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.RSMPFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Interp;
        break;
      }

      // required int32 Interp = 2;
      case 2: {
        if (tag == 16) {
         parse_Interp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interp_)));
          set_has_interp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Dec;
        break;
      }

      // required int32 Dec = 3;
      case 3: {
        if (tag == 24) {
         parse_Dec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dec_)));
          set_has_dec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Rel;
        break;
      }

      // required double Rel = 4;
      case 4: {
        if (tag == 33) {
         parse_Rel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rel_)));
          set_has_rel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ResampleType;
        break;
      }

      // required int32 ResampleType = 5;
      case 5: {
        if (tag == 40) {
         parse_ResampleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resampletype_)));
          set_has_resampletype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.RSMPFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.RSMPFilter)
  return false;
#undef DO_
}

void RSMPFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.RSMPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 Interp = 2;
  if (has_interp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->interp(), output);
  }

  // required int32 Dec = 3;
  if (has_dec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dec(), output);
  }

  // required double Rel = 4;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rel(), output);
  }

  // required int32 ResampleType = 5;
  if (has_resampletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resampletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.RSMPFilter)
}

::google::protobuf::uint8* RSMPFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.RSMPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 Interp = 2;
  if (has_interp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->interp(), target);
  }

  // required int32 Dec = 3;
  if (has_dec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dec(), target);
  }

  // required double Rel = 4;
  if (has_rel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rel(), target);
  }

  // required int32 ResampleType = 5;
  if (has_resampletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resampletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.RSMPFilter)
  return target;
}

int RSMPFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 Interp = 2;
    if (has_interp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interp());
    }

    // required int32 Dec = 3;
    if (has_dec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dec());
    }

    // required double Rel = 4;
    if (has_rel()) {
      total_size += 1 + 8;
    }

    // required int32 ResampleType = 5;
    if (has_resampletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resampletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSMPFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSMPFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSMPFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSMPFilter::MergeFrom(const RSMPFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_interp()) {
      set_interp(from.interp());
    }
    if (from.has_dec()) {
      set_dec(from.dec());
    }
    if (from.has_rel()) {
      set_rel(from.rel());
    }
    if (from.has_resampletype()) {
      set_resampletype(from.resampletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSMPFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSMPFilter::CopyFrom(const RSMPFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMPFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RSMPFilter::Swap(RSMPFilter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(interp_, other->interp_);
    std::swap(dec_, other->dec_);
    std::swap(rel_, other->rel_);
    std::swap(resampletype_, other->resampletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSMPFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSMPFilter_descriptor_;
  metadata.reflection = RSMPFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSMPFilter_params::kRSMPFilterIndexFieldNumber;
const int RSMPFilter_params::kRSMPFilterTypeFieldNumber;
const int RSMPFilter_params::kRSMPFilterUsualWFieldNumber;
#endif  // !_MSC_VER

RSMPFilter_params::RSMPFilter_params()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.RSMPFilter_params)
}

void RSMPFilter_params::InitAsDefaultInstance() {
}

RSMPFilter_params::RSMPFilter_params(const RSMPFilter_params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.RSMPFilter_params)
}

void RSMPFilter_params::SharedCtor() {
  _cached_size_ = 0;
  rsmpfilterindex_ = 0;
  rsmpfiltertype_ = 0;
  rsmpfilterusualw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSMPFilter_params::~RSMPFilter_params() {
  // @@protoc_insertion_point(destructor:task_manager.RSMPFilter_params)
  SharedDtor();
}

void RSMPFilter_params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RSMPFilter_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSMPFilter_params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSMPFilter_params_descriptor_;
}

const RSMPFilter_params& RSMPFilter_params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

RSMPFilter_params* RSMPFilter_params::default_instance_ = NULL;

RSMPFilter_params* RSMPFilter_params::New() const {
  return new RSMPFilter_params;
}

void RSMPFilter_params::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RSMPFilter_params*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rsmpfilterindex_, rsmpfilterusualw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSMPFilter_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.RSMPFilter_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RSMPFilterIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsmpfilterindex_)));
          set_has_rsmpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RSMPFilterType;
        break;
      }

      // required int32 RSMPFilterType = 2;
      case 2: {
        if (tag == 16) {
         parse_RSMPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsmpfiltertype_)));
          set_has_rsmpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RSMPFilterUsualW;
        break;
      }

      // required bool RSMPFilterUsualW = 3;
      case 3: {
        if (tag == 24) {
         parse_RSMPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rsmpfilterusualw_)));
          set_has_rsmpfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.RSMPFilter_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.RSMPFilter_params)
  return false;
#undef DO_
}

void RSMPFilter_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.RSMPFilter_params)
  // required int32 RSMPFilterIndex = 1;
  if (has_rsmpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsmpfilterindex(), output);
  }

  // required int32 RSMPFilterType = 2;
  if (has_rsmpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rsmpfiltertype(), output);
  }

  // required bool RSMPFilterUsualW = 3;
  if (has_rsmpfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rsmpfilterusualw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.RSMPFilter_params)
}

::google::protobuf::uint8* RSMPFilter_params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.RSMPFilter_params)
  // required int32 RSMPFilterIndex = 1;
  if (has_rsmpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rsmpfilterindex(), target);
  }

  // required int32 RSMPFilterType = 2;
  if (has_rsmpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rsmpfiltertype(), target);
  }

  // required bool RSMPFilterUsualW = 3;
  if (has_rsmpfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rsmpfilterusualw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.RSMPFilter_params)
  return target;
}

int RSMPFilter_params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RSMPFilterIndex = 1;
    if (has_rsmpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsmpfilterindex());
    }

    // required int32 RSMPFilterType = 2;
    if (has_rsmpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsmpfiltertype());
    }

    // required bool RSMPFilterUsualW = 3;
    if (has_rsmpfilterusualw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSMPFilter_params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSMPFilter_params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSMPFilter_params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSMPFilter_params::MergeFrom(const RSMPFilter_params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsmpfilterindex()) {
      set_rsmpfilterindex(from.rsmpfilterindex());
    }
    if (from.has_rsmpfiltertype()) {
      set_rsmpfiltertype(from.rsmpfiltertype());
    }
    if (from.has_rsmpfilterusualw()) {
      set_rsmpfilterusualw(from.rsmpfilterusualw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSMPFilter_params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSMPFilter_params::CopyFrom(const RSMPFilter_params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMPFilter_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RSMPFilter_params::Swap(RSMPFilter_params* other) {
  if (other != this) {
    std::swap(rsmpfilterindex_, other->rsmpfilterindex_);
    std::swap(rsmpfiltertype_, other->rsmpfiltertype_);
    std::swap(rsmpfilterusualw_, other->rsmpfilterusualw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSMPFilter_params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSMPFilter_params_descriptor_;
  metadata.reflection = RSMPFilter_params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPFilter::kIndexFieldNumber;
const int HPFilter::kSFreqFieldNumber;
const int HPFilter::kMFreqFieldNumber;
const int HPFilter::kRFreqFieldNumber;
const int HPFilter::kHPFTypeFieldNumber;
#endif  // !_MSC_VER

HPFilter::HPFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.HPFilter)
}

void HPFilter::InitAsDefaultInstance() {
}

HPFilter::HPFilter(const HPFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.HPFilter)
}

void HPFilter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  sfreq_ = 0;
  mfreq_ = 0;
  rfreq_ = 0;
  hpftype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFilter::~HPFilter() {
  // @@protoc_insertion_point(destructor:task_manager.HPFilter)
  SharedDtor();
}

void HPFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFilter_descriptor_;
}

const HPFilter& HPFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

HPFilter* HPFilter::default_instance_ = NULL;

HPFilter* HPFilter::New() const {
  return new HPFilter;
}

void HPFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HPFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sfreq_, hpftype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.HPFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_SFreq;
        break;
      }

      // required double SFreq = 2;
      case 2: {
        if (tag == 17) {
         parse_SFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sfreq_)));
          set_has_sfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_MFreq;
        break;
      }

      // required double MFreq = 3;
      case 3: {
        if (tag == 25) {
         parse_MFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mfreq_)));
          set_has_mfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RFreq;
        break;
      }

      // required int32 RFreq = 4;
      case 4: {
        if (tag == 32) {
         parse_RFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfreq_)));
          set_has_rfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HPFType;
        break;
      }

      // required int32 HPFType = 5;
      case 5: {
        if (tag == 40) {
         parse_HPFType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpftype_)));
          set_has_hpftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.HPFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.HPFilter)
  return false;
#undef DO_
}

void HPFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.HPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required double SFreq = 2;
  if (has_sfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sfreq(), output);
  }

  // required double MFreq = 3;
  if (has_mfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mfreq(), output);
  }

  // required int32 RFreq = 4;
  if (has_rfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rfreq(), output);
  }

  // required int32 HPFType = 5;
  if (has_hpftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hpftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.HPFilter)
}

::google::protobuf::uint8* HPFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.HPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required double SFreq = 2;
  if (has_sfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sfreq(), target);
  }

  // required double MFreq = 3;
  if (has_mfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mfreq(), target);
  }

  // required int32 RFreq = 4;
  if (has_rfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rfreq(), target);
  }

  // required int32 HPFType = 5;
  if (has_hpftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hpftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.HPFilter)
  return target;
}

int HPFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required double SFreq = 2;
    if (has_sfreq()) {
      total_size += 1 + 8;
    }

    // required double MFreq = 3;
    if (has_mfreq()) {
      total_size += 1 + 8;
    }

    // required int32 RFreq = 4;
    if (has_rfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfreq());
    }

    // required int32 HPFType = 5;
    if (has_hpftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpftype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFilter::MergeFrom(const HPFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sfreq()) {
      set_sfreq(from.sfreq());
    }
    if (from.has_mfreq()) {
      set_mfreq(from.mfreq());
    }
    if (from.has_rfreq()) {
      set_rfreq(from.rfreq());
    }
    if (from.has_hpftype()) {
      set_hpftype(from.hpftype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFilter::CopyFrom(const HPFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HPFilter::Swap(HPFilter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(sfreq_, other->sfreq_);
    std::swap(mfreq_, other->mfreq_);
    std::swap(rfreq_, other->rfreq_);
    std::swap(hpftype_, other->hpftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFilter_descriptor_;
  metadata.reflection = HPFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HPFilter_params::kHPFilterIndexFieldNumber;
const int HPFilter_params::kHPFilterTypeFieldNumber;
const int HPFilter_params::kHPFilterParam1FieldNumber;
#endif  // !_MSC_VER

HPFilter_params::HPFilter_params()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.HPFilter_params)
}

void HPFilter_params::InitAsDefaultInstance() {
}

HPFilter_params::HPFilter_params(const HPFilter_params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.HPFilter_params)
}

void HPFilter_params::SharedCtor() {
  _cached_size_ = 0;
  hpfilterindex_ = 0;
  hpfiltertype_ = 0;
  hpfilterparam1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HPFilter_params::~HPFilter_params() {
  // @@protoc_insertion_point(destructor:task_manager.HPFilter_params)
  SharedDtor();
}

void HPFilter_params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HPFilter_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HPFilter_params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HPFilter_params_descriptor_;
}

const HPFilter_params& HPFilter_params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

HPFilter_params* HPFilter_params::default_instance_ = NULL;

HPFilter_params* HPFilter_params::New() const {
  return new HPFilter_params;
}

void HPFilter_params::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HPFilter_params*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hpfilterindex_, hpfilterparam1_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HPFilter_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.HPFilter_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HPFilterIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpfilterindex_)));
          set_has_hpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HPFilterType;
        break;
      }

      // required int32 HPFilterType = 2;
      case 2: {
        if (tag == 16) {
         parse_HPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpfiltertype_)));
          set_has_hpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_HPFilterParam1;
        break;
      }

      // required double HPFilterParam1 = 3;
      case 3: {
        if (tag == 25) {
         parse_HPFilterParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hpfilterparam1_)));
          set_has_hpfilterparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.HPFilter_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.HPFilter_params)
  return false;
#undef DO_
}

void HPFilter_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.HPFilter_params)
  // required int32 HPFilterIndex = 1;
  if (has_hpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hpfilterindex(), output);
  }

  // required int32 HPFilterType = 2;
  if (has_hpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hpfiltertype(), output);
  }

  // required double HPFilterParam1 = 3;
  if (has_hpfilterparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->hpfilterparam1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.HPFilter_params)
}

::google::protobuf::uint8* HPFilter_params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.HPFilter_params)
  // required int32 HPFilterIndex = 1;
  if (has_hpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hpfilterindex(), target);
  }

  // required int32 HPFilterType = 2;
  if (has_hpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hpfiltertype(), target);
  }

  // required double HPFilterParam1 = 3;
  if (has_hpfilterparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->hpfilterparam1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.HPFilter_params)
  return target;
}

int HPFilter_params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HPFilterIndex = 1;
    if (has_hpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpfilterindex());
    }

    // required int32 HPFilterType = 2;
    if (has_hpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpfiltertype());
    }

    // required double HPFilterParam1 = 3;
    if (has_hpfilterparam1()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HPFilter_params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HPFilter_params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HPFilter_params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HPFilter_params::MergeFrom(const HPFilter_params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hpfilterindex()) {
      set_hpfilterindex(from.hpfilterindex());
    }
    if (from.has_hpfiltertype()) {
      set_hpfiltertype(from.hpfiltertype());
    }
    if (from.has_hpfilterparam1()) {
      set_hpfilterparam1(from.hpfilterparam1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HPFilter_params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HPFilter_params::CopyFrom(const HPFilter_params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HPFilter_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HPFilter_params::Swap(HPFilter_params* other) {
  if (other != this) {
    std::swap(hpfilterindex_, other->hpfilterindex_);
    std::swap(hpfiltertype_, other->hpfiltertype_);
    std::swap(hpfilterparam1_, other->hpfilterparam1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HPFilter_params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HPFilter_params_descriptor_;
  metadata.reflection = HPFilter_params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPFilter::kIndexFieldNumber;
const int SPFilter::kRFreqFieldNumber;
const int SPFilter::kSPFTypeFieldNumber;
#endif  // !_MSC_VER

SPFilter::SPFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.SPFilter)
}

void SPFilter::InitAsDefaultInstance() {
}

SPFilter::SPFilter(const SPFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.SPFilter)
}

void SPFilter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  rfreq_ = 0;
  spftype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPFilter::~SPFilter() {
  // @@protoc_insertion_point(destructor:task_manager.SPFilter)
  SharedDtor();
}

void SPFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPFilter_descriptor_;
}

const SPFilter& SPFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

SPFilter* SPFilter::default_instance_ = NULL;

SPFilter* SPFilter::New() const {
  return new SPFilter;
}

void SPFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SPFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, spftype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.SPFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RFreq;
        break;
      }

      // required int32 RFreq = 2;
      case 2: {
        if (tag == 16) {
         parse_RFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfreq_)));
          set_has_rfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SPFType;
        break;
      }

      // required int32 SPFType = 3;
      case 3: {
        if (tag == 24) {
         parse_SPFType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spftype_)));
          set_has_spftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.SPFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.SPFilter)
  return false;
#undef DO_
}

void SPFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.SPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 RFreq = 2;
  if (has_rfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rfreq(), output);
  }

  // required int32 SPFType = 3;
  if (has_spftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.SPFilter)
}

::google::protobuf::uint8* SPFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.SPFilter)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 RFreq = 2;
  if (has_rfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rfreq(), target);
  }

  // required int32 SPFType = 3;
  if (has_spftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.SPFilter)
  return target;
}

int SPFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 RFreq = 2;
    if (has_rfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfreq());
    }

    // required int32 SPFType = 3;
    if (has_spftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spftype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPFilter::MergeFrom(const SPFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rfreq()) {
      set_rfreq(from.rfreq());
    }
    if (from.has_spftype()) {
      set_spftype(from.spftype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPFilter::CopyFrom(const SPFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SPFilter::Swap(SPFilter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(rfreq_, other->rfreq_);
    std::swap(spftype_, other->spftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPFilter_descriptor_;
  metadata.reflection = SPFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPFilter_params::kSPFilterIndexFieldNumber;
const int SPFilter_params::kSPFilterTypeFieldNumber;
const int SPFilter_params::kSPFilterUsualWFieldNumber;
#endif  // !_MSC_VER

SPFilter_params::SPFilter_params()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.SPFilter_params)
}

void SPFilter_params::InitAsDefaultInstance() {
}

SPFilter_params::SPFilter_params(const SPFilter_params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.SPFilter_params)
}

void SPFilter_params::SharedCtor() {
  _cached_size_ = 0;
  spfilterindex_ = 0;
  spfiltertype_ = 0;
  spfilterusualw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPFilter_params::~SPFilter_params() {
  // @@protoc_insertion_point(destructor:task_manager.SPFilter_params)
  SharedDtor();
}

void SPFilter_params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPFilter_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPFilter_params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPFilter_params_descriptor_;
}

const SPFilter_params& SPFilter_params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

SPFilter_params* SPFilter_params::default_instance_ = NULL;

SPFilter_params* SPFilter_params::New() const {
  return new SPFilter_params;
}

void SPFilter_params::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SPFilter_params*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(spfilterindex_, spfilterusualw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPFilter_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.SPFilter_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SPFilterIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spfilterindex_)));
          set_has_spfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SPFilterType;
        break;
      }

      // required int32 SPFilterType = 2;
      case 2: {
        if (tag == 16) {
         parse_SPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spfiltertype_)));
          set_has_spfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SPFilterUsualW;
        break;
      }

      // required bool SPFilterUsualW = 3;
      case 3: {
        if (tag == 24) {
         parse_SPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spfilterusualw_)));
          set_has_spfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.SPFilter_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.SPFilter_params)
  return false;
#undef DO_
}

void SPFilter_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.SPFilter_params)
  // required int32 SPFilterIndex = 1;
  if (has_spfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->spfilterindex(), output);
  }

  // required int32 SPFilterType = 2;
  if (has_spfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spfiltertype(), output);
  }

  // required bool SPFilterUsualW = 3;
  if (has_spfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->spfilterusualw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.SPFilter_params)
}

::google::protobuf::uint8* SPFilter_params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.SPFilter_params)
  // required int32 SPFilterIndex = 1;
  if (has_spfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->spfilterindex(), target);
  }

  // required int32 SPFilterType = 2;
  if (has_spfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spfiltertype(), target);
  }

  // required bool SPFilterUsualW = 3;
  if (has_spfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->spfilterusualw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.SPFilter_params)
  return target;
}

int SPFilter_params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SPFilterIndex = 1;
    if (has_spfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spfilterindex());
    }

    // required int32 SPFilterType = 2;
    if (has_spfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spfiltertype());
    }

    // required bool SPFilterUsualW = 3;
    if (has_spfilterusualw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPFilter_params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPFilter_params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPFilter_params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPFilter_params::MergeFrom(const SPFilter_params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spfilterindex()) {
      set_spfilterindex(from.spfilterindex());
    }
    if (from.has_spfiltertype()) {
      set_spfiltertype(from.spfiltertype());
    }
    if (from.has_spfilterusualw()) {
      set_spfilterusualw(from.spfilterusualw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPFilter_params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPFilter_params::CopyFrom(const SPFilter_params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPFilter_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SPFilter_params::Swap(SPFilter_params* other) {
  if (other != this) {
    std::swap(spfilterindex_, other->spfilterindex_);
    std::swap(spfiltertype_, other->spfiltertype_);
    std::swap(spfilterusualw_, other->spfilterusualw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPFilter_params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPFilter_params_descriptor_;
  metadata.reflection = SPFilter_params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int INTGFilter::kIndexFieldNumber;
const int INTGFilter::kINTGFTypeFieldNumber;
#endif  // !_MSC_VER

INTGFilter::INTGFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.INTGFilter)
}

void INTGFilter::InitAsDefaultInstance() {
}

INTGFilter::INTGFilter(const INTGFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.INTGFilter)
}

void INTGFilter::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  intgftype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INTGFilter::~INTGFilter() {
  // @@protoc_insertion_point(destructor:task_manager.INTGFilter)
  SharedDtor();
}

void INTGFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INTGFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INTGFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INTGFilter_descriptor_;
}

const INTGFilter& INTGFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

INTGFilter* INTGFilter::default_instance_ = NULL;

INTGFilter* INTGFilter::New() const {
  return new INTGFilter;
}

void INTGFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<INTGFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, intgftype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INTGFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.INTGFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_INTGFType;
        break;
      }

      // required int32 INTGFType = 2;
      case 2: {
        if (tag == 16) {
         parse_INTGFType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intgftype_)));
          set_has_intgftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.INTGFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.INTGFilter)
  return false;
#undef DO_
}

void INTGFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.INTGFilter)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 INTGFType = 2;
  if (has_intgftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intgftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.INTGFilter)
}

::google::protobuf::uint8* INTGFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.INTGFilter)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 INTGFType = 2;
  if (has_intgftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intgftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.INTGFilter)
  return target;
}

int INTGFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 INTGFType = 2;
    if (has_intgftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intgftype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INTGFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INTGFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INTGFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INTGFilter::MergeFrom(const INTGFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_intgftype()) {
      set_intgftype(from.intgftype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INTGFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INTGFilter::CopyFrom(const INTGFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INTGFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void INTGFilter::Swap(INTGFilter* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(intgftype_, other->intgftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INTGFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INTGFilter_descriptor_;
  metadata.reflection = INTGFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int INTGFilter_params::kINTGFilterIndexFieldNumber;
const int INTGFilter_params::kINTGFilterTypeFieldNumber;
#endif  // !_MSC_VER

INTGFilter_params::INTGFilter_params()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.INTGFilter_params)
}

void INTGFilter_params::InitAsDefaultInstance() {
}

INTGFilter_params::INTGFilter_params(const INTGFilter_params& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.INTGFilter_params)
}

void INTGFilter_params::SharedCtor() {
  _cached_size_ = 0;
  intgfilterindex_ = 0;
  intgfiltertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

INTGFilter_params::~INTGFilter_params() {
  // @@protoc_insertion_point(destructor:task_manager.INTGFilter_params)
  SharedDtor();
}

void INTGFilter_params::SharedDtor() {
  if (this != default_instance_) {
  }
}

void INTGFilter_params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* INTGFilter_params::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return INTGFilter_params_descriptor_;
}

const INTGFilter_params& INTGFilter_params::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

INTGFilter_params* INTGFilter_params::default_instance_ = NULL;

INTGFilter_params* INTGFilter_params::New() const {
  return new INTGFilter_params;
}

void INTGFilter_params::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<INTGFilter_params*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(intgfilterindex_, intgfiltertype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool INTGFilter_params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.INTGFilter_params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 INTGFilterIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intgfilterindex_)));
          set_has_intgfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_INTGFilterType;
        break;
      }

      // required int32 INTGFilterType = 2;
      case 2: {
        if (tag == 16) {
         parse_INTGFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intgfiltertype_)));
          set_has_intgfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.INTGFilter_params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.INTGFilter_params)
  return false;
#undef DO_
}

void INTGFilter_params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.INTGFilter_params)
  // required int32 INTGFilterIndex = 1;
  if (has_intgfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->intgfilterindex(), output);
  }

  // required int32 INTGFilterType = 2;
  if (has_intgfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intgfiltertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.INTGFilter_params)
}

::google::protobuf::uint8* INTGFilter_params::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.INTGFilter_params)
  // required int32 INTGFilterIndex = 1;
  if (has_intgfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->intgfilterindex(), target);
  }

  // required int32 INTGFilterType = 2;
  if (has_intgfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intgfiltertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.INTGFilter_params)
  return target;
}

int INTGFilter_params::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 INTGFilterIndex = 1;
    if (has_intgfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intgfilterindex());
    }

    // required int32 INTGFilterType = 2;
    if (has_intgfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intgfiltertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void INTGFilter_params::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const INTGFilter_params* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const INTGFilter_params*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void INTGFilter_params::MergeFrom(const INTGFilter_params& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intgfilterindex()) {
      set_intgfilterindex(from.intgfilterindex());
    }
    if (from.has_intgfiltertype()) {
      set_intgfiltertype(from.intgfiltertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void INTGFilter_params::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void INTGFilter_params::CopyFrom(const INTGFilter_params& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INTGFilter_params::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void INTGFilter_params::Swap(INTGFilter_params* other) {
  if (other != this) {
    std::swap(intgfilterindex_, other->intgfilterindex_);
    std::swap(intgfiltertype_, other->intgfiltertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata INTGFilter_params::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = INTGFilter_params_descriptor_;
  metadata.reflection = INTGFilter_params_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FParams::kTypeFieldNumber;
const int FParams::kLPFFieldNumber;
const int FParams::kBPFFieldNumber;
const int FParams::kRSMPFFieldNumber;
const int FParams::kHPFFieldNumber;
const int FParams::kSPFFieldNumber;
const int FParams::kINTGFFieldNumber;
#endif  // !_MSC_VER

FParams::FParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.FParams)
}

void FParams::InitAsDefaultInstance() {
  lpf_ = const_cast< ::task_manager::LPFilter_params*>(&::task_manager::LPFilter_params::default_instance());
  bpf_ = const_cast< ::task_manager::BPFilter_params*>(&::task_manager::BPFilter_params::default_instance());
  rsmpf_ = const_cast< ::task_manager::RSMPFilter_params*>(&::task_manager::RSMPFilter_params::default_instance());
  hpf_ = const_cast< ::task_manager::HPFilter_params*>(&::task_manager::HPFilter_params::default_instance());
  spf_ = const_cast< ::task_manager::SPFilter_params*>(&::task_manager::SPFilter_params::default_instance());
  intgf_ = const_cast< ::task_manager::INTGFilter_params*>(&::task_manager::INTGFilter_params::default_instance());
}

FParams::FParams(const FParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.FParams)
}

void FParams::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  lpf_ = NULL;
  bpf_ = NULL;
  rsmpf_ = NULL;
  hpf_ = NULL;
  spf_ = NULL;
  intgf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FParams::~FParams() {
  // @@protoc_insertion_point(destructor:task_manager.FParams)
  SharedDtor();
}

void FParams::SharedDtor() {
  if (this != default_instance_) {
    delete lpf_;
    delete bpf_;
    delete rsmpf_;
    delete hpf_;
    delete spf_;
    delete intgf_;
  }
}

void FParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FParams_descriptor_;
}

const FParams& FParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

FParams* FParams::default_instance_ = NULL;

FParams* FParams::New() const {
  return new FParams;
}

void FParams::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    type_ = 0;
    if (has_lpf()) {
      if (lpf_ != NULL) lpf_->::task_manager::LPFilter_params::Clear();
    }
    if (has_bpf()) {
      if (bpf_ != NULL) bpf_->::task_manager::BPFilter_params::Clear();
    }
    if (has_rsmpf()) {
      if (rsmpf_ != NULL) rsmpf_->::task_manager::RSMPFilter_params::Clear();
    }
    if (has_hpf()) {
      if (hpf_ != NULL) hpf_->::task_manager::HPFilter_params::Clear();
    }
    if (has_spf()) {
      if (spf_ != NULL) spf_->::task_manager::SPFilter_params::Clear();
    }
    if (has_intgf()) {
      if (intgf_ != NULL) intgf_->::task_manager::INTGFilter_params::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.FParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LPF;
        break;
      }

      // optional .task_manager.LPFilter_params LPF = 2;
      case 2: {
        if (tag == 18) {
         parse_LPF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lpf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BPF;
        break;
      }

      // optional .task_manager.BPFilter_params BPF = 3;
      case 3: {
        if (tag == 26) {
         parse_BPF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bpf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RSMPF;
        break;
      }

      // optional .task_manager.RSMPFilter_params RSMPF = 4;
      case 4: {
        if (tag == 34) {
         parse_RSMPF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsmpf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_HPF;
        break;
      }

      // optional .task_manager.HPFilter_params HPF = 5;
      case 5: {
        if (tag == 42) {
         parse_HPF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hpf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SPF;
        break;
      }

      // optional .task_manager.SPFilter_params SPF = 6;
      case 6: {
        if (tag == 50) {
         parse_SPF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_INTGF;
        break;
      }

      // optional .task_manager.INTGFilter_params INTGF = 7;
      case 7: {
        if (tag == 58) {
         parse_INTGF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intgf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.FParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.FParams)
  return false;
#undef DO_
}

void FParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.FParams)
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .task_manager.LPFilter_params LPF = 2;
  if (has_lpf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lpf(), output);
  }

  // optional .task_manager.BPFilter_params BPF = 3;
  if (has_bpf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bpf(), output);
  }

  // optional .task_manager.RSMPFilter_params RSMPF = 4;
  if (has_rsmpf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rsmpf(), output);
  }

  // optional .task_manager.HPFilter_params HPF = 5;
  if (has_hpf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hpf(), output);
  }

  // optional .task_manager.SPFilter_params SPF = 6;
  if (has_spf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->spf(), output);
  }

  // optional .task_manager.INTGFilter_params INTGF = 7;
  if (has_intgf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->intgf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.FParams)
}

::google::protobuf::uint8* FParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.FParams)
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .task_manager.LPFilter_params LPF = 2;
  if (has_lpf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lpf(), target);
  }

  // optional .task_manager.BPFilter_params BPF = 3;
  if (has_bpf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bpf(), target);
  }

  // optional .task_manager.RSMPFilter_params RSMPF = 4;
  if (has_rsmpf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rsmpf(), target);
  }

  // optional .task_manager.HPFilter_params HPF = 5;
  if (has_hpf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hpf(), target);
  }

  // optional .task_manager.SPFilter_params SPF = 6;
  if (has_spf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->spf(), target);
  }

  // optional .task_manager.INTGFilter_params INTGF = 7;
  if (has_intgf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->intgf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.FParams)
  return target;
}

int FParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .task_manager.LPFilter_params LPF = 2;
    if (has_lpf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lpf());
    }

    // optional .task_manager.BPFilter_params BPF = 3;
    if (has_bpf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bpf());
    }

    // optional .task_manager.RSMPFilter_params RSMPF = 4;
    if (has_rsmpf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsmpf());
    }

    // optional .task_manager.HPFilter_params HPF = 5;
    if (has_hpf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hpf());
    }

    // optional .task_manager.SPFilter_params SPF = 6;
    if (has_spf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spf());
    }

    // optional .task_manager.INTGFilter_params INTGF = 7;
    if (has_intgf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intgf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FParams::MergeFrom(const FParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lpf()) {
      mutable_lpf()->::task_manager::LPFilter_params::MergeFrom(from.lpf());
    }
    if (from.has_bpf()) {
      mutable_bpf()->::task_manager::BPFilter_params::MergeFrom(from.bpf());
    }
    if (from.has_rsmpf()) {
      mutable_rsmpf()->::task_manager::RSMPFilter_params::MergeFrom(from.rsmpf());
    }
    if (from.has_hpf()) {
      mutable_hpf()->::task_manager::HPFilter_params::MergeFrom(from.hpf());
    }
    if (from.has_spf()) {
      mutable_spf()->::task_manager::SPFilter_params::MergeFrom(from.spf());
    }
    if (from.has_intgf()) {
      mutable_intgf()->::task_manager::INTGFilter_params::MergeFrom(from.intgf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FParams::CopyFrom(const FParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_lpf()) {
    if (!this->lpf().IsInitialized()) return false;
  }
  if (has_bpf()) {
    if (!this->bpf().IsInitialized()) return false;
  }
  if (has_rsmpf()) {
    if (!this->rsmpf().IsInitialized()) return false;
  }
  if (has_hpf()) {
    if (!this->hpf().IsInitialized()) return false;
  }
  if (has_spf()) {
    if (!this->spf().IsInitialized()) return false;
  }
  if (has_intgf()) {
    if (!this->intgf().IsInitialized()) return false;
  }
  return true;
}

void FParams::Swap(FParams* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lpf_, other->lpf_);
    std::swap(bpf_, other->bpf_);
    std::swap(rsmpf_, other->rsmpf_);
    std::swap(hpf_, other->hpf_);
    std::swap(spf_, other->spf_);
    std::swap(intgf_, other->intgf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FParams_descriptor_;
  metadata.reflection = FParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TStatRot::kAvgCntFieldNumber;
const int TStatRot::kAvgFieldNumber;
const int TStatRot::kMinFieldNumber;
const int TStatRot::kMaxFieldNumber;
#endif  // !_MSC_VER

TStatRot::TStatRot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.TStatRot)
}

void TStatRot::InitAsDefaultInstance() {
}

TStatRot::TStatRot(const TStatRot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.TStatRot)
}

void TStatRot::SharedCtor() {
  _cached_size_ = 0;
  avgcnt_ = 0;
  avg_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TStatRot::~TStatRot() {
  // @@protoc_insertion_point(destructor:task_manager.TStatRot)
  SharedDtor();
}

void TStatRot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TStatRot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TStatRot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TStatRot_descriptor_;
}

const TStatRot& TStatRot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

TStatRot* TStatRot::default_instance_ = NULL;

TStatRot* TStatRot::New() const {
  return new TStatRot;
}

void TStatRot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TStatRot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(avg_, avgcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TStatRot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.TStatRot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AvgCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avgcnt_)));
          set_has_avgcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Avg;
        break;
      }

      // required double Avg = 2;
      case 2: {
        if (tag == 17) {
         parse_Avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_)));
          set_has_avg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Min;
        break;
      }

      // required double Min = 3;
      case 3: {
        if (tag == 25) {
         parse_Min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Max;
        break;
      }

      // required double Max = 4;
      case 4: {
        if (tag == 33) {
         parse_Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.TStatRot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.TStatRot)
  return false;
#undef DO_
}

void TStatRot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.TStatRot)
  // required int32 AvgCnt = 1;
  if (has_avgcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avgcnt(), output);
  }

  // required double Avg = 2;
  if (has_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->avg(), output);
  }

  // required double Min = 3;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min(), output);
  }

  // required double Max = 4;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.TStatRot)
}

::google::protobuf::uint8* TStatRot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.TStatRot)
  // required int32 AvgCnt = 1;
  if (has_avgcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avgcnt(), target);
  }

  // required double Avg = 2;
  if (has_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->avg(), target);
  }

  // required double Min = 3;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min(), target);
  }

  // required double Max = 4;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.TStatRot)
  return target;
}

int TStatRot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AvgCnt = 1;
    if (has_avgcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avgcnt());
    }

    // required double Avg = 2;
    if (has_avg()) {
      total_size += 1 + 8;
    }

    // required double Min = 3;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // required double Max = 4;
    if (has_max()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TStatRot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TStatRot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TStatRot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TStatRot::MergeFrom(const TStatRot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avgcnt()) {
      set_avgcnt(from.avgcnt());
    }
    if (from.has_avg()) {
      set_avg(from.avg());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TStatRot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TStatRot::CopyFrom(const TStatRot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TStatRot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TStatRot::Swap(TStatRot* other) {
  if (other != this) {
    std::swap(avgcnt_, other->avgcnt_);
    std::swap(avg_, other->avg_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TStatRot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TStatRot_descriptor_;
  metadata.reflection = TStatRot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOffset::kTypeFieldNumber;
const int TOffset::kValueFieldNumber;
#endif  // !_MSC_VER

TOffset::TOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.TOffset)
}

void TOffset::InitAsDefaultInstance() {
}

TOffset::TOffset(const TOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.TOffset)
}

void TOffset::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOffset::~TOffset() {
  // @@protoc_insertion_point(destructor:task_manager.TOffset)
  SharedDtor();
}

void TOffset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOffset_descriptor_;
}

const TOffset& TOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

TOffset* TOffset::default_instance_ = NULL;

TOffset* TOffset::New() const {
  return new TOffset;
}

void TOffset::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TOffset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.TOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // required int64 Value = 2;
      case 2: {
        if (tag == 16) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.TOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.TOffset)
  return false;
#undef DO_
}

void TOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.TOffset)
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.TOffset)
}

::google::protobuf::uint8* TOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.TOffset)
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.TOffset)
  return target;
}

int TOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOffset::MergeFrom(const TOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOffset::CopyFrom(const TOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOffset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TOffset::Swap(TOffset* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOffset_descriptor_;
  metadata.reflection = TOffset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFrotLimits::kFrotMinFieldNumber;
const int TFrotLimits::kFrotMaxFieldNumber;
const int TFrotLimits::kDeltaFrotOneMeasFieldNumber;
const int TFrotLimits::kDeltaFrotAllMeasFieldNumber;
#endif  // !_MSC_VER

TFrotLimits::TFrotLimits()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.TFrotLimits)
}

void TFrotLimits::InitAsDefaultInstance() {
}

TFrotLimits::TFrotLimits(const TFrotLimits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.TFrotLimits)
}

void TFrotLimits::SharedCtor() {
  _cached_size_ = 0;
  frot_min_ = 0;
  frot_max_ = 0;
  deltafrotonemeas_ = 0;
  deltafrotallmeas_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFrotLimits::~TFrotLimits() {
  // @@protoc_insertion_point(destructor:task_manager.TFrotLimits)
  SharedDtor();
}

void TFrotLimits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFrotLimits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFrotLimits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFrotLimits_descriptor_;
}

const TFrotLimits& TFrotLimits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

TFrotLimits* TFrotLimits::default_instance_ = NULL;

TFrotLimits* TFrotLimits::New() const {
  return new TFrotLimits;
}

void TFrotLimits::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFrotLimits*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frot_min_, deltafrotallmeas_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFrotLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.TFrotLimits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Frot_min = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frot_min_)));
          set_has_frot_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Frot_max;
        break;
      }

      // required double Frot_max = 2;
      case 2: {
        if (tag == 17) {
         parse_Frot_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frot_max_)));
          set_has_frot_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_DeltaFrotOneMeas;
        break;
      }

      // required double DeltaFrotOneMeas = 3;
      case 3: {
        if (tag == 25) {
         parse_DeltaFrotOneMeas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltafrotonemeas_)));
          set_has_deltafrotonemeas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_DeltaFrotAllMeas;
        break;
      }

      // required double DeltaFrotAllMeas = 4;
      case 4: {
        if (tag == 33) {
         parse_DeltaFrotAllMeas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltafrotallmeas_)));
          set_has_deltafrotallmeas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.TFrotLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.TFrotLimits)
  return false;
#undef DO_
}

void TFrotLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.TFrotLimits)
  // required double Frot_min = 1;
  if (has_frot_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->frot_min(), output);
  }

  // required double Frot_max = 2;
  if (has_frot_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frot_max(), output);
  }

  // required double DeltaFrotOneMeas = 3;
  if (has_deltafrotonemeas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deltafrotonemeas(), output);
  }

  // required double DeltaFrotAllMeas = 4;
  if (has_deltafrotallmeas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->deltafrotallmeas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.TFrotLimits)
}

::google::protobuf::uint8* TFrotLimits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.TFrotLimits)
  // required double Frot_min = 1;
  if (has_frot_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->frot_min(), target);
  }

  // required double Frot_max = 2;
  if (has_frot_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frot_max(), target);
  }

  // required double DeltaFrotOneMeas = 3;
  if (has_deltafrotonemeas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deltafrotonemeas(), target);
  }

  // required double DeltaFrotAllMeas = 4;
  if (has_deltafrotallmeas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->deltafrotallmeas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.TFrotLimits)
  return target;
}

int TFrotLimits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Frot_min = 1;
    if (has_frot_min()) {
      total_size += 1 + 8;
    }

    // required double Frot_max = 2;
    if (has_frot_max()) {
      total_size += 1 + 8;
    }

    // required double DeltaFrotOneMeas = 3;
    if (has_deltafrotonemeas()) {
      total_size += 1 + 8;
    }

    // required double DeltaFrotAllMeas = 4;
    if (has_deltafrotallmeas()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFrotLimits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFrotLimits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFrotLimits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFrotLimits::MergeFrom(const TFrotLimits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frot_min()) {
      set_frot_min(from.frot_min());
    }
    if (from.has_frot_max()) {
      set_frot_max(from.frot_max());
    }
    if (from.has_deltafrotonemeas()) {
      set_deltafrotonemeas(from.deltafrotonemeas());
    }
    if (from.has_deltafrotallmeas()) {
      set_deltafrotallmeas(from.deltafrotallmeas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFrotLimits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFrotLimits::CopyFrom(const TFrotLimits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFrotLimits::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TFrotLimits::Swap(TFrotLimits* other) {
  if (other != this) {
    std::swap(frot_min_, other->frot_min_);
    std::swap(frot_max_, other->frot_max_);
    std::swap(deltafrotonemeas_, other->deltafrotonemeas_);
    std::swap(deltafrotallmeas_, other->deltafrotallmeas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFrotLimits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFrotLimits_descriptor_;
  metadata.reflection = TFrotLimits_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RBitem::kValueYFieldNumber;
const int RBitem::kValueXFieldNumber;
const int RBitem::kValidExternFieldNumber;
const int RBitem::kValidFieldNumber;
const int RBitem::kValidRoughFieldNumber;
#endif  // !_MSC_VER

RBitem::RBitem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.RBitem)
}

void RBitem::InitAsDefaultInstance() {
}

RBitem::RBitem(const RBitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.RBitem)
}

void RBitem::SharedCtor() {
  _cached_size_ = 0;
  valuey_ = 0;
  valuex_ = 0;
  validextern_ = false;
  valid_ = false;
  validrough_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RBitem::~RBitem() {
  // @@protoc_insertion_point(destructor:task_manager.RBitem)
  SharedDtor();
}

void RBitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RBitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RBitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RBitem_descriptor_;
}

const RBitem& RBitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

RBitem* RBitem::default_instance_ = NULL;

RBitem* RBitem::New() const {
  return new RBitem;
}

void RBitem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RBitem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(valuey_, validrough_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RBitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.RBitem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ValueY = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &valuey_)));
          set_has_valuey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ValueX;
        break;
      }

      // required double ValueX = 2;
      case 2: {
        if (tag == 17) {
         parse_ValueX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &valuex_)));
          set_has_valuex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ValidExtern;
        break;
      }

      // required bool ValidExtern = 3;
      case 3: {
        if (tag == 24) {
         parse_ValidExtern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validextern_)));
          set_has_validextern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Valid;
        break;
      }

      // required bool Valid = 4;
      case 4: {
        if (tag == 32) {
         parse_Valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ValidRough;
        break;
      }

      // required bool ValidRough = 5;
      case 5: {
        if (tag == 40) {
         parse_ValidRough:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &validrough_)));
          set_has_validrough();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.RBitem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.RBitem)
  return false;
#undef DO_
}

void RBitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.RBitem)
  // required double ValueY = 1;
  if (has_valuey()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->valuey(), output);
  }

  // required double ValueX = 2;
  if (has_valuex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->valuex(), output);
  }

  // required bool ValidExtern = 3;
  if (has_validextern()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->validextern(), output);
  }

  // required bool Valid = 4;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->valid(), output);
  }

  // required bool ValidRough = 5;
  if (has_validrough()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->validrough(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.RBitem)
}

::google::protobuf::uint8* RBitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.RBitem)
  // required double ValueY = 1;
  if (has_valuey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->valuey(), target);
  }

  // required double ValueX = 2;
  if (has_valuex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->valuex(), target);
  }

  // required bool ValidExtern = 3;
  if (has_validextern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->validextern(), target);
  }

  // required bool Valid = 4;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->valid(), target);
  }

  // required bool ValidRough = 5;
  if (has_validrough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->validrough(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.RBitem)
  return target;
}

int RBitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double ValueY = 1;
    if (has_valuey()) {
      total_size += 1 + 8;
    }

    // required double ValueX = 2;
    if (has_valuex()) {
      total_size += 1 + 8;
    }

    // required bool ValidExtern = 3;
    if (has_validextern()) {
      total_size += 1 + 1;
    }

    // required bool Valid = 4;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // required bool ValidRough = 5;
    if (has_validrough()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RBitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RBitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RBitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RBitem::MergeFrom(const RBitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valuey()) {
      set_valuey(from.valuey());
    }
    if (from.has_valuex()) {
      set_valuex(from.valuex());
    }
    if (from.has_validextern()) {
      set_validextern(from.validextern());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_validrough()) {
      set_validrough(from.validrough());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RBitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RBitem::CopyFrom(const RBitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RBitem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RBitem::Swap(RBitem* other) {
  if (other != this) {
    std::swap(valuey_, other->valuey_);
    std::swap(valuex_, other->valuex_);
    std::swap(validextern_, other->validextern_);
    std::swap(valid_, other->valid_);
    std::swap(validrough_, other->validrough_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RBitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RBitem_descriptor_;
  metadata.reflection = RBitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spectr_data::kFTypeFieldNumber;
const int Spectr_data::kFLPFilterFieldNumber;
const int Spectr_data::kFBPFilterFieldNumber;
const int Spectr_data::kFStatRotFieldNumber;
const int Spectr_data::kFAvgCountFieldNumber;
const int Spectr_data::kFBegFreqFieldNumber;
const int Spectr_data::kFFreqStepFieldNumber;
const int Spectr_data::kFLinesCntFieldNumber;
const int Spectr_data::kFAmpUnitFieldNumber;
const int Spectr_data::kFAmpFieldNumber;
const int Spectr_data::kFSIAmpFieldNumber;
#endif  // !_MSC_VER

Spectr_data::Spectr_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.Spectr_data)
}

void Spectr_data::InitAsDefaultInstance() {
  flpfilter_ = const_cast< ::task_manager::LPFilter*>(&::task_manager::LPFilter::default_instance());
  fbpfilter_ = const_cast< ::task_manager::BPFilter*>(&::task_manager::BPFilter::default_instance());
  fstatrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

Spectr_data::Spectr_data(const Spectr_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.Spectr_data)
}

void Spectr_data::SharedCtor() {
  _cached_size_ = 0;
  ftype_ = 0u;
  flpfilter_ = NULL;
  fbpfilter_ = NULL;
  fstatrot_ = NULL;
  favgcount_ = 0u;
  fbegfreq_ = 0;
  ffreqstep_ = 0;
  flinescnt_ = 0u;
  fampunit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spectr_data::~Spectr_data() {
  // @@protoc_insertion_point(destructor:task_manager.Spectr_data)
  SharedDtor();
}

void Spectr_data::SharedDtor() {
  if (this != default_instance_) {
    delete flpfilter_;
    delete fbpfilter_;
    delete fstatrot_;
  }
}

void Spectr_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spectr_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spectr_data_descriptor_;
}

const Spectr_data& Spectr_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

Spectr_data* Spectr_data::default_instance_ = NULL;

Spectr_data* Spectr_data::New() const {
  return new Spectr_data;
}

void Spectr_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Spectr_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ftype_, favgcount_);
    ZR_(fbegfreq_, flinescnt_);
    if (has_flpfilter()) {
      if (flpfilter_ != NULL) flpfilter_->::task_manager::LPFilter::Clear();
    }
    if (has_fbpfilter()) {
      if (fbpfilter_ != NULL) fbpfilter_->::task_manager::BPFilter::Clear();
    }
    if (has_fstatrot()) {
      if (fstatrot_ != NULL) fstatrot_->::task_manager::TStatRot::Clear();
    }
  }
  fampunit_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  famp_.Clear();
  fsiamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spectr_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.Spectr_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ftype_)));
          set_has_ftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FLPFilter;
        break;
      }

      // required .task_manager.LPFilter FLPFilter = 2;
      case 2: {
        if (tag == 18) {
         parse_FLPFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flpfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FBPFilter;
        break;
      }

      // required .task_manager.BPFilter FBPFilter = 3;
      case 3: {
        if (tag == 26) {
         parse_FBPFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fbpfilter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FStatRot;
        break;
      }

      // required .task_manager.TStatRot FStatRot = 4;
      case 4: {
        if (tag == 34) {
         parse_FStatRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fstatrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FAvgCount;
        break;
      }

      // required uint32 FAvgCount = 5;
      case 5: {
        if (tag == 40) {
         parse_FAvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favgcount_)));
          set_has_favgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_FBegFreq;
        break;
      }

      // required double FBegFreq = 6;
      case 6: {
        if (tag == 49) {
         parse_FBegFreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fbegfreq_)));
          set_has_fbegfreq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_FFreqStep;
        break;
      }

      // required double FFreqStep = 7;
      case 7: {
        if (tag == 57) {
         parse_FFreqStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ffreqstep_)));
          set_has_ffreqstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_FLinesCnt;
        break;
      }

      // required uint32 FLinesCnt = 8;
      case 8: {
        if (tag == 64) {
         parse_FLinesCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flinescnt_)));
          set_has_flinescnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_FAmpUnit;
        break;
      }

      // required uint32 FAmpUnit = 9;
      case 9: {
        if (tag == 72) {
         parse_FAmpUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fampunit_)));
          set_has_fampunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_FAmp;
        break;
      }

      // repeated double FAmp = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_FAmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_famp())));
        } else if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82, input, this->mutable_famp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_FSIAmp;
        break;
      }

      // repeated double FSIAmp = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_FSIAmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_fsiamp())));
        } else if (tag == 89) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 90, input, this->mutable_fsiamp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.Spectr_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.Spectr_data)
  return false;
#undef DO_
}

void Spectr_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.Spectr_data)
  // required uint32 FType = 1;
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ftype(), output);
  }

  // required .task_manager.LPFilter FLPFilter = 2;
  if (has_flpfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flpfilter(), output);
  }

  // required .task_manager.BPFilter FBPFilter = 3;
  if (has_fbpfilter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fbpfilter(), output);
  }

  // required .task_manager.TStatRot FStatRot = 4;
  if (has_fstatrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fstatrot(), output);
  }

  // required uint32 FAvgCount = 5;
  if (has_favgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favgcount(), output);
  }

  // required double FBegFreq = 6;
  if (has_fbegfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->fbegfreq(), output);
  }

  // required double FFreqStep = 7;
  if (has_ffreqstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ffreqstep(), output);
  }

  // required uint32 FLinesCnt = 8;
  if (has_flinescnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flinescnt(), output);
  }

  // required uint32 FAmpUnit = 9;
  if (has_fampunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fampunit(), output);
  }

  // repeated double FAmp = 10 [packed = true];
  if (this->famp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_famp_cached_byte_size_);
  }
  for (int i = 0; i < this->famp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->famp(i), output);
  }

  // repeated double FSIAmp = 11 [packed = true];
  if (this->fsiamp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fsiamp_cached_byte_size_);
  }
  for (int i = 0; i < this->fsiamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->fsiamp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.Spectr_data)
}

::google::protobuf::uint8* Spectr_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.Spectr_data)
  // required uint32 FType = 1;
  if (has_ftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ftype(), target);
  }

  // required .task_manager.LPFilter FLPFilter = 2;
  if (has_flpfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flpfilter(), target);
  }

  // required .task_manager.BPFilter FBPFilter = 3;
  if (has_fbpfilter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fbpfilter(), target);
  }

  // required .task_manager.TStatRot FStatRot = 4;
  if (has_fstatrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fstatrot(), target);
  }

  // required uint32 FAvgCount = 5;
  if (has_favgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favgcount(), target);
  }

  // required double FBegFreq = 6;
  if (has_fbegfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->fbegfreq(), target);
  }

  // required double FFreqStep = 7;
  if (has_ffreqstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ffreqstep(), target);
  }

  // required uint32 FLinesCnt = 8;
  if (has_flinescnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flinescnt(), target);
  }

  // required uint32 FAmpUnit = 9;
  if (has_fampunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fampunit(), target);
  }

  // repeated double FAmp = 10 [packed = true];
  if (this->famp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _famp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->famp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->famp(i), target);
  }

  // repeated double FSIAmp = 11 [packed = true];
  if (this->fsiamp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fsiamp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fsiamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->fsiamp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.Spectr_data)
  return target;
}

int Spectr_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 FType = 1;
    if (has_ftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ftype());
    }

    // required .task_manager.LPFilter FLPFilter = 2;
    if (has_flpfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flpfilter());
    }

    // required .task_manager.BPFilter FBPFilter = 3;
    if (has_fbpfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fbpfilter());
    }

    // required .task_manager.TStatRot FStatRot = 4;
    if (has_fstatrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fstatrot());
    }

    // required uint32 FAvgCount = 5;
    if (has_favgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favgcount());
    }

    // required double FBegFreq = 6;
    if (has_fbegfreq()) {
      total_size += 1 + 8;
    }

    // required double FFreqStep = 7;
    if (has_ffreqstep()) {
      total_size += 1 + 8;
    }

    // required uint32 FLinesCnt = 8;
    if (has_flinescnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flinescnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 FAmpUnit = 9;
    if (has_fampunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fampunit());
    }

  }
  // repeated double FAmp = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->famp_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _famp_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double FSIAmp = 11 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->fsiamp_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fsiamp_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spectr_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spectr_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spectr_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spectr_data::MergeFrom(const Spectr_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  famp_.MergeFrom(from.famp_);
  fsiamp_.MergeFrom(from.fsiamp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ftype()) {
      set_ftype(from.ftype());
    }
    if (from.has_flpfilter()) {
      mutable_flpfilter()->::task_manager::LPFilter::MergeFrom(from.flpfilter());
    }
    if (from.has_fbpfilter()) {
      mutable_fbpfilter()->::task_manager::BPFilter::MergeFrom(from.fbpfilter());
    }
    if (from.has_fstatrot()) {
      mutable_fstatrot()->::task_manager::TStatRot::MergeFrom(from.fstatrot());
    }
    if (from.has_favgcount()) {
      set_favgcount(from.favgcount());
    }
    if (from.has_fbegfreq()) {
      set_fbegfreq(from.fbegfreq());
    }
    if (from.has_ffreqstep()) {
      set_ffreqstep(from.ffreqstep());
    }
    if (from.has_flinescnt()) {
      set_flinescnt(from.flinescnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fampunit()) {
      set_fampunit(from.fampunit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spectr_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spectr_data::CopyFrom(const Spectr_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spectr_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_flpfilter()) {
    if (!this->flpfilter().IsInitialized()) return false;
  }
  if (has_fbpfilter()) {
    if (!this->fbpfilter().IsInitialized()) return false;
  }
  if (has_fstatrot()) {
    if (!this->fstatrot().IsInitialized()) return false;
  }
  return true;
}

void Spectr_data::Swap(Spectr_data* other) {
  if (other != this) {
    std::swap(ftype_, other->ftype_);
    std::swap(flpfilter_, other->flpfilter_);
    std::swap(fbpfilter_, other->fbpfilter_);
    std::swap(fstatrot_, other->fstatrot_);
    std::swap(favgcount_, other->favgcount_);
    std::swap(fbegfreq_, other->fbegfreq_);
    std::swap(ffreqstep_, other->ffreqstep_);
    std::swap(flinescnt_, other->flinescnt_);
    std::swap(fampunit_, other->fampunit_);
    famp_.Swap(&other->famp_);
    fsiamp_.Swap(&other->fsiamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spectr_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spectr_data_descriptor_;
  metadata.reflection = Spectr_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vharmonic_data::kAmpFieldNumber;
const int Vharmonic_data::kPhFieldNumber;
const int Vharmonic_data::kFreqFieldNumber;
const int Vharmonic_data::kStatRotFieldNumber;
const int Vharmonic_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

Vharmonic_data::Vharmonic_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.Vharmonic_data)
}

void Vharmonic_data::InitAsDefaultInstance() {
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

Vharmonic_data::Vharmonic_data(const Vharmonic_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.Vharmonic_data)
}

void Vharmonic_data::SharedCtor() {
  _cached_size_ = 0;
  amp_ = 0;
  ph_ = 0;
  freq_ = 0;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vharmonic_data::~Vharmonic_data() {
  // @@protoc_insertion_point(destructor:task_manager.Vharmonic_data)
  SharedDtor();
}

void Vharmonic_data::SharedDtor() {
  if (this != default_instance_) {
    delete statrot_;
  }
}

void Vharmonic_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vharmonic_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vharmonic_data_descriptor_;
}

const Vharmonic_data& Vharmonic_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

Vharmonic_data* Vharmonic_data::default_instance_ = NULL;

Vharmonic_data* Vharmonic_data::New() const {
  return new Vharmonic_data;
}

void Vharmonic_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vharmonic_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(amp_, freq_);
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vharmonic_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.Vharmonic_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double amp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amp_)));
          set_has_amp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ph;
        break;
      }

      // required double ph = 2;
      case 2: {
        if (tag == 17) {
         parse_ph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ph_)));
          set_has_ph();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_freq;
        break;
      }

      // required double freq = 3;
      case 3: {
        if (tag == 25) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StatRot;
        break;
      }

      // required .task_manager.TStatRot StatRot = 4;
      case 4: {
        if (tag == 34) {
         parse_StatRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 5;
      case 5: {
        if (tag == 40) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.Vharmonic_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.Vharmonic_data)
  return false;
#undef DO_
}

void Vharmonic_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.Vharmonic_data)
  // required double amp = 1;
  if (has_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->amp(), output);
  }

  // required double ph = 2;
  if (has_ph()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ph(), output);
  }

  // required double freq = 3;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->freq(), output);
  }

  // required .task_manager.TStatRot StatRot = 4;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->statrot(), output);
  }

  // required uint32 AvgCount = 5;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.Vharmonic_data)
}

::google::protobuf::uint8* Vharmonic_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.Vharmonic_data)
  // required double amp = 1;
  if (has_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->amp(), target);
  }

  // required double ph = 2;
  if (has_ph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ph(), target);
  }

  // required double freq = 3;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->freq(), target);
  }

  // required .task_manager.TStatRot StatRot = 4;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->statrot(), target);
  }

  // required uint32 AvgCount = 5;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.Vharmonic_data)
  return target;
}

int Vharmonic_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double amp = 1;
    if (has_amp()) {
      total_size += 1 + 8;
    }

    // required double ph = 2;
    if (has_ph()) {
      total_size += 1 + 8;
    }

    // required double freq = 3;
    if (has_freq()) {
      total_size += 1 + 8;
    }

    // required .task_manager.TStatRot StatRot = 4;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 5;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vharmonic_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vharmonic_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vharmonic_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vharmonic_data::MergeFrom(const Vharmonic_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amp()) {
      set_amp(from.amp());
    }
    if (from.has_ph()) {
      set_ph(from.ph());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vharmonic_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vharmonic_data::CopyFrom(const Vharmonic_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vharmonic_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void Vharmonic_data::Swap(Vharmonic_data* other) {
  if (other != this) {
    std::swap(amp_, other->amp_);
    std::swap(ph_, other->ph_);
    std::swap(freq_, other->freq_);
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vharmonic_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vharmonic_data_descriptor_;
  metadata.reflection = Vharmonic_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatKurtosis_data::kMinFieldNumber;
const int StatKurtosis_data::kMaxFieldNumber;
const int StatKurtosis_data::kMeanFieldNumber;
const int StatKurtosis_data::kStdFieldNumber;
const int StatKurtosis_data::kKurtosisFieldNumber;
const int StatKurtosis_data::kPeakFactorFieldNumber;
const int StatKurtosis_data::kStatRotFieldNumber;
const int StatKurtosis_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

StatKurtosis_data::StatKurtosis_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.StatKurtosis_data)
}

void StatKurtosis_data::InitAsDefaultInstance() {
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

StatKurtosis_data::StatKurtosis_data(const StatKurtosis_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.StatKurtosis_data)
}

void StatKurtosis_data::SharedCtor() {
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  mean_ = 0;
  std_ = 0;
  kurtosis_ = 0;
  peak_factor_ = 0;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatKurtosis_data::~StatKurtosis_data() {
  // @@protoc_insertion_point(destructor:task_manager.StatKurtosis_data)
  SharedDtor();
}

void StatKurtosis_data::SharedDtor() {
  if (this != default_instance_) {
    delete statrot_;
  }
}

void StatKurtosis_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatKurtosis_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatKurtosis_data_descriptor_;
}

const StatKurtosis_data& StatKurtosis_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

StatKurtosis_data* StatKurtosis_data::default_instance_ = NULL;

StatKurtosis_data* StatKurtosis_data::New() const {
  return new StatKurtosis_data;
}

void StatKurtosis_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatKurtosis_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(min_, peak_factor_);
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatKurtosis_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.StatKurtosis_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double min = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max;
        break;
      }

      // required double max = 2;
      case 2: {
        if (tag == 17) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_mean;
        break;
      }

      // required double mean = 3;
      case 3: {
        if (tag == 25) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_std;
        break;
      }

      // required double std = 4;
      case 4: {
        if (tag == 33) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_kurtosis;
        break;
      }

      // required double kurtosis = 5;
      case 5: {
        if (tag == 41) {
         parse_kurtosis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kurtosis_)));
          set_has_kurtosis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_peak_factor;
        break;
      }

      // required double peak_factor = 6;
      case 6: {
        if (tag == 49) {
         parse_peak_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_factor_)));
          set_has_peak_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_StatRot;
        break;
      }

      // required .task_manager.TStatRot StatRot = 7;
      case 7: {
        if (tag == 58) {
         parse_StatRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 8;
      case 8: {
        if (tag == 64) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.StatKurtosis_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.StatKurtosis_data)
  return false;
#undef DO_
}

void StatKurtosis_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.StatKurtosis_data)
  // required double min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // required double max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  // required double mean = 3;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mean(), output);
  }

  // required double std = 4;
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->std(), output);
  }

  // required double kurtosis = 5;
  if (has_kurtosis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kurtosis(), output);
  }

  // required double peak_factor = 6;
  if (has_peak_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->peak_factor(), output);
  }

  // required .task_manager.TStatRot StatRot = 7;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->statrot(), output);
  }

  // required uint32 AvgCount = 8;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.StatKurtosis_data)
}

::google::protobuf::uint8* StatKurtosis_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.StatKurtosis_data)
  // required double min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // required double max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  // required double mean = 3;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mean(), target);
  }

  // required double std = 4;
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->std(), target);
  }

  // required double kurtosis = 5;
  if (has_kurtosis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kurtosis(), target);
  }

  // required double peak_factor = 6;
  if (has_peak_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->peak_factor(), target);
  }

  // required .task_manager.TStatRot StatRot = 7;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->statrot(), target);
  }

  // required uint32 AvgCount = 8;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.StatKurtosis_data)
  return target;
}

int StatKurtosis_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double min = 1;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // required double max = 2;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // required double mean = 3;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // required double std = 4;
    if (has_std()) {
      total_size += 1 + 8;
    }

    // required double kurtosis = 5;
    if (has_kurtosis()) {
      total_size += 1 + 8;
    }

    // required double peak_factor = 6;
    if (has_peak_factor()) {
      total_size += 1 + 8;
    }

    // required .task_manager.TStatRot StatRot = 7;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 8;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatKurtosis_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatKurtosis_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatKurtosis_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatKurtosis_data::MergeFrom(const StatKurtosis_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_kurtosis()) {
      set_kurtosis(from.kurtosis());
    }
    if (from.has_peak_factor()) {
      set_peak_factor(from.peak_factor());
    }
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatKurtosis_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatKurtosis_data::CopyFrom(const StatKurtosis_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatKurtosis_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void StatKurtosis_data::Swap(StatKurtosis_data* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(kurtosis_, other->kurtosis_);
    std::swap(peak_factor_, other->peak_factor_);
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatKurtosis_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatKurtosis_data_descriptor_;
  metadata.reflection = StatKurtosis_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatTimeSig_data::kMinFieldNumber;
const int StatTimeSig_data::kMaxFieldNumber;
const int StatTimeSig_data::kMeanFieldNumber;
const int StatTimeSig_data::kStdFieldNumber;
const int StatTimeSig_data::kKurtosisFieldNumber;
const int StatTimeSig_data::kPeakFactorFieldNumber;
const int StatTimeSig_data::kStatRotFieldNumber;
const int StatTimeSig_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

StatTimeSig_data::StatTimeSig_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.StatTimeSig_data)
}

void StatTimeSig_data::InitAsDefaultInstance() {
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

StatTimeSig_data::StatTimeSig_data(const StatTimeSig_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.StatTimeSig_data)
}

void StatTimeSig_data::SharedCtor() {
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  mean_ = 0;
  std_ = 0;
  kurtosis_ = 0;
  peak_factor_ = 0;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatTimeSig_data::~StatTimeSig_data() {
  // @@protoc_insertion_point(destructor:task_manager.StatTimeSig_data)
  SharedDtor();
}

void StatTimeSig_data::SharedDtor() {
  if (this != default_instance_) {
    delete statrot_;
  }
}

void StatTimeSig_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatTimeSig_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatTimeSig_data_descriptor_;
}

const StatTimeSig_data& StatTimeSig_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

StatTimeSig_data* StatTimeSig_data::default_instance_ = NULL;

StatTimeSig_data* StatTimeSig_data::New() const {
  return new StatTimeSig_data;
}

void StatTimeSig_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatTimeSig_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(min_, peak_factor_);
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatTimeSig_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.StatTimeSig_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double min = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_max;
        break;
      }

      // required double max = 2;
      case 2: {
        if (tag == 17) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_mean;
        break;
      }

      // required double mean = 3;
      case 3: {
        if (tag == 25) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_std;
        break;
      }

      // required double std = 4;
      case 4: {
        if (tag == 33) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_kurtosis;
        break;
      }

      // required double kurtosis = 5;
      case 5: {
        if (tag == 41) {
         parse_kurtosis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kurtosis_)));
          set_has_kurtosis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_peak_factor;
        break;
      }

      // required double peak_factor = 6;
      case 6: {
        if (tag == 49) {
         parse_peak_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peak_factor_)));
          set_has_peak_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_StatRot;
        break;
      }

      // required .task_manager.TStatRot StatRot = 7;
      case 7: {
        if (tag == 58) {
         parse_StatRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 8;
      case 8: {
        if (tag == 64) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.StatTimeSig_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.StatTimeSig_data)
  return false;
#undef DO_
}

void StatTimeSig_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.StatTimeSig_data)
  // required double min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // required double max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  // required double mean = 3;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mean(), output);
  }

  // required double std = 4;
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->std(), output);
  }

  // required double kurtosis = 5;
  if (has_kurtosis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kurtosis(), output);
  }

  // required double peak_factor = 6;
  if (has_peak_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->peak_factor(), output);
  }

  // required .task_manager.TStatRot StatRot = 7;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->statrot(), output);
  }

  // required uint32 AvgCount = 8;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.StatTimeSig_data)
}

::google::protobuf::uint8* StatTimeSig_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.StatTimeSig_data)
  // required double min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // required double max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  // required double mean = 3;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mean(), target);
  }

  // required double std = 4;
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->std(), target);
  }

  // required double kurtosis = 5;
  if (has_kurtosis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kurtosis(), target);
  }

  // required double peak_factor = 6;
  if (has_peak_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->peak_factor(), target);
  }

  // required .task_manager.TStatRot StatRot = 7;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->statrot(), target);
  }

  // required uint32 AvgCount = 8;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.StatTimeSig_data)
  return target;
}

int StatTimeSig_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double min = 1;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // required double max = 2;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // required double mean = 3;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // required double std = 4;
    if (has_std()) {
      total_size += 1 + 8;
    }

    // required double kurtosis = 5;
    if (has_kurtosis()) {
      total_size += 1 + 8;
    }

    // required double peak_factor = 6;
    if (has_peak_factor()) {
      total_size += 1 + 8;
    }

    // required .task_manager.TStatRot StatRot = 7;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 8;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatTimeSig_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatTimeSig_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatTimeSig_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatTimeSig_data::MergeFrom(const StatTimeSig_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_kurtosis()) {
      set_kurtosis(from.kurtosis());
    }
    if (from.has_peak_factor()) {
      set_peak_factor(from.peak_factor());
    }
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatTimeSig_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatTimeSig_data::CopyFrom(const StatTimeSig_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatTimeSig_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void StatTimeSig_data::Swap(StatTimeSig_data* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(kurtosis_, other->kurtosis_);
    std::swap(peak_factor_, other->peak_factor_);
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatTimeSig_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatTimeSig_data_descriptor_;
  metadata.reflection = StatTimeSig_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QualityTimeSig_data::kSigOverFlowFieldNumber;
const int QualityTimeSig_data::kSigTooLowFieldNumber;
const int QualityTimeSig_data::kSigTooHighFieldNumber;
const int QualityTimeSig_data::kAmpPeakToPeakCalcFieldNumber;
const int QualityTimeSig_data::kAmpStdCalcFieldNumber;
const int QualityTimeSig_data::kSigOverFlowCountFieldNumber;
const int QualityTimeSig_data::kStatRotFieldNumber;
const int QualityTimeSig_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

QualityTimeSig_data::QualityTimeSig_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.QualityTimeSig_data)
}

void QualityTimeSig_data::InitAsDefaultInstance() {
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

QualityTimeSig_data::QualityTimeSig_data(const QualityTimeSig_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.QualityTimeSig_data)
}

void QualityTimeSig_data::SharedCtor() {
  _cached_size_ = 0;
  sigoverflow_ = false;
  sigtoolow_ = false;
  sigtoohigh_ = false;
  amppeaktopeakcalc_ = 0;
  ampstdcalc_ = 0;
  sigoverflowcount_ = 0;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QualityTimeSig_data::~QualityTimeSig_data() {
  // @@protoc_insertion_point(destructor:task_manager.QualityTimeSig_data)
  SharedDtor();
}

void QualityTimeSig_data::SharedDtor() {
  if (this != default_instance_) {
    delete statrot_;
  }
}

void QualityTimeSig_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QualityTimeSig_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QualityTimeSig_data_descriptor_;
}

const QualityTimeSig_data& QualityTimeSig_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

QualityTimeSig_data* QualityTimeSig_data::default_instance_ = NULL;

QualityTimeSig_data* QualityTimeSig_data::New() const {
  return new QualityTimeSig_data;
}

void QualityTimeSig_data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QualityTimeSig_data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sigoverflow_, ampstdcalc_);
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QualityTimeSig_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.QualityTimeSig_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool SigOverFlow = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sigoverflow_)));
          set_has_sigoverflow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SigTooLow;
        break;
      }

      // required bool SigTooLow = 2;
      case 2: {
        if (tag == 16) {
         parse_SigTooLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sigtoolow_)));
          set_has_sigtoolow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SigTooHigh;
        break;
      }

      // required bool SigTooHigh = 3;
      case 3: {
        if (tag == 24) {
         parse_SigTooHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sigtoohigh_)));
          set_has_sigtoohigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_AmpPeakToPeakCalc;
        break;
      }

      // required double AmpPeakToPeakCalc = 4;
      case 4: {
        if (tag == 33) {
         parse_AmpPeakToPeakCalc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amppeaktopeakcalc_)));
          set_has_amppeaktopeakcalc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_AmpStdCalc;
        break;
      }

      // required double AmpStdCalc = 5;
      case 5: {
        if (tag == 41) {
         parse_AmpStdCalc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ampstdcalc_)));
          set_has_ampstdcalc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SigOverFlowCount;
        break;
      }

      // required int32 SigOverFlowCount = 6;
      case 6: {
        if (tag == 48) {
         parse_SigOverFlowCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sigoverflowcount_)));
          set_has_sigoverflowcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_StatRot;
        break;
      }

      // required .task_manager.TStatRot StatRot = 7;
      case 7: {
        if (tag == 58) {
         parse_StatRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 8;
      case 8: {
        if (tag == 64) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.QualityTimeSig_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.QualityTimeSig_data)
  return false;
#undef DO_
}

void QualityTimeSig_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.QualityTimeSig_data)
  // required bool SigOverFlow = 1;
  if (has_sigoverflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sigoverflow(), output);
  }

  // required bool SigTooLow = 2;
  if (has_sigtoolow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sigtoolow(), output);
  }

  // required bool SigTooHigh = 3;
  if (has_sigtoohigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sigtoohigh(), output);
  }

  // required double AmpPeakToPeakCalc = 4;
  if (has_amppeaktopeakcalc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amppeaktopeakcalc(), output);
  }

  // required double AmpStdCalc = 5;
  if (has_ampstdcalc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ampstdcalc(), output);
  }

  // required int32 SigOverFlowCount = 6;
  if (has_sigoverflowcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sigoverflowcount(), output);
  }

  // required .task_manager.TStatRot StatRot = 7;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->statrot(), output);
  }

  // required uint32 AvgCount = 8;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.QualityTimeSig_data)
}

::google::protobuf::uint8* QualityTimeSig_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.QualityTimeSig_data)
  // required bool SigOverFlow = 1;
  if (has_sigoverflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sigoverflow(), target);
  }

  // required bool SigTooLow = 2;
  if (has_sigtoolow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sigtoolow(), target);
  }

  // required bool SigTooHigh = 3;
  if (has_sigtoohigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sigtoohigh(), target);
  }

  // required double AmpPeakToPeakCalc = 4;
  if (has_amppeaktopeakcalc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amppeaktopeakcalc(), target);
  }

  // required double AmpStdCalc = 5;
  if (has_ampstdcalc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ampstdcalc(), target);
  }

  // required int32 SigOverFlowCount = 6;
  if (has_sigoverflowcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sigoverflowcount(), target);
  }

  // required .task_manager.TStatRot StatRot = 7;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->statrot(), target);
  }

  // required uint32 AvgCount = 8;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.QualityTimeSig_data)
  return target;
}

int QualityTimeSig_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool SigOverFlow = 1;
    if (has_sigoverflow()) {
      total_size += 1 + 1;
    }

    // required bool SigTooLow = 2;
    if (has_sigtoolow()) {
      total_size += 1 + 1;
    }

    // required bool SigTooHigh = 3;
    if (has_sigtoohigh()) {
      total_size += 1 + 1;
    }

    // required double AmpPeakToPeakCalc = 4;
    if (has_amppeaktopeakcalc()) {
      total_size += 1 + 8;
    }

    // required double AmpStdCalc = 5;
    if (has_ampstdcalc()) {
      total_size += 1 + 8;
    }

    // required int32 SigOverFlowCount = 6;
    if (has_sigoverflowcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sigoverflowcount());
    }

    // required .task_manager.TStatRot StatRot = 7;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 8;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QualityTimeSig_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QualityTimeSig_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QualityTimeSig_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QualityTimeSig_data::MergeFrom(const QualityTimeSig_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sigoverflow()) {
      set_sigoverflow(from.sigoverflow());
    }
    if (from.has_sigtoolow()) {
      set_sigtoolow(from.sigtoolow());
    }
    if (from.has_sigtoohigh()) {
      set_sigtoohigh(from.sigtoohigh());
    }
    if (from.has_amppeaktopeakcalc()) {
      set_amppeaktopeakcalc(from.amppeaktopeakcalc());
    }
    if (from.has_ampstdcalc()) {
      set_ampstdcalc(from.ampstdcalc());
    }
    if (from.has_sigoverflowcount()) {
      set_sigoverflowcount(from.sigoverflowcount());
    }
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QualityTimeSig_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityTimeSig_data::CopyFrom(const QualityTimeSig_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityTimeSig_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void QualityTimeSig_data::Swap(QualityTimeSig_data* other) {
  if (other != this) {
    std::swap(sigoverflow_, other->sigoverflow_);
    std::swap(sigtoolow_, other->sigtoolow_);
    std::swap(sigtoohigh_, other->sigtoohigh_);
    std::swap(amppeaktopeakcalc_, other->amppeaktopeakcalc_);
    std::swap(ampstdcalc_, other->ampstdcalc_);
    std::swap(sigoverflowcount_, other->sigoverflowcount_);
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QualityTimeSig_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QualityTimeSig_data_descriptor_;
  metadata.reflection = QualityTimeSig_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTimeSig_data::kStatRotFieldNumber;
const int SaveTimeSig_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

SaveTimeSig_data::SaveTimeSig_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.SaveTimeSig_data)
}

void SaveTimeSig_data::InitAsDefaultInstance() {
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

SaveTimeSig_data::SaveTimeSig_data(const SaveTimeSig_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.SaveTimeSig_data)
}

void SaveTimeSig_data::SharedCtor() {
  _cached_size_ = 0;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTimeSig_data::~SaveTimeSig_data() {
  // @@protoc_insertion_point(destructor:task_manager.SaveTimeSig_data)
  SharedDtor();
}

void SaveTimeSig_data::SharedDtor() {
  if (this != default_instance_) {
    delete statrot_;
  }
}

void SaveTimeSig_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTimeSig_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTimeSig_data_descriptor_;
}

const SaveTimeSig_data& SaveTimeSig_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

SaveTimeSig_data* SaveTimeSig_data::default_instance_ = NULL;

SaveTimeSig_data* SaveTimeSig_data::New() const {
  return new SaveTimeSig_data;
}

void SaveTimeSig_data::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTimeSig_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.SaveTimeSig_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.TStatRot StatRot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 2;
      case 2: {
        if (tag == 16) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.SaveTimeSig_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.SaveTimeSig_data)
  return false;
#undef DO_
}

void SaveTimeSig_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.SaveTimeSig_data)
  // required .task_manager.TStatRot StatRot = 1;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statrot(), output);
  }

  // required uint32 AvgCount = 2;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.SaveTimeSig_data)
}

::google::protobuf::uint8* SaveTimeSig_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.SaveTimeSig_data)
  // required .task_manager.TStatRot StatRot = 1;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statrot(), target);
  }

  // required uint32 AvgCount = 2;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.SaveTimeSig_data)
  return target;
}

int SaveTimeSig_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.TStatRot StatRot = 1;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 2;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTimeSig_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTimeSig_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTimeSig_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTimeSig_data::MergeFrom(const SaveTimeSig_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTimeSig_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTimeSig_data::CopyFrom(const SaveTimeSig_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTimeSig_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void SaveTimeSig_data::Swap(SaveTimeSig_data* other) {
  if (other != this) {
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTimeSig_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTimeSig_data_descriptor_;
  metadata.reflection = SaveTimeSig_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VsensorFrot_data::kFrotFieldNumber;
const int VsensorFrot_data::kStatRotFieldNumber;
const int VsensorFrot_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

VsensorFrot_data::VsensorFrot_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.VsensorFrot_data)
}

void VsensorFrot_data::InitAsDefaultInstance() {
  frot_ = const_cast< ::task_manager::RBitem*>(&::task_manager::RBitem::default_instance());
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

VsensorFrot_data::VsensorFrot_data(const VsensorFrot_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.VsensorFrot_data)
}

void VsensorFrot_data::SharedCtor() {
  _cached_size_ = 0;
  frot_ = NULL;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VsensorFrot_data::~VsensorFrot_data() {
  // @@protoc_insertion_point(destructor:task_manager.VsensorFrot_data)
  SharedDtor();
}

void VsensorFrot_data::SharedDtor() {
  if (this != default_instance_) {
    delete frot_;
    delete statrot_;
  }
}

void VsensorFrot_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VsensorFrot_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VsensorFrot_data_descriptor_;
}

const VsensorFrot_data& VsensorFrot_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

VsensorFrot_data* VsensorFrot_data::default_instance_ = NULL;

VsensorFrot_data* VsensorFrot_data::New() const {
  return new VsensorFrot_data;
}

void VsensorFrot_data::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_frot()) {
      if (frot_ != NULL) frot_->::task_manager::RBitem::Clear();
    }
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VsensorFrot_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.VsensorFrot_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.RBitem Frot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StatRot;
        break;
      }

      // required .task_manager.TStatRot StatRot = 2;
      case 2: {
        if (tag == 18) {
         parse_StatRot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 3;
      case 3: {
        if (tag == 24) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.VsensorFrot_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.VsensorFrot_data)
  return false;
#undef DO_
}

void VsensorFrot_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.VsensorFrot_data)
  // required .task_manager.RBitem Frot = 1;
  if (has_frot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frot(), output);
  }

  // required .task_manager.TStatRot StatRot = 2;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statrot(), output);
  }

  // required uint32 AvgCount = 3;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.VsensorFrot_data)
}

::google::protobuf::uint8* VsensorFrot_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.VsensorFrot_data)
  // required .task_manager.RBitem Frot = 1;
  if (has_frot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frot(), target);
  }

  // required .task_manager.TStatRot StatRot = 2;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statrot(), target);
  }

  // required uint32 AvgCount = 3;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.VsensorFrot_data)
  return target;
}

int VsensorFrot_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.RBitem Frot = 1;
    if (has_frot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frot());
    }

    // required .task_manager.TStatRot StatRot = 2;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 3;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VsensorFrot_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VsensorFrot_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VsensorFrot_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VsensorFrot_data::MergeFrom(const VsensorFrot_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frot()) {
      mutable_frot()->::task_manager::RBitem::MergeFrom(from.frot());
    }
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VsensorFrot_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VsensorFrot_data::CopyFrom(const VsensorFrot_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VsensorFrot_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_frot()) {
    if (!this->frot().IsInitialized()) return false;
  }
  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void VsensorFrot_data::Swap(VsensorFrot_data* other) {
  if (other != this) {
    std::swap(frot_, other->frot_);
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VsensorFrot_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VsensorFrot_data_descriptor_;
  metadata.reflection = VsensorFrot_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecimTimeSig_data::kStatRotFieldNumber;
const int DecimTimeSig_data::kAvgCountFieldNumber;
#endif  // !_MSC_VER

DecimTimeSig_data::DecimTimeSig_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.DecimTimeSig_data)
}

void DecimTimeSig_data::InitAsDefaultInstance() {
  statrot_ = const_cast< ::task_manager::TStatRot*>(&::task_manager::TStatRot::default_instance());
}

DecimTimeSig_data::DecimTimeSig_data(const DecimTimeSig_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.DecimTimeSig_data)
}

void DecimTimeSig_data::SharedCtor() {
  _cached_size_ = 0;
  statrot_ = NULL;
  avgcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecimTimeSig_data::~DecimTimeSig_data() {
  // @@protoc_insertion_point(destructor:task_manager.DecimTimeSig_data)
  SharedDtor();
}

void DecimTimeSig_data::SharedDtor() {
  if (this != default_instance_) {
    delete statrot_;
  }
}

void DecimTimeSig_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecimTimeSig_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecimTimeSig_data_descriptor_;
}

const DecimTimeSig_data& DecimTimeSig_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

DecimTimeSig_data* DecimTimeSig_data::default_instance_ = NULL;

DecimTimeSig_data* DecimTimeSig_data::New() const {
  return new DecimTimeSig_data;
}

void DecimTimeSig_data::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_statrot()) {
      if (statrot_ != NULL) statrot_->::task_manager::TStatRot::Clear();
    }
    avgcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecimTimeSig_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.DecimTimeSig_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.TStatRot StatRot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statrot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AvgCount;
        break;
      }

      // required uint32 AvgCount = 2;
      case 2: {
        if (tag == 16) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.DecimTimeSig_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.DecimTimeSig_data)
  return false;
#undef DO_
}

void DecimTimeSig_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.DecimTimeSig_data)
  // required .task_manager.TStatRot StatRot = 1;
  if (has_statrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statrot(), output);
  }

  // required uint32 AvgCount = 2;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avgcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.DecimTimeSig_data)
}

::google::protobuf::uint8* DecimTimeSig_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.DecimTimeSig_data)
  // required .task_manager.TStatRot StatRot = 1;
  if (has_statrot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statrot(), target);
  }

  // required uint32 AvgCount = 2;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avgcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.DecimTimeSig_data)
  return target;
}

int DecimTimeSig_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.TStatRot StatRot = 1;
    if (has_statrot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statrot());
    }

    // required uint32 AvgCount = 2;
    if (has_avgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avgcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecimTimeSig_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecimTimeSig_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecimTimeSig_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecimTimeSig_data::MergeFrom(const DecimTimeSig_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statrot()) {
      mutable_statrot()->::task_manager::TStatRot::MergeFrom(from.statrot());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecimTimeSig_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecimTimeSig_data::CopyFrom(const DecimTimeSig_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecimTimeSig_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_statrot()) {
    if (!this->statrot().IsInitialized()) return false;
  }
  return true;
}

void DecimTimeSig_data::Swap(DecimTimeSig_data* other) {
  if (other != this) {
    std::swap(statrot_, other->statrot_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecimTimeSig_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecimTimeSig_data_descriptor_;
  metadata.reflection = DecimTimeSig_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnyTaskResult::kErrorCodeFieldNumber;
const int AnyTaskResult::kHarmonicResFieldNumber;
const int AnyTaskResult::kKurtosisResFieldNumber;
const int AnyTaskResult::kStattimesigResFieldNumber;
const int AnyTaskResult::kQualityResFieldNumber;
const int AnyTaskResult::kSavetimesigResFieldNumber;
const int AnyTaskResult::kVsensorfrotResFieldNumber;
const int AnyTaskResult::kDecimResFieldNumber;
const int AnyTaskResult::kSpectrResFieldNumber;
#endif  // !_MSC_VER

AnyTaskResult::AnyTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.AnyTaskResult)
}

void AnyTaskResult::InitAsDefaultInstance() {
  harmonic_res_ = const_cast< ::task_manager::Vharmonic_data*>(&::task_manager::Vharmonic_data::default_instance());
  kurtosis_res_ = const_cast< ::task_manager::StatKurtosis_data*>(&::task_manager::StatKurtosis_data::default_instance());
  stattimesig_res_ = const_cast< ::task_manager::StatTimeSig_data*>(&::task_manager::StatTimeSig_data::default_instance());
  quality_res_ = const_cast< ::task_manager::QualityTimeSig_data*>(&::task_manager::QualityTimeSig_data::default_instance());
  savetimesig_res_ = const_cast< ::task_manager::SaveTimeSig_data*>(&::task_manager::SaveTimeSig_data::default_instance());
  vsensorfrot_res_ = const_cast< ::task_manager::VsensorFrot_data*>(&::task_manager::VsensorFrot_data::default_instance());
  decim_res_ = const_cast< ::task_manager::DecimTimeSig_data*>(&::task_manager::DecimTimeSig_data::default_instance());
  spectr_res_ = const_cast< ::task_manager::Spectr_data*>(&::task_manager::Spectr_data::default_instance());
}

AnyTaskResult::AnyTaskResult(const AnyTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.AnyTaskResult)
}

void AnyTaskResult::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  harmonic_res_ = NULL;
  kurtosis_res_ = NULL;
  stattimesig_res_ = NULL;
  quality_res_ = NULL;
  savetimesig_res_ = NULL;
  vsensorfrot_res_ = NULL;
  decim_res_ = NULL;
  spectr_res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnyTaskResult::~AnyTaskResult() {
  // @@protoc_insertion_point(destructor:task_manager.AnyTaskResult)
  SharedDtor();
}

void AnyTaskResult::SharedDtor() {
  if (this != default_instance_) {
    delete harmonic_res_;
    delete kurtosis_res_;
    delete stattimesig_res_;
    delete quality_res_;
    delete savetimesig_res_;
    delete vsensorfrot_res_;
    delete decim_res_;
    delete spectr_res_;
  }
}

void AnyTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnyTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnyTaskResult_descriptor_;
}

const AnyTaskResult& AnyTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

AnyTaskResult* AnyTaskResult::default_instance_ = NULL;

AnyTaskResult* AnyTaskResult::New() const {
  return new AnyTaskResult;
}

void AnyTaskResult::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    error_code_ = 0;
    if (has_harmonic_res()) {
      if (harmonic_res_ != NULL) harmonic_res_->::task_manager::Vharmonic_data::Clear();
    }
    if (has_kurtosis_res()) {
      if (kurtosis_res_ != NULL) kurtosis_res_->::task_manager::StatKurtosis_data::Clear();
    }
    if (has_stattimesig_res()) {
      if (stattimesig_res_ != NULL) stattimesig_res_->::task_manager::StatTimeSig_data::Clear();
    }
    if (has_quality_res()) {
      if (quality_res_ != NULL) quality_res_->::task_manager::QualityTimeSig_data::Clear();
    }
    if (has_savetimesig_res()) {
      if (savetimesig_res_ != NULL) savetimesig_res_->::task_manager::SaveTimeSig_data::Clear();
    }
    if (has_vsensorfrot_res()) {
      if (vsensorfrot_res_ != NULL) vsensorfrot_res_->::task_manager::VsensorFrot_data::Clear();
    }
    if (has_decim_res()) {
      if (decim_res_ != NULL) decim_res_->::task_manager::DecimTimeSig_data::Clear();
    }
  }
  if (has_spectr_res()) {
    if (spectr_res_ != NULL) spectr_res_->::task_manager::Spectr_data::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnyTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.AnyTaskResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_harmonic_res;
        break;
      }

      // optional .task_manager.Vharmonic_data harmonic_res = 2;
      case 2: {
        if (tag == 18) {
         parse_harmonic_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_harmonic_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_kurtosis_res;
        break;
      }

      // optional .task_manager.StatKurtosis_data kurtosis_res = 3;
      case 3: {
        if (tag == 26) {
         parse_kurtosis_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kurtosis_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stattimesig_res;
        break;
      }

      // optional .task_manager.StatTimeSig_data stattimesig_res = 4;
      case 4: {
        if (tag == 34) {
         parse_stattimesig_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stattimesig_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quality_res;
        break;
      }

      // optional .task_manager.QualityTimeSig_data quality_res = 5;
      case 5: {
        if (tag == 42) {
         parse_quality_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_savetimesig_res;
        break;
      }

      // optional .task_manager.SaveTimeSig_data savetimesig_res = 6;
      case 6: {
        if (tag == 50) {
         parse_savetimesig_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_savetimesig_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vsensorfrot_res;
        break;
      }

      // optional .task_manager.VsensorFrot_data vsensorfrot_res = 7;
      case 7: {
        if (tag == 58) {
         parse_vsensorfrot_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vsensorfrot_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_decim_res;
        break;
      }

      // optional .task_manager.DecimTimeSig_data decim_res = 8;
      case 8: {
        if (tag == 66) {
         parse_decim_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decim_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_spectr_res;
        break;
      }

      // optional .task_manager.Spectr_data spectr_res = 9;
      case 9: {
        if (tag == 74) {
         parse_spectr_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectr_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.AnyTaskResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.AnyTaskResult)
  return false;
#undef DO_
}

void AnyTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.AnyTaskResult)
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .task_manager.Vharmonic_data harmonic_res = 2;
  if (has_harmonic_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->harmonic_res(), output);
  }

  // optional .task_manager.StatKurtosis_data kurtosis_res = 3;
  if (has_kurtosis_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kurtosis_res(), output);
  }

  // optional .task_manager.StatTimeSig_data stattimesig_res = 4;
  if (has_stattimesig_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stattimesig_res(), output);
  }

  // optional .task_manager.QualityTimeSig_data quality_res = 5;
  if (has_quality_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quality_res(), output);
  }

  // optional .task_manager.SaveTimeSig_data savetimesig_res = 6;
  if (has_savetimesig_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->savetimesig_res(), output);
  }

  // optional .task_manager.VsensorFrot_data vsensorfrot_res = 7;
  if (has_vsensorfrot_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vsensorfrot_res(), output);
  }

  // optional .task_manager.DecimTimeSig_data decim_res = 8;
  if (has_decim_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->decim_res(), output);
  }

  // optional .task_manager.Spectr_data spectr_res = 9;
  if (has_spectr_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->spectr_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.AnyTaskResult)
}

::google::protobuf::uint8* AnyTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.AnyTaskResult)
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .task_manager.Vharmonic_data harmonic_res = 2;
  if (has_harmonic_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->harmonic_res(), target);
  }

  // optional .task_manager.StatKurtosis_data kurtosis_res = 3;
  if (has_kurtosis_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kurtosis_res(), target);
  }

  // optional .task_manager.StatTimeSig_data stattimesig_res = 4;
  if (has_stattimesig_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stattimesig_res(), target);
  }

  // optional .task_manager.QualityTimeSig_data quality_res = 5;
  if (has_quality_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quality_res(), target);
  }

  // optional .task_manager.SaveTimeSig_data savetimesig_res = 6;
  if (has_savetimesig_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->savetimesig_res(), target);
  }

  // optional .task_manager.VsensorFrot_data vsensorfrot_res = 7;
  if (has_vsensorfrot_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vsensorfrot_res(), target);
  }

  // optional .task_manager.DecimTimeSig_data decim_res = 8;
  if (has_decim_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->decim_res(), target);
  }

  // optional .task_manager.Spectr_data spectr_res = 9;
  if (has_spectr_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->spectr_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.AnyTaskResult)
  return target;
}

int AnyTaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .task_manager.Vharmonic_data harmonic_res = 2;
    if (has_harmonic_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->harmonic_res());
    }

    // optional .task_manager.StatKurtosis_data kurtosis_res = 3;
    if (has_kurtosis_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kurtosis_res());
    }

    // optional .task_manager.StatTimeSig_data stattimesig_res = 4;
    if (has_stattimesig_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stattimesig_res());
    }

    // optional .task_manager.QualityTimeSig_data quality_res = 5;
    if (has_quality_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_res());
    }

    // optional .task_manager.SaveTimeSig_data savetimesig_res = 6;
    if (has_savetimesig_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->savetimesig_res());
    }

    // optional .task_manager.VsensorFrot_data vsensorfrot_res = 7;
    if (has_vsensorfrot_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vsensorfrot_res());
    }

    // optional .task_manager.DecimTimeSig_data decim_res = 8;
    if (has_decim_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decim_res());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .task_manager.Spectr_data spectr_res = 9;
    if (has_spectr_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spectr_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnyTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnyTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnyTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnyTaskResult::MergeFrom(const AnyTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_harmonic_res()) {
      mutable_harmonic_res()->::task_manager::Vharmonic_data::MergeFrom(from.harmonic_res());
    }
    if (from.has_kurtosis_res()) {
      mutable_kurtosis_res()->::task_manager::StatKurtosis_data::MergeFrom(from.kurtosis_res());
    }
    if (from.has_stattimesig_res()) {
      mutable_stattimesig_res()->::task_manager::StatTimeSig_data::MergeFrom(from.stattimesig_res());
    }
    if (from.has_quality_res()) {
      mutable_quality_res()->::task_manager::QualityTimeSig_data::MergeFrom(from.quality_res());
    }
    if (from.has_savetimesig_res()) {
      mutable_savetimesig_res()->::task_manager::SaveTimeSig_data::MergeFrom(from.savetimesig_res());
    }
    if (from.has_vsensorfrot_res()) {
      mutable_vsensorfrot_res()->::task_manager::VsensorFrot_data::MergeFrom(from.vsensorfrot_res());
    }
    if (from.has_decim_res()) {
      mutable_decim_res()->::task_manager::DecimTimeSig_data::MergeFrom(from.decim_res());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spectr_res()) {
      mutable_spectr_res()->::task_manager::Spectr_data::MergeFrom(from.spectr_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnyTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyTaskResult::CopyFrom(const AnyTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyTaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_harmonic_res()) {
    if (!this->harmonic_res().IsInitialized()) return false;
  }
  if (has_kurtosis_res()) {
    if (!this->kurtosis_res().IsInitialized()) return false;
  }
  if (has_stattimesig_res()) {
    if (!this->stattimesig_res().IsInitialized()) return false;
  }
  if (has_quality_res()) {
    if (!this->quality_res().IsInitialized()) return false;
  }
  if (has_savetimesig_res()) {
    if (!this->savetimesig_res().IsInitialized()) return false;
  }
  if (has_vsensorfrot_res()) {
    if (!this->vsensorfrot_res().IsInitialized()) return false;
  }
  if (has_decim_res()) {
    if (!this->decim_res().IsInitialized()) return false;
  }
  if (has_spectr_res()) {
    if (!this->spectr_res().IsInitialized()) return false;
  }
  return true;
}

void AnyTaskResult::Swap(AnyTaskResult* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(harmonic_res_, other->harmonic_res_);
    std::swap(kurtosis_res_, other->kurtosis_res_);
    std::swap(stattimesig_res_, other->stattimesig_res_);
    std::swap(quality_res_, other->quality_res_);
    std::swap(savetimesig_res_, other->savetimesig_res_);
    std::swap(vsensorfrot_res_, other->vsensorfrot_res_);
    std::swap(decim_res_, other->decim_res_);
    std::swap(spectr_res_, other->spectr_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnyTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnyTaskResult_descriptor_;
  metadata.reflection = AnyTaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonTaskParams::kOffSetFieldNumber;
const int CommonTaskParams::kDeltaOffSetFieldNumber;
const int CommonTaskParams::kMonitoringFieldNumber;
const int CommonTaskParams::kTimesigTypeFieldNumber;
const int CommonTaskParams::kLPFilterIndexFieldNumber;
const int CommonTaskParams::kLPFilterDecimFieldNumber;
const int CommonTaskParams::kLPFilterTypeFieldNumber;
const int CommonTaskParams::kLPFilterUsualWFieldNumber;
const int CommonTaskParams::kBPFilterIndexFieldNumber;
const int CommonTaskParams::kBPFilterTypeFieldNumber;
const int CommonTaskParams::kBPFilterUsualWFieldNumber;
const int CommonTaskParams::kRSMPFilterIndexFieldNumber;
const int CommonTaskParams::kRSMPFilterTypeFieldNumber;
const int CommonTaskParams::kRSMPFilterUsualWFieldNumber;
const int CommonTaskParams::kHPFilterIndexFieldNumber;
const int CommonTaskParams::kHPFilterTypeFieldNumber;
const int CommonTaskParams::kHPFilterParam1FieldNumber;
const int CommonTaskParams::kFParamsListFieldNumber;
const int CommonTaskParams::kFParamsCountFieldNumber;
const int CommonTaskParams::kAvgCountFieldNumber;
const int CommonTaskParams::kFrotLimitsFieldNumber;
const int CommonTaskParams::kFrotLimitsActiveFieldNumber;
const int CommonTaskParams::kStabControlFieldNumber;
const int CommonTaskParams::kRotControlFieldNumber;
const int CommonTaskParams::kWaitPeriodForRotMetkaFieldNumber;
const int CommonTaskParams::kTimeSigSrcTypeFieldNumber;
const int CommonTaskParams::kTimeSigIDFieldNumber;
const int CommonTaskParams::kInitTaskStateFieldNumber;
const int CommonTaskParams::kFinalTaskStateFieldNumber;
const int CommonTaskParams::kTSDTCFieldNumber;
const int CommonTaskParams::kCalcTypeTSDTCFieldNumber;
const int CommonTaskParams::kTDEFieldNumber;
#endif  // !_MSC_VER

CommonTaskParams::CommonTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.CommonTaskParams)
}

void CommonTaskParams::InitAsDefaultInstance() {
  offset_ = const_cast< ::task_manager::TOffset*>(&::task_manager::TOffset::default_instance());
  deltaoffset_ = const_cast< ::task_manager::TOffset*>(&::task_manager::TOffset::default_instance());
  frotlimits_ = const_cast< ::task_manager::TFrotLimits*>(&::task_manager::TFrotLimits::default_instance());
}

CommonTaskParams::CommonTaskParams(const CommonTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.CommonTaskParams)
}

void CommonTaskParams::SharedCtor() {
  _cached_size_ = 0;
  offset_ = NULL;
  deltaoffset_ = NULL;
  monitoring_ = false;
  timesigtype_ = 0;
  lpfilterindex_ = 0;
  lpfilterdecim_ = 0u;
  lpfiltertype_ = 0;
  lpfilterusualw_ = false;
  bpfilterindex_ = 0;
  bpfiltertype_ = 0;
  bpfilterusualw_ = false;
  rsmpfilterindex_ = 0;
  rsmpfiltertype_ = 0;
  rsmpfilterusualw_ = false;
  hpfilterindex_ = 0;
  hpfiltertype_ = 0;
  hpfilterparam1_ = 0;
  fparamscount_ = 0;
  avgcount_ = 0;
  frotlimits_ = NULL;
  frotlimitsactive_ = false;
  stabcontrol_ = false;
  rotcontrol_ = false;
  waitperiodforrotmetka_ = 0;
  timesigsrctype_ = 0;
  timesigid_ = 0;
  inittaskstate_ = 0;
  finaltaskstate_ = 0;
  tsdtc_ = 0;
  calctypetsdtc_ = 0;
  tde_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonTaskParams::~CommonTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.CommonTaskParams)
  SharedDtor();
}

void CommonTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete offset_;
    delete deltaoffset_;
    delete frotlimits_;
  }
}

void CommonTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonTaskParams_descriptor_;
}

const CommonTaskParams& CommonTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

CommonTaskParams* CommonTaskParams::default_instance_ = NULL;

CommonTaskParams* CommonTaskParams::New() const {
  return new CommonTaskParams;
}

void CommonTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(timesigtype_, lpfiltertype_);
    ZR_(monitoring_, lpfilterusualw_);
    if (has_offset()) {
      if (offset_ != NULL) offset_->::task_manager::TOffset::Clear();
    }
    if (has_deltaoffset()) {
      if (deltaoffset_ != NULL) deltaoffset_->::task_manager::TOffset::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(bpfilterusualw_, hpfilterindex_);
    bpfilterindex_ = 0;
    hpfiltertype_ = 0;
  }
  if (_has_bits_[16 / 32] & 16580608) {
    ZR_(avgcount_, rotcontrol_);
    hpfilterparam1_ = 0;
    fparamscount_ = 0;
    if (has_frotlimits()) {
      if (frotlimits_ != NULL) frotlimits_->::task_manager::TFrotLimits::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(waitperiodforrotmetka_, tde_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fparamslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.CommonTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.TOffset OffSet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DeltaOffSet;
        break;
      }

      // required .task_manager.TOffset DeltaOffSet = 2;
      case 2: {
        if (tag == 18) {
         parse_DeltaOffSet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deltaoffset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Monitoring;
        break;
      }

      // required bool Monitoring = 3;
      case 3: {
        if (tag == 24) {
         parse_Monitoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &monitoring_)));
          set_has_monitoring();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TimesigType;
        break;
      }

      // required int32 TimesigType = 4;
      case 4: {
        if (tag == 32) {
         parse_TimesigType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timesigtype_)));
          set_has_timesigtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LPFilterIndex;
        break;
      }

      // required int32 LPFilterIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_LPFilterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lpfilterindex_)));
          set_has_lpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LPFilterDecim;
        break;
      }

      // required uint32 LPFilterDecim = 6;
      case 6: {
        if (tag == 48) {
         parse_LPFilterDecim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lpfilterdecim_)));
          set_has_lpfilterdecim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LPFilterType;
        break;
      }

      // required int32 LPFilterType = 7;
      case 7: {
        if (tag == 56) {
         parse_LPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lpfiltertype_)));
          set_has_lpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LPFilterUsualW;
        break;
      }

      // required bool LPFilterUsualW = 8;
      case 8: {
        if (tag == 64) {
         parse_LPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lpfilterusualw_)));
          set_has_lpfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_BPFilterIndex;
        break;
      }

      // required int32 BPFilterIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_BPFilterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpfilterindex_)));
          set_has_bpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_BPFilterType;
        break;
      }

      // required int32 BPFilterType = 10;
      case 10: {
        if (tag == 80) {
         parse_BPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpfiltertype_)));
          set_has_bpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_BPFilterUsualW;
        break;
      }

      // required bool BPFilterUsualW = 11;
      case 11: {
        if (tag == 88) {
         parse_BPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bpfilterusualw_)));
          set_has_bpfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_RSMPFilterIndex;
        break;
      }

      // required int32 RSMPFilterIndex = 12;
      case 12: {
        if (tag == 96) {
         parse_RSMPFilterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsmpfilterindex_)));
          set_has_rsmpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_RSMPFilterType;
        break;
      }

      // required int32 RSMPFilterType = 13;
      case 13: {
        if (tag == 104) {
         parse_RSMPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsmpfiltertype_)));
          set_has_rsmpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_RSMPFilterUsualW;
        break;
      }

      // required bool RSMPFilterUsualW = 14;
      case 14: {
        if (tag == 112) {
         parse_RSMPFilterUsualW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rsmpfilterusualw_)));
          set_has_rsmpfilterusualw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_HPFilterIndex;
        break;
      }

      // required int32 HPFilterIndex = 15;
      case 15: {
        if (tag == 120) {
         parse_HPFilterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpfilterindex_)));
          set_has_hpfilterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_HPFilterType;
        break;
      }

      // required int32 HPFilterType = 16;
      case 16: {
        if (tag == 128) {
         parse_HPFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpfiltertype_)));
          set_has_hpfiltertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_HPFilterParam1;
        break;
      }

      // required double HPFilterParam1 = 17;
      case 17: {
        if (tag == 137) {
         parse_HPFilterParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hpfilterparam1_)));
          set_has_hpfilterparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_FParamsList;
        break;
      }

      // repeated .task_manager.FParams FParamsList = 18;
      case 18: {
        if (tag == 146) {
         parse_FParamsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fparamslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_FParamsList;
        if (input->ExpectTag(152)) goto parse_FParamsCount;
        break;
      }

      // required int32 FParamsCount = 19;
      case 19: {
        if (tag == 152) {
         parse_FParamsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fparamscount_)));
          set_has_fparamscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_AvgCount;
        break;
      }

      // required int32 AvgCount = 20;
      case 20: {
        if (tag == 160) {
         parse_AvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avgcount_)));
          set_has_avgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_FrotLimits;
        break;
      }

      // required .task_manager.TFrotLimits FrotLimits = 21;
      case 21: {
        if (tag == 170) {
         parse_FrotLimits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frotlimits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_FrotLimitsActive;
        break;
      }

      // required bool FrotLimitsActive = 22;
      case 22: {
        if (tag == 176) {
         parse_FrotLimitsActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frotlimitsactive_)));
          set_has_frotlimitsactive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_StabControl;
        break;
      }

      // required bool StabControl = 23;
      case 23: {
        if (tag == 184) {
         parse_StabControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stabcontrol_)));
          set_has_stabcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_RotControl;
        break;
      }

      // required bool RotControl = 24;
      case 24: {
        if (tag == 192) {
         parse_RotControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotcontrol_)));
          set_has_rotcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_WaitPeriodForRotMetka;
        break;
      }

      // required double WaitPeriodForRotMetka = 25;
      case 25: {
        if (tag == 201) {
         parse_WaitPeriodForRotMetka:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waitperiodforrotmetka_)));
          set_has_waitperiodforrotmetka();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_TimeSigSrcType;
        break;
      }

      // required int32 TimeSigSrcType = 26;
      case 26: {
        if (tag == 208) {
         parse_TimeSigSrcType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timesigsrctype_)));
          set_has_timesigsrctype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_TimeSigID;
        break;
      }

      // required int32 TimeSigID = 27;
      case 27: {
        if (tag == 216) {
         parse_TimeSigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timesigid_)));
          set_has_timesigid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_InitTaskState;
        break;
      }

      // required int32 InitTaskState = 28;
      case 28: {
        if (tag == 224) {
         parse_InitTaskState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inittaskstate_)));
          set_has_inittaskstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_FinalTaskState;
        break;
      }

      // required int32 FinalTaskState = 29;
      case 29: {
        if (tag == 232) {
         parse_FinalTaskState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finaltaskstate_)));
          set_has_finaltaskstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_TSDTC;
        break;
      }

      // required int32 TSDTC = 30;
      case 30: {
        if (tag == 240) {
         parse_TSDTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsdtc_)));
          set_has_tsdtc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_CalcTypeTSDTC;
        break;
      }

      // required int32 CalcTypeTSDTC = 31;
      case 31: {
        if (tag == 248) {
         parse_CalcTypeTSDTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calctypetsdtc_)));
          set_has_calctypetsdtc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_TDE;
        break;
      }

      // required int32 TDE = 32;
      case 32: {
        if (tag == 256) {
         parse_TDE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tde_)));
          set_has_tde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.CommonTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.CommonTaskParams)
  return false;
#undef DO_
}

void CommonTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.CommonTaskParams)
  // required .task_manager.TOffset OffSet = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offset(), output);
  }

  // required .task_manager.TOffset DeltaOffSet = 2;
  if (has_deltaoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deltaoffset(), output);
  }

  // required bool Monitoring = 3;
  if (has_monitoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->monitoring(), output);
  }

  // required int32 TimesigType = 4;
  if (has_timesigtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timesigtype(), output);
  }

  // required int32 LPFilterIndex = 5;
  if (has_lpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lpfilterindex(), output);
  }

  // required uint32 LPFilterDecim = 6;
  if (has_lpfilterdecim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lpfilterdecim(), output);
  }

  // required int32 LPFilterType = 7;
  if (has_lpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lpfiltertype(), output);
  }

  // required bool LPFilterUsualW = 8;
  if (has_lpfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->lpfilterusualw(), output);
  }

  // required int32 BPFilterIndex = 9;
  if (has_bpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bpfilterindex(), output);
  }

  // required int32 BPFilterType = 10;
  if (has_bpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bpfiltertype(), output);
  }

  // required bool BPFilterUsualW = 11;
  if (has_bpfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->bpfilterusualw(), output);
  }

  // required int32 RSMPFilterIndex = 12;
  if (has_rsmpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rsmpfilterindex(), output);
  }

  // required int32 RSMPFilterType = 13;
  if (has_rsmpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rsmpfiltertype(), output);
  }

  // required bool RSMPFilterUsualW = 14;
  if (has_rsmpfilterusualw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->rsmpfilterusualw(), output);
  }

  // required int32 HPFilterIndex = 15;
  if (has_hpfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hpfilterindex(), output);
  }

  // required int32 HPFilterType = 16;
  if (has_hpfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hpfiltertype(), output);
  }

  // required double HPFilterParam1 = 17;
  if (has_hpfilterparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->hpfilterparam1(), output);
  }

  // repeated .task_manager.FParams FParamsList = 18;
  for (int i = 0; i < this->fparamslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->fparamslist(i), output);
  }

  // required int32 FParamsCount = 19;
  if (has_fparamscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fparamscount(), output);
  }

  // required int32 AvgCount = 20;
  if (has_avgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->avgcount(), output);
  }

  // required .task_manager.TFrotLimits FrotLimits = 21;
  if (has_frotlimits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->frotlimits(), output);
  }

  // required bool FrotLimitsActive = 22;
  if (has_frotlimitsactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->frotlimitsactive(), output);
  }

  // required bool StabControl = 23;
  if (has_stabcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->stabcontrol(), output);
  }

  // required bool RotControl = 24;
  if (has_rotcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->rotcontrol(), output);
  }

  // required double WaitPeriodForRotMetka = 25;
  if (has_waitperiodforrotmetka()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->waitperiodforrotmetka(), output);
  }

  // required int32 TimeSigSrcType = 26;
  if (has_timesigsrctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->timesigsrctype(), output);
  }

  // required int32 TimeSigID = 27;
  if (has_timesigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->timesigid(), output);
  }

  // required int32 InitTaskState = 28;
  if (has_inittaskstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->inittaskstate(), output);
  }

  // required int32 FinalTaskState = 29;
  if (has_finaltaskstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->finaltaskstate(), output);
  }

  // required int32 TSDTC = 30;
  if (has_tsdtc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->tsdtc(), output);
  }

  // required int32 CalcTypeTSDTC = 31;
  if (has_calctypetsdtc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->calctypetsdtc(), output);
  }

  // required int32 TDE = 32;
  if (has_tde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->tde(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.CommonTaskParams)
}

::google::protobuf::uint8* CommonTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.CommonTaskParams)
  // required .task_manager.TOffset OffSet = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offset(), target);
  }

  // required .task_manager.TOffset DeltaOffSet = 2;
  if (has_deltaoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deltaoffset(), target);
  }

  // required bool Monitoring = 3;
  if (has_monitoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->monitoring(), target);
  }

  // required int32 TimesigType = 4;
  if (has_timesigtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timesigtype(), target);
  }

  // required int32 LPFilterIndex = 5;
  if (has_lpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lpfilterindex(), target);
  }

  // required uint32 LPFilterDecim = 6;
  if (has_lpfilterdecim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lpfilterdecim(), target);
  }

  // required int32 LPFilterType = 7;
  if (has_lpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lpfiltertype(), target);
  }

  // required bool LPFilterUsualW = 8;
  if (has_lpfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->lpfilterusualw(), target);
  }

  // required int32 BPFilterIndex = 9;
  if (has_bpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bpfilterindex(), target);
  }

  // required int32 BPFilterType = 10;
  if (has_bpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bpfiltertype(), target);
  }

  // required bool BPFilterUsualW = 11;
  if (has_bpfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->bpfilterusualw(), target);
  }

  // required int32 RSMPFilterIndex = 12;
  if (has_rsmpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rsmpfilterindex(), target);
  }

  // required int32 RSMPFilterType = 13;
  if (has_rsmpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rsmpfiltertype(), target);
  }

  // required bool RSMPFilterUsualW = 14;
  if (has_rsmpfilterusualw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->rsmpfilterusualw(), target);
  }

  // required int32 HPFilterIndex = 15;
  if (has_hpfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hpfilterindex(), target);
  }

  // required int32 HPFilterType = 16;
  if (has_hpfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hpfiltertype(), target);
  }

  // required double HPFilterParam1 = 17;
  if (has_hpfilterparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->hpfilterparam1(), target);
  }

  // repeated .task_manager.FParams FParamsList = 18;
  for (int i = 0; i < this->fparamslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->fparamslist(i), target);
  }

  // required int32 FParamsCount = 19;
  if (has_fparamscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fparamscount(), target);
  }

  // required int32 AvgCount = 20;
  if (has_avgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->avgcount(), target);
  }

  // required .task_manager.TFrotLimits FrotLimits = 21;
  if (has_frotlimits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->frotlimits(), target);
  }

  // required bool FrotLimitsActive = 22;
  if (has_frotlimitsactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->frotlimitsactive(), target);
  }

  // required bool StabControl = 23;
  if (has_stabcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->stabcontrol(), target);
  }

  // required bool RotControl = 24;
  if (has_rotcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->rotcontrol(), target);
  }

  // required double WaitPeriodForRotMetka = 25;
  if (has_waitperiodforrotmetka()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->waitperiodforrotmetka(), target);
  }

  // required int32 TimeSigSrcType = 26;
  if (has_timesigsrctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->timesigsrctype(), target);
  }

  // required int32 TimeSigID = 27;
  if (has_timesigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->timesigid(), target);
  }

  // required int32 InitTaskState = 28;
  if (has_inittaskstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->inittaskstate(), target);
  }

  // required int32 FinalTaskState = 29;
  if (has_finaltaskstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->finaltaskstate(), target);
  }

  // required int32 TSDTC = 30;
  if (has_tsdtc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->tsdtc(), target);
  }

  // required int32 CalcTypeTSDTC = 31;
  if (has_calctypetsdtc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->calctypetsdtc(), target);
  }

  // required int32 TDE = 32;
  if (has_tde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->tde(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.CommonTaskParams)
  return target;
}

int CommonTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.TOffset OffSet = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset());
    }

    // required .task_manager.TOffset DeltaOffSet = 2;
    if (has_deltaoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deltaoffset());
    }

    // required bool Monitoring = 3;
    if (has_monitoring()) {
      total_size += 1 + 1;
    }

    // required int32 TimesigType = 4;
    if (has_timesigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timesigtype());
    }

    // required int32 LPFilterIndex = 5;
    if (has_lpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lpfilterindex());
    }

    // required uint32 LPFilterDecim = 6;
    if (has_lpfilterdecim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lpfilterdecim());
    }

    // required int32 LPFilterType = 7;
    if (has_lpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lpfiltertype());
    }

    // required bool LPFilterUsualW = 8;
    if (has_lpfilterusualw()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 BPFilterIndex = 9;
    if (has_bpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpfilterindex());
    }

    // required int32 BPFilterType = 10;
    if (has_bpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpfiltertype());
    }

    // required bool BPFilterUsualW = 11;
    if (has_bpfilterusualw()) {
      total_size += 1 + 1;
    }

    // required int32 RSMPFilterIndex = 12;
    if (has_rsmpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsmpfilterindex());
    }

    // required int32 RSMPFilterType = 13;
    if (has_rsmpfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsmpfiltertype());
    }

    // required bool RSMPFilterUsualW = 14;
    if (has_rsmpfilterusualw()) {
      total_size += 1 + 1;
    }

    // required int32 HPFilterIndex = 15;
    if (has_hpfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpfilterindex());
    }

    // required int32 HPFilterType = 16;
    if (has_hpfiltertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpfiltertype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double HPFilterParam1 = 17;
    if (has_hpfilterparam1()) {
      total_size += 2 + 8;
    }

    // required int32 FParamsCount = 19;
    if (has_fparamscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fparamscount());
    }

    // required int32 AvgCount = 20;
    if (has_avgcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avgcount());
    }

    // required .task_manager.TFrotLimits FrotLimits = 21;
    if (has_frotlimits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frotlimits());
    }

    // required bool FrotLimitsActive = 22;
    if (has_frotlimitsactive()) {
      total_size += 2 + 1;
    }

    // required bool StabControl = 23;
    if (has_stabcontrol()) {
      total_size += 2 + 1;
    }

    // required bool RotControl = 24;
    if (has_rotcontrol()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double WaitPeriodForRotMetka = 25;
    if (has_waitperiodforrotmetka()) {
      total_size += 2 + 8;
    }

    // required int32 TimeSigSrcType = 26;
    if (has_timesigsrctype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timesigsrctype());
    }

    // required int32 TimeSigID = 27;
    if (has_timesigid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timesigid());
    }

    // required int32 InitTaskState = 28;
    if (has_inittaskstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inittaskstate());
    }

    // required int32 FinalTaskState = 29;
    if (has_finaltaskstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finaltaskstate());
    }

    // required int32 TSDTC = 30;
    if (has_tsdtc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsdtc());
    }

    // required int32 CalcTypeTSDTC = 31;
    if (has_calctypetsdtc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calctypetsdtc());
    }

    // required int32 TDE = 32;
    if (has_tde()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tde());
    }

  }
  // repeated .task_manager.FParams FParamsList = 18;
  total_size += 2 * this->fparamslist_size();
  for (int i = 0; i < this->fparamslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fparamslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonTaskParams::MergeFrom(const CommonTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  fparamslist_.MergeFrom(from.fparamslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      mutable_offset()->::task_manager::TOffset::MergeFrom(from.offset());
    }
    if (from.has_deltaoffset()) {
      mutable_deltaoffset()->::task_manager::TOffset::MergeFrom(from.deltaoffset());
    }
    if (from.has_monitoring()) {
      set_monitoring(from.monitoring());
    }
    if (from.has_timesigtype()) {
      set_timesigtype(from.timesigtype());
    }
    if (from.has_lpfilterindex()) {
      set_lpfilterindex(from.lpfilterindex());
    }
    if (from.has_lpfilterdecim()) {
      set_lpfilterdecim(from.lpfilterdecim());
    }
    if (from.has_lpfiltertype()) {
      set_lpfiltertype(from.lpfiltertype());
    }
    if (from.has_lpfilterusualw()) {
      set_lpfilterusualw(from.lpfilterusualw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bpfilterindex()) {
      set_bpfilterindex(from.bpfilterindex());
    }
    if (from.has_bpfiltertype()) {
      set_bpfiltertype(from.bpfiltertype());
    }
    if (from.has_bpfilterusualw()) {
      set_bpfilterusualw(from.bpfilterusualw());
    }
    if (from.has_rsmpfilterindex()) {
      set_rsmpfilterindex(from.rsmpfilterindex());
    }
    if (from.has_rsmpfiltertype()) {
      set_rsmpfiltertype(from.rsmpfiltertype());
    }
    if (from.has_rsmpfilterusualw()) {
      set_rsmpfilterusualw(from.rsmpfilterusualw());
    }
    if (from.has_hpfilterindex()) {
      set_hpfilterindex(from.hpfilterindex());
    }
    if (from.has_hpfiltertype()) {
      set_hpfiltertype(from.hpfiltertype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hpfilterparam1()) {
      set_hpfilterparam1(from.hpfilterparam1());
    }
    if (from.has_fparamscount()) {
      set_fparamscount(from.fparamscount());
    }
    if (from.has_avgcount()) {
      set_avgcount(from.avgcount());
    }
    if (from.has_frotlimits()) {
      mutable_frotlimits()->::task_manager::TFrotLimits::MergeFrom(from.frotlimits());
    }
    if (from.has_frotlimitsactive()) {
      set_frotlimitsactive(from.frotlimitsactive());
    }
    if (from.has_stabcontrol()) {
      set_stabcontrol(from.stabcontrol());
    }
    if (from.has_rotcontrol()) {
      set_rotcontrol(from.rotcontrol());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_waitperiodforrotmetka()) {
      set_waitperiodforrotmetka(from.waitperiodforrotmetka());
    }
    if (from.has_timesigsrctype()) {
      set_timesigsrctype(from.timesigsrctype());
    }
    if (from.has_timesigid()) {
      set_timesigid(from.timesigid());
    }
    if (from.has_inittaskstate()) {
      set_inittaskstate(from.inittaskstate());
    }
    if (from.has_finaltaskstate()) {
      set_finaltaskstate(from.finaltaskstate());
    }
    if (from.has_tsdtc()) {
      set_tsdtc(from.tsdtc());
    }
    if (from.has_calctypetsdtc()) {
      set_calctypetsdtc(from.calctypetsdtc());
    }
    if (from.has_tde()) {
      set_tde(from.tde());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTaskParams::CopyFrom(const CommonTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0xfffdffff) != 0xfffdffff) return false;

  if (has_offset()) {
    if (!this->offset().IsInitialized()) return false;
  }
  if (has_deltaoffset()) {
    if (!this->deltaoffset().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->fparamslist())) return false;
  if (has_frotlimits()) {
    if (!this->frotlimits().IsInitialized()) return false;
  }
  return true;
}

void CommonTaskParams::Swap(CommonTaskParams* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(deltaoffset_, other->deltaoffset_);
    std::swap(monitoring_, other->monitoring_);
    std::swap(timesigtype_, other->timesigtype_);
    std::swap(lpfilterindex_, other->lpfilterindex_);
    std::swap(lpfilterdecim_, other->lpfilterdecim_);
    std::swap(lpfiltertype_, other->lpfiltertype_);
    std::swap(lpfilterusualw_, other->lpfilterusualw_);
    std::swap(bpfilterindex_, other->bpfilterindex_);
    std::swap(bpfiltertype_, other->bpfiltertype_);
    std::swap(bpfilterusualw_, other->bpfilterusualw_);
    std::swap(rsmpfilterindex_, other->rsmpfilterindex_);
    std::swap(rsmpfiltertype_, other->rsmpfiltertype_);
    std::swap(rsmpfilterusualw_, other->rsmpfilterusualw_);
    std::swap(hpfilterindex_, other->hpfilterindex_);
    std::swap(hpfiltertype_, other->hpfiltertype_);
    std::swap(hpfilterparam1_, other->hpfilterparam1_);
    fparamslist_.Swap(&other->fparamslist_);
    std::swap(fparamscount_, other->fparamscount_);
    std::swap(avgcount_, other->avgcount_);
    std::swap(frotlimits_, other->frotlimits_);
    std::swap(frotlimitsactive_, other->frotlimitsactive_);
    std::swap(stabcontrol_, other->stabcontrol_);
    std::swap(rotcontrol_, other->rotcontrol_);
    std::swap(waitperiodforrotmetka_, other->waitperiodforrotmetka_);
    std::swap(timesigsrctype_, other->timesigsrctype_);
    std::swap(timesigid_, other->timesigid_);
    std::swap(inittaskstate_, other->inittaskstate_);
    std::swap(finaltaskstate_, other->finaltaskstate_);
    std::swap(tsdtc_, other->tsdtc_);
    std::swap(calctypetsdtc_, other->calctypetsdtc_);
    std::swap(tde_, other->tde_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonTaskParams_descriptor_;
  metadata.reflection = CommonTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpectrTaskParams::kCMNFieldNumber;
const int SpectrTaskParams::kSpectrClassCodeFieldNumber;
const int SpectrTaskParams::kSpectLinesArrIndexFieldNumber;
const int SpectrTaskParams::kSpectAmpUnitFieldNumber;
const int SpectrTaskParams::kRemoveAvgLineFieldNumber;
#endif  // !_MSC_VER

SpectrTaskParams::SpectrTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.SpectrTaskParams)
}

void SpectrTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

SpectrTaskParams::SpectrTaskParams(const SpectrTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.SpectrTaskParams)
}

void SpectrTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  spectrclasscode_ = 0;
  spectlinesarrindex_ = 0;
  spectampunit_ = 0u;
  removeavgline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpectrTaskParams::~SpectrTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.SpectrTaskParams)
  SharedDtor();
}

void SpectrTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void SpectrTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpectrTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpectrTaskParams_descriptor_;
}

const SpectrTaskParams& SpectrTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

SpectrTaskParams* SpectrTaskParams::default_instance_ = NULL;

SpectrTaskParams* SpectrTaskParams::New() const {
  return new SpectrTaskParams;
}

void SpectrTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpectrTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(spectrclasscode_, removeavgline_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpectrTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.SpectrTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SpectrClassCode;
        break;
      }

      // required int32 SpectrClassCode = 2;
      case 2: {
        if (tag == 16) {
         parse_SpectrClassCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spectrclasscode_)));
          set_has_spectrclasscode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SpectLinesArrIndex;
        break;
      }

      // required int32 SpectLinesArrIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_SpectLinesArrIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spectlinesarrindex_)));
          set_has_spectlinesarrindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SpectAmpUnit;
        break;
      }

      // required uint32 SpectAmpUnit = 4;
      case 4: {
        if (tag == 32) {
         parse_SpectAmpUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectampunit_)));
          set_has_spectampunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RemoveAvgLine;
        break;
      }

      // required bool RemoveAvgLine = 5;
      case 5: {
        if (tag == 40) {
         parse_RemoveAvgLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removeavgline_)));
          set_has_removeavgline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.SpectrTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.SpectrTaskParams)
  return false;
#undef DO_
}

void SpectrTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.SpectrTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required int32 SpectrClassCode = 2;
  if (has_spectrclasscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spectrclasscode(), output);
  }

  // required int32 SpectLinesArrIndex = 3;
  if (has_spectlinesarrindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spectlinesarrindex(), output);
  }

  // required uint32 SpectAmpUnit = 4;
  if (has_spectampunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->spectampunit(), output);
  }

  // required bool RemoveAvgLine = 5;
  if (has_removeavgline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->removeavgline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.SpectrTaskParams)
}

::google::protobuf::uint8* SpectrTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.SpectrTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required int32 SpectrClassCode = 2;
  if (has_spectrclasscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spectrclasscode(), target);
  }

  // required int32 SpectLinesArrIndex = 3;
  if (has_spectlinesarrindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spectlinesarrindex(), target);
  }

  // required uint32 SpectAmpUnit = 4;
  if (has_spectampunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->spectampunit(), target);
  }

  // required bool RemoveAvgLine = 5;
  if (has_removeavgline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->removeavgline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.SpectrTaskParams)
  return target;
}

int SpectrTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required int32 SpectrClassCode = 2;
    if (has_spectrclasscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spectrclasscode());
    }

    // required int32 SpectLinesArrIndex = 3;
    if (has_spectlinesarrindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spectlinesarrindex());
    }

    // required uint32 SpectAmpUnit = 4;
    if (has_spectampunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectampunit());
    }

    // required bool RemoveAvgLine = 5;
    if (has_removeavgline()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpectrTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpectrTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpectrTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpectrTaskParams::MergeFrom(const SpectrTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_spectrclasscode()) {
      set_spectrclasscode(from.spectrclasscode());
    }
    if (from.has_spectlinesarrindex()) {
      set_spectlinesarrindex(from.spectlinesarrindex());
    }
    if (from.has_spectampunit()) {
      set_spectampunit(from.spectampunit());
    }
    if (from.has_removeavgline()) {
      set_removeavgline(from.removeavgline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpectrTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrTaskParams::CopyFrom(const SpectrTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void SpectrTaskParams::Swap(SpectrTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(spectrclasscode_, other->spectrclasscode_);
    std::swap(spectlinesarrindex_, other->spectlinesarrindex_);
    std::swap(spectampunit_, other->spectampunit_);
    std::swap(removeavgline_, other->removeavgline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpectrTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpectrTaskParams_descriptor_;
  metadata.reflection = SpectrTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VharmonicTaskParams::kSTPFieldNumber;
const int VharmonicTaskParams::kCMNFieldNumber;
const int VharmonicTaskParams::kVHarmonicsCountFieldNumber;
const int VharmonicTaskParams::kVHarmonicsAvgCountFieldNumber;
const int VharmonicTaskParams::kSpectLinesArrIndexFieldNumber;
#endif  // !_MSC_VER

VharmonicTaskParams::VharmonicTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.VharmonicTaskParams)
}

void VharmonicTaskParams::InitAsDefaultInstance() {
  stp_ = const_cast< ::task_manager::SpectrTaskParams*>(&::task_manager::SpectrTaskParams::default_instance());
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

VharmonicTaskParams::VharmonicTaskParams(const VharmonicTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.VharmonicTaskParams)
}

void VharmonicTaskParams::SharedCtor() {
  _cached_size_ = 0;
  stp_ = NULL;
  cmn_ = NULL;
  vharmonicscount_ = 0;
  vharmonicsavgcount_ = 0;
  spectlinesarrindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VharmonicTaskParams::~VharmonicTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.VharmonicTaskParams)
  SharedDtor();
}

void VharmonicTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete stp_;
    delete cmn_;
  }
}

void VharmonicTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VharmonicTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VharmonicTaskParams_descriptor_;
}

const VharmonicTaskParams& VharmonicTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

VharmonicTaskParams* VharmonicTaskParams::default_instance_ = NULL;

VharmonicTaskParams* VharmonicTaskParams::New() const {
  return new VharmonicTaskParams;
}

void VharmonicTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VharmonicTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(vharmonicscount_, spectlinesarrindex_);
    if (has_stp()) {
      if (stp_ != NULL) stp_->::task_manager::SpectrTaskParams::Clear();
    }
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VharmonicTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.VharmonicTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .task_manager.SpectrTaskParams STP = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CMN;
        break;
      }

      // required .task_manager.CommonTaskParams CMN = 2;
      case 2: {
        if (tag == 18) {
         parse_CMN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_VHarmonicsCount;
        break;
      }

      // required int32 VHarmonicsCount = 3;
      case 3: {
        if (tag == 24) {
         parse_VHarmonicsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vharmonicscount_)));
          set_has_vharmonicscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_VHarmonicsAvgCount;
        break;
      }

      // optional int32 VHarmonicsAvgCount = 4;
      case 4: {
        if (tag == 32) {
         parse_VHarmonicsAvgCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vharmonicsavgcount_)));
          set_has_vharmonicsavgcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SpectLinesArrIndex;
        break;
      }

      // required int32 SpectLinesArrIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_SpectLinesArrIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spectlinesarrindex_)));
          set_has_spectlinesarrindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.VharmonicTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.VharmonicTaskParams)
  return false;
#undef DO_
}

void VharmonicTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.VharmonicTaskParams)
  // optional .task_manager.SpectrTaskParams STP = 1;
  if (has_stp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stp(), output);
  }

  // required .task_manager.CommonTaskParams CMN = 2;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cmn(), output);
  }

  // required int32 VHarmonicsCount = 3;
  if (has_vharmonicscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vharmonicscount(), output);
  }

  // optional int32 VHarmonicsAvgCount = 4;
  if (has_vharmonicsavgcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vharmonicsavgcount(), output);
  }

  // required int32 SpectLinesArrIndex = 5;
  if (has_spectlinesarrindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spectlinesarrindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.VharmonicTaskParams)
}

::google::protobuf::uint8* VharmonicTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.VharmonicTaskParams)
  // optional .task_manager.SpectrTaskParams STP = 1;
  if (has_stp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stp(), target);
  }

  // required .task_manager.CommonTaskParams CMN = 2;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cmn(), target);
  }

  // required int32 VHarmonicsCount = 3;
  if (has_vharmonicscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vharmonicscount(), target);
  }

  // optional int32 VHarmonicsAvgCount = 4;
  if (has_vharmonicsavgcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vharmonicsavgcount(), target);
  }

  // required int32 SpectLinesArrIndex = 5;
  if (has_spectlinesarrindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->spectlinesarrindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.VharmonicTaskParams)
  return target;
}

int VharmonicTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .task_manager.SpectrTaskParams STP = 1;
    if (has_stp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stp());
    }

    // required .task_manager.CommonTaskParams CMN = 2;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required int32 VHarmonicsCount = 3;
    if (has_vharmonicscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vharmonicscount());
    }

    // optional int32 VHarmonicsAvgCount = 4;
    if (has_vharmonicsavgcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vharmonicsavgcount());
    }

    // required int32 SpectLinesArrIndex = 5;
    if (has_spectlinesarrindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spectlinesarrindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VharmonicTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VharmonicTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VharmonicTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VharmonicTaskParams::MergeFrom(const VharmonicTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stp()) {
      mutable_stp()->::task_manager::SpectrTaskParams::MergeFrom(from.stp());
    }
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_vharmonicscount()) {
      set_vharmonicscount(from.vharmonicscount());
    }
    if (from.has_vharmonicsavgcount()) {
      set_vharmonicsavgcount(from.vharmonicsavgcount());
    }
    if (from.has_spectlinesarrindex()) {
      set_spectlinesarrindex(from.spectlinesarrindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VharmonicTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VharmonicTaskParams::CopyFrom(const VharmonicTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VharmonicTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000016) != 0x00000016) return false;

  if (has_stp()) {
    if (!this->stp().IsInitialized()) return false;
  }
  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void VharmonicTaskParams::Swap(VharmonicTaskParams* other) {
  if (other != this) {
    std::swap(stp_, other->stp_);
    std::swap(cmn_, other->cmn_);
    std::swap(vharmonicscount_, other->vharmonicscount_);
    std::swap(vharmonicsavgcount_, other->vharmonicsavgcount_);
    std::swap(spectlinesarrindex_, other->spectlinesarrindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VharmonicTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VharmonicTaskParams_descriptor_;
  metadata.reflection = VharmonicTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatKurtosisTaskParams::kCMNFieldNumber;
const int StatKurtosisTaskParams::kOneMeasTimeSigLengthFieldNumber;
const int StatKurtosisTaskParams::kMeasCountFieldNumber;
const int StatKurtosisTaskParams::kCoefCoverFieldNumber;
#endif  // !_MSC_VER

StatKurtosisTaskParams::StatKurtosisTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.StatKurtosisTaskParams)
}

void StatKurtosisTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

StatKurtosisTaskParams::StatKurtosisTaskParams(const StatKurtosisTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.StatKurtosisTaskParams)
}

void StatKurtosisTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  onemeastimesiglength_ = 0;
  meascount_ = 0;
  coefcover_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatKurtosisTaskParams::~StatKurtosisTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.StatKurtosisTaskParams)
  SharedDtor();
}

void StatKurtosisTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void StatKurtosisTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatKurtosisTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatKurtosisTaskParams_descriptor_;
}

const StatKurtosisTaskParams& StatKurtosisTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

StatKurtosisTaskParams* StatKurtosisTaskParams::default_instance_ = NULL;

StatKurtosisTaskParams* StatKurtosisTaskParams::New() const {
  return new StatKurtosisTaskParams;
}

void StatKurtosisTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatKurtosisTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(onemeastimesiglength_, coefcover_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatKurtosisTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.StatKurtosisTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OneMeasTimeSigLength;
        break;
      }

      // required int32 OneMeasTimeSigLength = 2;
      case 2: {
        if (tag == 16) {
         parse_OneMeasTimeSigLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onemeastimesiglength_)));
          set_has_onemeastimesiglength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MeasCount;
        break;
      }

      // required int32 MeasCount = 3;
      case 3: {
        if (tag == 24) {
         parse_MeasCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meascount_)));
          set_has_meascount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_CoefCover;
        break;
      }

      // required double CoefCover = 4;
      case 4: {
        if (tag == 33) {
         parse_CoefCover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coefcover_)));
          set_has_coefcover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.StatKurtosisTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.StatKurtosisTaskParams)
  return false;
#undef DO_
}

void StatKurtosisTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.StatKurtosisTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required int32 OneMeasTimeSigLength = 2;
  if (has_onemeastimesiglength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onemeastimesiglength(), output);
  }

  // required int32 MeasCount = 3;
  if (has_meascount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->meascount(), output);
  }

  // required double CoefCover = 4;
  if (has_coefcover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->coefcover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.StatKurtosisTaskParams)
}

::google::protobuf::uint8* StatKurtosisTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.StatKurtosisTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required int32 OneMeasTimeSigLength = 2;
  if (has_onemeastimesiglength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onemeastimesiglength(), target);
  }

  // required int32 MeasCount = 3;
  if (has_meascount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->meascount(), target);
  }

  // required double CoefCover = 4;
  if (has_coefcover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->coefcover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.StatKurtosisTaskParams)
  return target;
}

int StatKurtosisTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required int32 OneMeasTimeSigLength = 2;
    if (has_onemeastimesiglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onemeastimesiglength());
    }

    // required int32 MeasCount = 3;
    if (has_meascount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meascount());
    }

    // required double CoefCover = 4;
    if (has_coefcover()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatKurtosisTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatKurtosisTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatKurtosisTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatKurtosisTaskParams::MergeFrom(const StatKurtosisTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_onemeastimesiglength()) {
      set_onemeastimesiglength(from.onemeastimesiglength());
    }
    if (from.has_meascount()) {
      set_meascount(from.meascount());
    }
    if (from.has_coefcover()) {
      set_coefcover(from.coefcover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatKurtosisTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatKurtosisTaskParams::CopyFrom(const StatKurtosisTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatKurtosisTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void StatKurtosisTaskParams::Swap(StatKurtosisTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(onemeastimesiglength_, other->onemeastimesiglength_);
    std::swap(meascount_, other->meascount_);
    std::swap(coefcover_, other->coefcover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatKurtosisTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatKurtosisTaskParams_descriptor_;
  metadata.reflection = StatKurtosisTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatTimeSigTaskParams::kCMNFieldNumber;
const int StatTimeSigTaskParams::kOneMeasTimeSigLengthFieldNumber;
const int StatTimeSigTaskParams::kAmpUnitFieldNumber;
const int StatTimeSigTaskParams::kIntegrateInTimeDomainFieldNumber;
#endif  // !_MSC_VER

StatTimeSigTaskParams::StatTimeSigTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.StatTimeSigTaskParams)
}

void StatTimeSigTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

StatTimeSigTaskParams::StatTimeSigTaskParams(const StatTimeSigTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.StatTimeSigTaskParams)
}

void StatTimeSigTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  onemeastimesiglength_ = 0;
  ampunit_ = 0u;
  integrateintimedomain_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatTimeSigTaskParams::~StatTimeSigTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.StatTimeSigTaskParams)
  SharedDtor();
}

void StatTimeSigTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void StatTimeSigTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatTimeSigTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatTimeSigTaskParams_descriptor_;
}

const StatTimeSigTaskParams& StatTimeSigTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

StatTimeSigTaskParams* StatTimeSigTaskParams::default_instance_ = NULL;

StatTimeSigTaskParams* StatTimeSigTaskParams::New() const {
  return new StatTimeSigTaskParams;
}

void StatTimeSigTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatTimeSigTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(onemeastimesiglength_, integrateintimedomain_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatTimeSigTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.StatTimeSigTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OneMeasTimeSigLength;
        break;
      }

      // required int32 OneMeasTimeSigLength = 2;
      case 2: {
        if (tag == 16) {
         parse_OneMeasTimeSigLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onemeastimesiglength_)));
          set_has_onemeastimesiglength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AmpUnit;
        break;
      }

      // required uint32 AmpUnit = 3;
      case 3: {
        if (tag == 24) {
         parse_AmpUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ampunit_)));
          set_has_ampunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IntegrateInTimeDomain;
        break;
      }

      // required bool IntegrateInTimeDomain = 4;
      case 4: {
        if (tag == 32) {
         parse_IntegrateInTimeDomain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &integrateintimedomain_)));
          set_has_integrateintimedomain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.StatTimeSigTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.StatTimeSigTaskParams)
  return false;
#undef DO_
}

void StatTimeSigTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.StatTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required int32 OneMeasTimeSigLength = 2;
  if (has_onemeastimesiglength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onemeastimesiglength(), output);
  }

  // required uint32 AmpUnit = 3;
  if (has_ampunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ampunit(), output);
  }

  // required bool IntegrateInTimeDomain = 4;
  if (has_integrateintimedomain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->integrateintimedomain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.StatTimeSigTaskParams)
}

::google::protobuf::uint8* StatTimeSigTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.StatTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required int32 OneMeasTimeSigLength = 2;
  if (has_onemeastimesiglength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onemeastimesiglength(), target);
  }

  // required uint32 AmpUnit = 3;
  if (has_ampunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ampunit(), target);
  }

  // required bool IntegrateInTimeDomain = 4;
  if (has_integrateintimedomain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->integrateintimedomain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.StatTimeSigTaskParams)
  return target;
}

int StatTimeSigTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required int32 OneMeasTimeSigLength = 2;
    if (has_onemeastimesiglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onemeastimesiglength());
    }

    // required uint32 AmpUnit = 3;
    if (has_ampunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ampunit());
    }

    // required bool IntegrateInTimeDomain = 4;
    if (has_integrateintimedomain()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatTimeSigTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatTimeSigTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatTimeSigTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatTimeSigTaskParams::MergeFrom(const StatTimeSigTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_onemeastimesiglength()) {
      set_onemeastimesiglength(from.onemeastimesiglength());
    }
    if (from.has_ampunit()) {
      set_ampunit(from.ampunit());
    }
    if (from.has_integrateintimedomain()) {
      set_integrateintimedomain(from.integrateintimedomain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatTimeSigTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatTimeSigTaskParams::CopyFrom(const StatTimeSigTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatTimeSigTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void StatTimeSigTaskParams::Swap(StatTimeSigTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(onemeastimesiglength_, other->onemeastimesiglength_);
    std::swap(ampunit_, other->ampunit_);
    std::swap(integrateintimedomain_, other->integrateintimedomain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatTimeSigTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatTimeSigTaskParams_descriptor_;
  metadata.reflection = StatTimeSigTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTimeSigTaskParams::kCMNFieldNumber;
#endif  // !_MSC_VER

PlayerTimeSigTaskParams::PlayerTimeSigTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.PlayerTimeSigTaskParams)
}

void PlayerTimeSigTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

PlayerTimeSigTaskParams::PlayerTimeSigTaskParams(const PlayerTimeSigTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.PlayerTimeSigTaskParams)
}

void PlayerTimeSigTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTimeSigTaskParams::~PlayerTimeSigTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.PlayerTimeSigTaskParams)
  SharedDtor();
}

void PlayerTimeSigTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void PlayerTimeSigTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTimeSigTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTimeSigTaskParams_descriptor_;
}

const PlayerTimeSigTaskParams& PlayerTimeSigTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

PlayerTimeSigTaskParams* PlayerTimeSigTaskParams::default_instance_ = NULL;

PlayerTimeSigTaskParams* PlayerTimeSigTaskParams::New() const {
  return new PlayerTimeSigTaskParams;
}

void PlayerTimeSigTaskParams::Clear() {
  if (has_cmn()) {
    if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTimeSigTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.PlayerTimeSigTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.PlayerTimeSigTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.PlayerTimeSigTaskParams)
  return false;
#undef DO_
}

void PlayerTimeSigTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.PlayerTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.PlayerTimeSigTaskParams)
}

::google::protobuf::uint8* PlayerTimeSigTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.PlayerTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.PlayerTimeSigTaskParams)
  return target;
}

int PlayerTimeSigTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTimeSigTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTimeSigTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTimeSigTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTimeSigTaskParams::MergeFrom(const PlayerTimeSigTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTimeSigTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTimeSigTaskParams::CopyFrom(const PlayerTimeSigTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTimeSigTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void PlayerTimeSigTaskParams::Swap(PlayerTimeSigTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTimeSigTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTimeSigTaskParams_descriptor_;
  metadata.reflection = PlayerTimeSigTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VibegTaskParams::kCMNFieldNumber;
const int VibegTaskParams::kFrotBaseFieldNumber;
const int VibegTaskParams::kFrotAvgMetkasCountFieldNumber;
#endif  // !_MSC_VER

VibegTaskParams::VibegTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.VibegTaskParams)
}

void VibegTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

VibegTaskParams::VibegTaskParams(const VibegTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.VibegTaskParams)
}

void VibegTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  frot_base_ = 0;
  frotavgmetkascount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VibegTaskParams::~VibegTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.VibegTaskParams)
  SharedDtor();
}

void VibegTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void VibegTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VibegTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VibegTaskParams_descriptor_;
}

const VibegTaskParams& VibegTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

VibegTaskParams* VibegTaskParams::default_instance_ = NULL;

VibegTaskParams* VibegTaskParams::New() const {
  return new VibegTaskParams;
}

void VibegTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VibegTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(frot_base_, frotavgmetkascount_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VibegTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.VibegTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Frot_base;
        break;
      }

      // required double Frot_base = 2;
      case 2: {
        if (tag == 17) {
         parse_Frot_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frot_base_)));
          set_has_frot_base();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FrotAvgMetkasCount;
        break;
      }

      // required uint32 FrotAvgMetkasCount = 3;
      case 3: {
        if (tag == 24) {
         parse_FrotAvgMetkasCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frotavgmetkascount_)));
          set_has_frotavgmetkascount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.VibegTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.VibegTaskParams)
  return false;
#undef DO_
}

void VibegTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.VibegTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required double Frot_base = 2;
  if (has_frot_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frot_base(), output);
  }

  // required uint32 FrotAvgMetkasCount = 3;
  if (has_frotavgmetkascount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frotavgmetkascount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.VibegTaskParams)
}

::google::protobuf::uint8* VibegTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.VibegTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required double Frot_base = 2;
  if (has_frot_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frot_base(), target);
  }

  // required uint32 FrotAvgMetkasCount = 3;
  if (has_frotavgmetkascount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frotavgmetkascount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.VibegTaskParams)
  return target;
}

int VibegTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required double Frot_base = 2;
    if (has_frot_base()) {
      total_size += 1 + 8;
    }

    // required uint32 FrotAvgMetkasCount = 3;
    if (has_frotavgmetkascount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frotavgmetkascount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VibegTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VibegTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VibegTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VibegTaskParams::MergeFrom(const VibegTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_frot_base()) {
      set_frot_base(from.frot_base());
    }
    if (from.has_frotavgmetkascount()) {
      set_frotavgmetkascount(from.frotavgmetkascount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VibegTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VibegTaskParams::CopyFrom(const VibegTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibegTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void VibegTaskParams::Swap(VibegTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(frot_base_, other->frot_base_);
    std::swap(frotavgmetkascount_, other->frotavgmetkascount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VibegTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VibegTaskParams_descriptor_;
  metadata.reflection = VibegTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QualityTimeSigTaskParams::kCMNFieldNumber;
const int QualityTimeSigTaskParams::kOneMeasTimeSigLengthFieldNumber;
const int QualityTimeSigTaskParams::kAmpPeakToPeakMinFieldNumber;
const int QualityTimeSigTaskParams::kAmpPeakToPeakMaxFieldNumber;
const int QualityTimeSigTaskParams::kAmpStdMinFieldNumber;
const int QualityTimeSigTaskParams::kAmpStdMaxFieldNumber;
#endif  // !_MSC_VER

QualityTimeSigTaskParams::QualityTimeSigTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.QualityTimeSigTaskParams)
}

void QualityTimeSigTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

QualityTimeSigTaskParams::QualityTimeSigTaskParams(const QualityTimeSigTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.QualityTimeSigTaskParams)
}

void QualityTimeSigTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  onemeastimesiglength_ = 0;
  amppeaktopeakmin_ = 0;
  amppeaktopeakmax_ = 0;
  ampstdmin_ = 0;
  ampstdmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QualityTimeSigTaskParams::~QualityTimeSigTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.QualityTimeSigTaskParams)
  SharedDtor();
}

void QualityTimeSigTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void QualityTimeSigTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QualityTimeSigTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QualityTimeSigTaskParams_descriptor_;
}

const QualityTimeSigTaskParams& QualityTimeSigTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

QualityTimeSigTaskParams* QualityTimeSigTaskParams::default_instance_ = NULL;

QualityTimeSigTaskParams* QualityTimeSigTaskParams::New() const {
  return new QualityTimeSigTaskParams;
}

void QualityTimeSigTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QualityTimeSigTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(amppeaktopeakmin_, onemeastimesiglength_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QualityTimeSigTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.QualityTimeSigTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OneMeasTimeSigLength;
        break;
      }

      // required int32 OneMeasTimeSigLength = 2;
      case 2: {
        if (tag == 16) {
         parse_OneMeasTimeSigLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onemeastimesiglength_)));
          set_has_onemeastimesiglength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_AmpPeakToPeakMin;
        break;
      }

      // required double AmpPeakToPeakMin = 3;
      case 3: {
        if (tag == 25) {
         parse_AmpPeakToPeakMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amppeaktopeakmin_)));
          set_has_amppeaktopeakmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_AmpPeakToPeakMax;
        break;
      }

      // required double AmpPeakToPeakMax = 4;
      case 4: {
        if (tag == 33) {
         parse_AmpPeakToPeakMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amppeaktopeakmax_)));
          set_has_amppeaktopeakmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_AmpStdMin;
        break;
      }

      // required double AmpStdMin = 5;
      case 5: {
        if (tag == 41) {
         parse_AmpStdMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ampstdmin_)));
          set_has_ampstdmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_AmpStdMax;
        break;
      }

      // required double AmpStdMax = 6;
      case 6: {
        if (tag == 49) {
         parse_AmpStdMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ampstdmax_)));
          set_has_ampstdmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.QualityTimeSigTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.QualityTimeSigTaskParams)
  return false;
#undef DO_
}

void QualityTimeSigTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.QualityTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required int32 OneMeasTimeSigLength = 2;
  if (has_onemeastimesiglength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onemeastimesiglength(), output);
  }

  // required double AmpPeakToPeakMin = 3;
  if (has_amppeaktopeakmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->amppeaktopeakmin(), output);
  }

  // required double AmpPeakToPeakMax = 4;
  if (has_amppeaktopeakmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amppeaktopeakmax(), output);
  }

  // required double AmpStdMin = 5;
  if (has_ampstdmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ampstdmin(), output);
  }

  // required double AmpStdMax = 6;
  if (has_ampstdmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ampstdmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.QualityTimeSigTaskParams)
}

::google::protobuf::uint8* QualityTimeSigTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.QualityTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required int32 OneMeasTimeSigLength = 2;
  if (has_onemeastimesiglength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onemeastimesiglength(), target);
  }

  // required double AmpPeakToPeakMin = 3;
  if (has_amppeaktopeakmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->amppeaktopeakmin(), target);
  }

  // required double AmpPeakToPeakMax = 4;
  if (has_amppeaktopeakmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amppeaktopeakmax(), target);
  }

  // required double AmpStdMin = 5;
  if (has_ampstdmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ampstdmin(), target);
  }

  // required double AmpStdMax = 6;
  if (has_ampstdmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ampstdmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.QualityTimeSigTaskParams)
  return target;
}

int QualityTimeSigTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required int32 OneMeasTimeSigLength = 2;
    if (has_onemeastimesiglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onemeastimesiglength());
    }

    // required double AmpPeakToPeakMin = 3;
    if (has_amppeaktopeakmin()) {
      total_size += 1 + 8;
    }

    // required double AmpPeakToPeakMax = 4;
    if (has_amppeaktopeakmax()) {
      total_size += 1 + 8;
    }

    // required double AmpStdMin = 5;
    if (has_ampstdmin()) {
      total_size += 1 + 8;
    }

    // required double AmpStdMax = 6;
    if (has_ampstdmax()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QualityTimeSigTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QualityTimeSigTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QualityTimeSigTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QualityTimeSigTaskParams::MergeFrom(const QualityTimeSigTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_onemeastimesiglength()) {
      set_onemeastimesiglength(from.onemeastimesiglength());
    }
    if (from.has_amppeaktopeakmin()) {
      set_amppeaktopeakmin(from.amppeaktopeakmin());
    }
    if (from.has_amppeaktopeakmax()) {
      set_amppeaktopeakmax(from.amppeaktopeakmax());
    }
    if (from.has_ampstdmin()) {
      set_ampstdmin(from.ampstdmin());
    }
    if (from.has_ampstdmax()) {
      set_ampstdmax(from.ampstdmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QualityTimeSigTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityTimeSigTaskParams::CopyFrom(const QualityTimeSigTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityTimeSigTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void QualityTimeSigTaskParams::Swap(QualityTimeSigTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(onemeastimesiglength_, other->onemeastimesiglength_);
    std::swap(amppeaktopeakmin_, other->amppeaktopeakmin_);
    std::swap(amppeaktopeakmax_, other->amppeaktopeakmax_);
    std::swap(ampstdmin_, other->ampstdmin_);
    std::swap(ampstdmax_, other->ampstdmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QualityTimeSigTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QualityTimeSigTaskParams_descriptor_;
  metadata.reflection = QualityTimeSigTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTimeSigTaskParams::kCMNFieldNumber;
const int SaveTimeSigTaskParams::kFileNameFieldNumber;
const int SaveTimeSigTaskParams::kOnePartTimeSigLengthFieldNumber;
const int SaveTimeSigTaskParams::kTotalTimeSigLengthFieldNumber;
const int SaveTimeSigTaskParams::kSigLengthWithFsSrcFieldNumber;
const int SaveTimeSigTaskParams::kTSDTCFieldNumber;
#endif  // !_MSC_VER

SaveTimeSigTaskParams::SaveTimeSigTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.SaveTimeSigTaskParams)
}

void SaveTimeSigTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

SaveTimeSigTaskParams::SaveTimeSigTaskParams(const SaveTimeSigTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.SaveTimeSigTaskParams)
}

void SaveTimeSigTaskParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmn_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oneparttimesiglength_ = 0u;
  totaltimesiglength_ = 0u;
  siglengthwithfssrc_ = false;
  tsdtc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTimeSigTaskParams::~SaveTimeSigTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.SaveTimeSigTaskParams)
  SharedDtor();
}

void SaveTimeSigTaskParams::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete cmn_;
  }
}

void SaveTimeSigTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTimeSigTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTimeSigTaskParams_descriptor_;
}

const SaveTimeSigTaskParams& SaveTimeSigTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

SaveTimeSigTaskParams* SaveTimeSigTaskParams::default_instance_ = NULL;

SaveTimeSigTaskParams* SaveTimeSigTaskParams::New() const {
  return new SaveTimeSigTaskParams;
}

void SaveTimeSigTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SaveTimeSigTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(oneparttimesiglength_, tsdtc_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTimeSigTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.SaveTimeSigTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OnePartTimeSigLength;
        break;
      }

      // required uint32 OnePartTimeSigLength = 3;
      case 3: {
        if (tag == 24) {
         parse_OnePartTimeSigLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneparttimesiglength_)));
          set_has_oneparttimesiglength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TotalTimeSigLength;
        break;
      }

      // required uint32 TotalTimeSigLength = 4;
      case 4: {
        if (tag == 32) {
         parse_TotalTimeSigLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaltimesiglength_)));
          set_has_totaltimesiglength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SigLengthWithFsSrc;
        break;
      }

      // required bool SigLengthWithFsSrc = 5;
      case 5: {
        if (tag == 40) {
         parse_SigLengthWithFsSrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &siglengthwithfssrc_)));
          set_has_siglengthwithfssrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TSDTC;
        break;
      }

      // required uint32 TSDTC = 6;
      case 6: {
        if (tag == 48) {
         parse_TSDTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tsdtc_)));
          set_has_tsdtc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.SaveTimeSigTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.SaveTimeSigTaskParams)
  return false;
#undef DO_
}

void SaveTimeSigTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.SaveTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required uint32 OnePartTimeSigLength = 3;
  if (has_oneparttimesiglength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oneparttimesiglength(), output);
  }

  // required uint32 TotalTimeSigLength = 4;
  if (has_totaltimesiglength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totaltimesiglength(), output);
  }

  // required bool SigLengthWithFsSrc = 5;
  if (has_siglengthwithfssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->siglengthwithfssrc(), output);
  }

  // required uint32 TSDTC = 6;
  if (has_tsdtc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tsdtc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.SaveTimeSigTaskParams)
}

::google::protobuf::uint8* SaveTimeSigTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.SaveTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required uint32 OnePartTimeSigLength = 3;
  if (has_oneparttimesiglength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oneparttimesiglength(), target);
  }

  // required uint32 TotalTimeSigLength = 4;
  if (has_totaltimesiglength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totaltimesiglength(), target);
  }

  // required bool SigLengthWithFsSrc = 5;
  if (has_siglengthwithfssrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->siglengthwithfssrc(), target);
  }

  // required uint32 TSDTC = 6;
  if (has_tsdtc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tsdtc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.SaveTimeSigTaskParams)
  return target;
}

int SaveTimeSigTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required uint32 OnePartTimeSigLength = 3;
    if (has_oneparttimesiglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneparttimesiglength());
    }

    // required uint32 TotalTimeSigLength = 4;
    if (has_totaltimesiglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaltimesiglength());
    }

    // required bool SigLengthWithFsSrc = 5;
    if (has_siglengthwithfssrc()) {
      total_size += 1 + 1;
    }

    // required uint32 TSDTC = 6;
    if (has_tsdtc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tsdtc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTimeSigTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTimeSigTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTimeSigTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTimeSigTaskParams::MergeFrom(const SaveTimeSigTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_oneparttimesiglength()) {
      set_oneparttimesiglength(from.oneparttimesiglength());
    }
    if (from.has_totaltimesiglength()) {
      set_totaltimesiglength(from.totaltimesiglength());
    }
    if (from.has_siglengthwithfssrc()) {
      set_siglengthwithfssrc(from.siglengthwithfssrc());
    }
    if (from.has_tsdtc()) {
      set_tsdtc(from.tsdtc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTimeSigTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTimeSigTaskParams::CopyFrom(const SaveTimeSigTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTimeSigTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void SaveTimeSigTaskParams::Swap(SaveTimeSigTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(filename_, other->filename_);
    std::swap(oneparttimesiglength_, other->oneparttimesiglength_);
    std::swap(totaltimesiglength_, other->totaltimesiglength_);
    std::swap(siglengthwithfssrc_, other->siglengthwithfssrc_);
    std::swap(tsdtc_, other->tsdtc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTimeSigTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTimeSigTaskParams_descriptor_;
  metadata.reflection = SaveTimeSigTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VsensorFrotTaskParams::kCMNFieldNumber;
const int VsensorFrotTaskParams::kSTPFieldNumber;
const int VsensorFrotTaskParams::kDeltaOffSetInSecFieldNumber;
const int VsensorFrotTaskParams::kScaleKoeffFFtFieldNumber;
const int VsensorFrotTaskParams::kFrotMinFieldNumber;
const int VsensorFrotTaskParams::kFrotMaxFieldNumber;
const int VsensorFrotTaskParams::kFrotAccelMaxFieldNumber;
const int VsensorFrotTaskParams::kAmpModulMinFieldNumber;
const int VsensorFrotTaskParams::kSTDMinFieldNumber;
const int VsensorFrotTaskParams::kRBFilterLengthFieldNumber;
#endif  // !_MSC_VER

VsensorFrotTaskParams::VsensorFrotTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.VsensorFrotTaskParams)
}

void VsensorFrotTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
  stp_ = const_cast< ::task_manager::SpectrTaskParams*>(&::task_manager::SpectrTaskParams::default_instance());
}

VsensorFrotTaskParams::VsensorFrotTaskParams(const VsensorFrotTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.VsensorFrotTaskParams)
}

void VsensorFrotTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  stp_ = NULL;
  deltaoffsetinsec_ = 0;
  scalekoefffft_ = 0u;
  frotmin_ = 0;
  frotmax_ = 0;
  frotaccelmax_ = 0;
  ampmodulmin_ = 0;
  stdmin_ = 0;
  rbfilterlength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VsensorFrotTaskParams::~VsensorFrotTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.VsensorFrotTaskParams)
  SharedDtor();
}

void VsensorFrotTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
    delete stp_;
  }
}

void VsensorFrotTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VsensorFrotTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VsensorFrotTaskParams_descriptor_;
}

const VsensorFrotTaskParams& VsensorFrotTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

VsensorFrotTaskParams* VsensorFrotTaskParams::default_instance_ = NULL;

VsensorFrotTaskParams* VsensorFrotTaskParams::New() const {
  return new VsensorFrotTaskParams;
}

void VsensorFrotTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VsensorFrotTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(deltaoffsetinsec_, scalekoefffft_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
    if (has_stp()) {
      if (stp_ != NULL) stp_->::task_manager::SpectrTaskParams::Clear();
    }
    ampmodulmin_ = 0;
  }
  if (_has_bits_[8 / 32] & 768) {
    stdmin_ = 0;
    rbfilterlength_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VsensorFrotTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.VsensorFrotTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_STP;
        break;
      }

      // optional .task_manager.SpectrTaskParams STP = 2;
      case 2: {
        if (tag == 18) {
         parse_STP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_DeltaOffSetInSec;
        break;
      }

      // required double DeltaOffSetInSec = 3;
      case 3: {
        if (tag == 25) {
         parse_DeltaOffSetInSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltaoffsetinsec_)));
          set_has_deltaoffsetinsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ScaleKoeffFFt;
        break;
      }

      // required uint32 ScaleKoeffFFt = 4;
      case 4: {
        if (tag == 32) {
         parse_ScaleKoeffFFt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scalekoefffft_)));
          set_has_scalekoefffft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_FrotMin;
        break;
      }

      // required double FrotMin = 5;
      case 5: {
        if (tag == 41) {
         parse_FrotMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frotmin_)));
          set_has_frotmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_FrotMax;
        break;
      }

      // required double FrotMax = 6;
      case 6: {
        if (tag == 49) {
         parse_FrotMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frotmax_)));
          set_has_frotmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_FrotAccelMax;
        break;
      }

      // required double FrotAccelMax = 7;
      case 7: {
        if (tag == 57) {
         parse_FrotAccelMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frotaccelmax_)));
          set_has_frotaccelmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_AmpModulMin;
        break;
      }

      // required double AmpModulMin = 8;
      case 8: {
        if (tag == 65) {
         parse_AmpModulMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ampmodulmin_)));
          set_has_ampmodulmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_STDMin;
        break;
      }

      // required double STDMin = 9;
      case 9: {
        if (tag == 73) {
         parse_STDMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stdmin_)));
          set_has_stdmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RBFilterLength;
        break;
      }

      // required int32 RBFilterLength = 10;
      case 10: {
        if (tag == 80) {
         parse_RBFilterLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rbfilterlength_)));
          set_has_rbfilterlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.VsensorFrotTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.VsensorFrotTaskParams)
  return false;
#undef DO_
}

void VsensorFrotTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.VsensorFrotTaskParams)
  // optional .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // optional .task_manager.SpectrTaskParams STP = 2;
  if (has_stp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stp(), output);
  }

  // required double DeltaOffSetInSec = 3;
  if (has_deltaoffsetinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deltaoffsetinsec(), output);
  }

  // required uint32 ScaleKoeffFFt = 4;
  if (has_scalekoefffft()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scalekoefffft(), output);
  }

  // required double FrotMin = 5;
  if (has_frotmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->frotmin(), output);
  }

  // required double FrotMax = 6;
  if (has_frotmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->frotmax(), output);
  }

  // required double FrotAccelMax = 7;
  if (has_frotaccelmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->frotaccelmax(), output);
  }

  // required double AmpModulMin = 8;
  if (has_ampmodulmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ampmodulmin(), output);
  }

  // required double STDMin = 9;
  if (has_stdmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->stdmin(), output);
  }

  // required int32 RBFilterLength = 10;
  if (has_rbfilterlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rbfilterlength(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.VsensorFrotTaskParams)
}

::google::protobuf::uint8* VsensorFrotTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.VsensorFrotTaskParams)
  // optional .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // optional .task_manager.SpectrTaskParams STP = 2;
  if (has_stp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stp(), target);
  }

  // required double DeltaOffSetInSec = 3;
  if (has_deltaoffsetinsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deltaoffsetinsec(), target);
  }

  // required uint32 ScaleKoeffFFt = 4;
  if (has_scalekoefffft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scalekoefffft(), target);
  }

  // required double FrotMin = 5;
  if (has_frotmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->frotmin(), target);
  }

  // required double FrotMax = 6;
  if (has_frotmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->frotmax(), target);
  }

  // required double FrotAccelMax = 7;
  if (has_frotaccelmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->frotaccelmax(), target);
  }

  // required double AmpModulMin = 8;
  if (has_ampmodulmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ampmodulmin(), target);
  }

  // required double STDMin = 9;
  if (has_stdmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->stdmin(), target);
  }

  // required int32 RBFilterLength = 10;
  if (has_rbfilterlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rbfilterlength(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.VsensorFrotTaskParams)
  return target;
}

int VsensorFrotTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // optional .task_manager.SpectrTaskParams STP = 2;
    if (has_stp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stp());
    }

    // required double DeltaOffSetInSec = 3;
    if (has_deltaoffsetinsec()) {
      total_size += 1 + 8;
    }

    // required uint32 ScaleKoeffFFt = 4;
    if (has_scalekoefffft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scalekoefffft());
    }

    // required double FrotMin = 5;
    if (has_frotmin()) {
      total_size += 1 + 8;
    }

    // required double FrotMax = 6;
    if (has_frotmax()) {
      total_size += 1 + 8;
    }

    // required double FrotAccelMax = 7;
    if (has_frotaccelmax()) {
      total_size += 1 + 8;
    }

    // required double AmpModulMin = 8;
    if (has_ampmodulmin()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double STDMin = 9;
    if (has_stdmin()) {
      total_size += 1 + 8;
    }

    // required int32 RBFilterLength = 10;
    if (has_rbfilterlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rbfilterlength());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VsensorFrotTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VsensorFrotTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VsensorFrotTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VsensorFrotTaskParams::MergeFrom(const VsensorFrotTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_stp()) {
      mutable_stp()->::task_manager::SpectrTaskParams::MergeFrom(from.stp());
    }
    if (from.has_deltaoffsetinsec()) {
      set_deltaoffsetinsec(from.deltaoffsetinsec());
    }
    if (from.has_scalekoefffft()) {
      set_scalekoefffft(from.scalekoefffft());
    }
    if (from.has_frotmin()) {
      set_frotmin(from.frotmin());
    }
    if (from.has_frotmax()) {
      set_frotmax(from.frotmax());
    }
    if (from.has_frotaccelmax()) {
      set_frotaccelmax(from.frotaccelmax());
    }
    if (from.has_ampmodulmin()) {
      set_ampmodulmin(from.ampmodulmin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stdmin()) {
      set_stdmin(from.stdmin());
    }
    if (from.has_rbfilterlength()) {
      set_rbfilterlength(from.rbfilterlength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VsensorFrotTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VsensorFrotTaskParams::CopyFrom(const VsensorFrotTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VsensorFrotTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fc) != 0x000003fc) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  if (has_stp()) {
    if (!this->stp().IsInitialized()) return false;
  }
  return true;
}

void VsensorFrotTaskParams::Swap(VsensorFrotTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(stp_, other->stp_);
    std::swap(deltaoffsetinsec_, other->deltaoffsetinsec_);
    std::swap(scalekoefffft_, other->scalekoefffft_);
    std::swap(frotmin_, other->frotmin_);
    std::swap(frotmax_, other->frotmax_);
    std::swap(frotaccelmax_, other->frotaccelmax_);
    std::swap(ampmodulmin_, other->ampmodulmin_);
    std::swap(stdmin_, other->stdmin_);
    std::swap(rbfilterlength_, other->rbfilterlength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VsensorFrotTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VsensorFrotTaskParams_descriptor_;
  metadata.reflection = VsensorFrotTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecimTimeSigTaskParams::kCMNFieldNumber;
const int DecimTimeSigTaskParams::kOnePartTimeSigLengthFieldNumber;
const int DecimTimeSigTaskParams::kForgetFsSrcFieldNumber;
#endif  // !_MSC_VER

DecimTimeSigTaskParams::DecimTimeSigTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.DecimTimeSigTaskParams)
}

void DecimTimeSigTaskParams::InitAsDefaultInstance() {
  cmn_ = const_cast< ::task_manager::CommonTaskParams*>(&::task_manager::CommonTaskParams::default_instance());
}

DecimTimeSigTaskParams::DecimTimeSigTaskParams(const DecimTimeSigTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.DecimTimeSigTaskParams)
}

void DecimTimeSigTaskParams::SharedCtor() {
  _cached_size_ = 0;
  cmn_ = NULL;
  oneparttimesiglength_ = 0u;
  forgetfssrc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecimTimeSigTaskParams::~DecimTimeSigTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.DecimTimeSigTaskParams)
  SharedDtor();
}

void DecimTimeSigTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete cmn_;
  }
}

void DecimTimeSigTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecimTimeSigTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecimTimeSigTaskParams_descriptor_;
}

const DecimTimeSigTaskParams& DecimTimeSigTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

DecimTimeSigTaskParams* DecimTimeSigTaskParams::default_instance_ = NULL;

DecimTimeSigTaskParams* DecimTimeSigTaskParams::New() const {
  return new DecimTimeSigTaskParams;
}

void DecimTimeSigTaskParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DecimTimeSigTaskParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(oneparttimesiglength_, forgetfssrc_);
    if (has_cmn()) {
      if (cmn_ != NULL) cmn_->::task_manager::CommonTaskParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecimTimeSigTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.DecimTimeSigTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .task_manager.CommonTaskParams CMN = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OnePartTimeSigLength;
        break;
      }

      // required uint32 OnePartTimeSigLength = 2;
      case 2: {
        if (tag == 16) {
         parse_OnePartTimeSigLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneparttimesiglength_)));
          set_has_oneparttimesiglength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ForgetFsSrc;
        break;
      }

      // required bool ForgetFsSrc = 3;
      case 3: {
        if (tag == 24) {
         parse_ForgetFsSrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forgetfssrc_)));
          set_has_forgetfssrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.DecimTimeSigTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.DecimTimeSigTaskParams)
  return false;
#undef DO_
}

void DecimTimeSigTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.DecimTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cmn(), output);
  }

  // required uint32 OnePartTimeSigLength = 2;
  if (has_oneparttimesiglength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oneparttimesiglength(), output);
  }

  // required bool ForgetFsSrc = 3;
  if (has_forgetfssrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forgetfssrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.DecimTimeSigTaskParams)
}

::google::protobuf::uint8* DecimTimeSigTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.DecimTimeSigTaskParams)
  // required .task_manager.CommonTaskParams CMN = 1;
  if (has_cmn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cmn(), target);
  }

  // required uint32 OnePartTimeSigLength = 2;
  if (has_oneparttimesiglength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oneparttimesiglength(), target);
  }

  // required bool ForgetFsSrc = 3;
  if (has_forgetfssrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forgetfssrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.DecimTimeSigTaskParams)
  return target;
}

int DecimTimeSigTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .task_manager.CommonTaskParams CMN = 1;
    if (has_cmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmn());
    }

    // required uint32 OnePartTimeSigLength = 2;
    if (has_oneparttimesiglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneparttimesiglength());
    }

    // required bool ForgetFsSrc = 3;
    if (has_forgetfssrc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecimTimeSigTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecimTimeSigTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecimTimeSigTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecimTimeSigTaskParams::MergeFrom(const DecimTimeSigTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmn()) {
      mutable_cmn()->::task_manager::CommonTaskParams::MergeFrom(from.cmn());
    }
    if (from.has_oneparttimesiglength()) {
      set_oneparttimesiglength(from.oneparttimesiglength());
    }
    if (from.has_forgetfssrc()) {
      set_forgetfssrc(from.forgetfssrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecimTimeSigTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecimTimeSigTaskParams::CopyFrom(const DecimTimeSigTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecimTimeSigTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cmn()) {
    if (!this->cmn().IsInitialized()) return false;
  }
  return true;
}

void DecimTimeSigTaskParams::Swap(DecimTimeSigTaskParams* other) {
  if (other != this) {
    std::swap(cmn_, other->cmn_);
    std::swap(oneparttimesiglength_, other->oneparttimesiglength_);
    std::swap(forgetfssrc_, other->forgetfssrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecimTimeSigTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecimTimeSigTaskParams_descriptor_;
  metadata.reflection = DecimTimeSigTaskParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnyTaskParams::kErrorCodeFieldNumber;
const int AnyTaskParams::kSpectParFieldNumber;
const int AnyTaskParams::kHarmonicParFieldNumber;
const int AnyTaskParams::kKurtosisParFieldNumber;
const int AnyTaskParams::kStattimesigParFieldNumber;
const int AnyTaskParams::kPlayerParFieldNumber;
const int AnyTaskParams::kVibegParFieldNumber;
const int AnyTaskParams::kQualityParFieldNumber;
const int AnyTaskParams::kSavetimesigParFieldNumber;
const int AnyTaskParams::kVsensorfrotParFieldNumber;
const int AnyTaskParams::kDecimParFieldNumber;
#endif  // !_MSC_VER

AnyTaskParams::AnyTaskParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:task_manager.AnyTaskParams)
}

void AnyTaskParams::InitAsDefaultInstance() {
  spect_par_ = const_cast< ::task_manager::SpectrTaskParams*>(&::task_manager::SpectrTaskParams::default_instance());
  harmonic_par_ = const_cast< ::task_manager::VharmonicTaskParams*>(&::task_manager::VharmonicTaskParams::default_instance());
  kurtosis_par_ = const_cast< ::task_manager::StatKurtosisTaskParams*>(&::task_manager::StatKurtosisTaskParams::default_instance());
  stattimesig_par_ = const_cast< ::task_manager::StatTimeSigTaskParams*>(&::task_manager::StatTimeSigTaskParams::default_instance());
  player_par_ = const_cast< ::task_manager::PlayerTimeSigTaskParams*>(&::task_manager::PlayerTimeSigTaskParams::default_instance());
  vibeg_par_ = const_cast< ::task_manager::VibegTaskParams*>(&::task_manager::VibegTaskParams::default_instance());
  quality_par_ = const_cast< ::task_manager::QualityTimeSigTaskParams*>(&::task_manager::QualityTimeSigTaskParams::default_instance());
  savetimesig_par_ = const_cast< ::task_manager::SaveTimeSigTaskParams*>(&::task_manager::SaveTimeSigTaskParams::default_instance());
  vsensorfrot_par_ = const_cast< ::task_manager::VsensorFrotTaskParams*>(&::task_manager::VsensorFrotTaskParams::default_instance());
  decim_par_ = const_cast< ::task_manager::DecimTimeSigTaskParams*>(&::task_manager::DecimTimeSigTaskParams::default_instance());
}

AnyTaskParams::AnyTaskParams(const AnyTaskParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:task_manager.AnyTaskParams)
}

void AnyTaskParams::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  spect_par_ = NULL;
  harmonic_par_ = NULL;
  kurtosis_par_ = NULL;
  stattimesig_par_ = NULL;
  player_par_ = NULL;
  vibeg_par_ = NULL;
  quality_par_ = NULL;
  savetimesig_par_ = NULL;
  vsensorfrot_par_ = NULL;
  decim_par_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnyTaskParams::~AnyTaskParams() {
  // @@protoc_insertion_point(destructor:task_manager.AnyTaskParams)
  SharedDtor();
}

void AnyTaskParams::SharedDtor() {
  if (this != default_instance_) {
    delete spect_par_;
    delete harmonic_par_;
    delete kurtosis_par_;
    delete stattimesig_par_;
    delete player_par_;
    delete vibeg_par_;
    delete quality_par_;
    delete savetimesig_par_;
    delete vsensorfrot_par_;
    delete decim_par_;
  }
}

void AnyTaskParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnyTaskParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnyTaskParams_descriptor_;
}

const AnyTaskParams& AnyTaskParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fmanager_2eproto();
  return *default_instance_;
}

AnyTaskParams* AnyTaskParams::default_instance_ = NULL;

AnyTaskParams* AnyTaskParams::New() const {
  return new AnyTaskParams;
}

void AnyTaskParams::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    error_code_ = 0;
    if (has_spect_par()) {
      if (spect_par_ != NULL) spect_par_->::task_manager::SpectrTaskParams::Clear();
    }
    if (has_harmonic_par()) {
      if (harmonic_par_ != NULL) harmonic_par_->::task_manager::VharmonicTaskParams::Clear();
    }
    if (has_kurtosis_par()) {
      if (kurtosis_par_ != NULL) kurtosis_par_->::task_manager::StatKurtosisTaskParams::Clear();
    }
    if (has_stattimesig_par()) {
      if (stattimesig_par_ != NULL) stattimesig_par_->::task_manager::StatTimeSigTaskParams::Clear();
    }
    if (has_player_par()) {
      if (player_par_ != NULL) player_par_->::task_manager::PlayerTimeSigTaskParams::Clear();
    }
    if (has_vibeg_par()) {
      if (vibeg_par_ != NULL) vibeg_par_->::task_manager::VibegTaskParams::Clear();
    }
    if (has_quality_par()) {
      if (quality_par_ != NULL) quality_par_->::task_manager::QualityTimeSigTaskParams::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_savetimesig_par()) {
      if (savetimesig_par_ != NULL) savetimesig_par_->::task_manager::SaveTimeSigTaskParams::Clear();
    }
    if (has_vsensorfrot_par()) {
      if (vsensorfrot_par_ != NULL) vsensorfrot_par_->::task_manager::VsensorFrotTaskParams::Clear();
    }
    if (has_decim_par()) {
      if (decim_par_ != NULL) decim_par_->::task_manager::DecimTimeSigTaskParams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnyTaskParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:task_manager.AnyTaskParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_spect_par;
        break;
      }

      // optional .task_manager.SpectrTaskParams spect_par = 2;
      case 2: {
        if (tag == 18) {
         parse_spect_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spect_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_harmonic_par;
        break;
      }

      // optional .task_manager.VharmonicTaskParams harmonic_par = 3;
      case 3: {
        if (tag == 26) {
         parse_harmonic_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_harmonic_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_kurtosis_par;
        break;
      }

      // optional .task_manager.StatKurtosisTaskParams kurtosis_par = 4;
      case 4: {
        if (tag == 34) {
         parse_kurtosis_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kurtosis_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stattimesig_par;
        break;
      }

      // optional .task_manager.StatTimeSigTaskParams stattimesig_par = 5;
      case 5: {
        if (tag == 42) {
         parse_stattimesig_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stattimesig_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_par;
        break;
      }

      // optional .task_manager.PlayerTimeSigTaskParams player_par = 6;
      case 6: {
        if (tag == 50) {
         parse_player_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vibeg_par;
        break;
      }

      // optional .task_manager.VibegTaskParams vibeg_par = 7;
      case 7: {
        if (tag == 58) {
         parse_vibeg_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vibeg_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_quality_par;
        break;
      }

      // optional .task_manager.QualityTimeSigTaskParams quality_par = 8;
      case 8: {
        if (tag == 66) {
         parse_quality_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_savetimesig_par;
        break;
      }

      // optional .task_manager.SaveTimeSigTaskParams savetimesig_par = 9;
      case 9: {
        if (tag == 74) {
         parse_savetimesig_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_savetimesig_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_vsensorfrot_par;
        break;
      }

      // optional .task_manager.VsensorFrotTaskParams vsensorfrot_par = 10;
      case 10: {
        if (tag == 82) {
         parse_vsensorfrot_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vsensorfrot_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_decim_par;
        break;
      }

      // optional .task_manager.DecimTimeSigTaskParams decim_par = 11;
      case 11: {
        if (tag == 90) {
         parse_decim_par:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decim_par()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:task_manager.AnyTaskParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:task_manager.AnyTaskParams)
  return false;
#undef DO_
}

void AnyTaskParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:task_manager.AnyTaskParams)
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .task_manager.SpectrTaskParams spect_par = 2;
  if (has_spect_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spect_par(), output);
  }

  // optional .task_manager.VharmonicTaskParams harmonic_par = 3;
  if (has_harmonic_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->harmonic_par(), output);
  }

  // optional .task_manager.StatKurtosisTaskParams kurtosis_par = 4;
  if (has_kurtosis_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kurtosis_par(), output);
  }

  // optional .task_manager.StatTimeSigTaskParams stattimesig_par = 5;
  if (has_stattimesig_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stattimesig_par(), output);
  }

  // optional .task_manager.PlayerTimeSigTaskParams player_par = 6;
  if (has_player_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player_par(), output);
  }

  // optional .task_manager.VibegTaskParams vibeg_par = 7;
  if (has_vibeg_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vibeg_par(), output);
  }

  // optional .task_manager.QualityTimeSigTaskParams quality_par = 8;
  if (has_quality_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->quality_par(), output);
  }

  // optional .task_manager.SaveTimeSigTaskParams savetimesig_par = 9;
  if (has_savetimesig_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->savetimesig_par(), output);
  }

  // optional .task_manager.VsensorFrotTaskParams vsensorfrot_par = 10;
  if (has_vsensorfrot_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vsensorfrot_par(), output);
  }

  // optional .task_manager.DecimTimeSigTaskParams decim_par = 11;
  if (has_decim_par()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->decim_par(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:task_manager.AnyTaskParams)
}

::google::protobuf::uint8* AnyTaskParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:task_manager.AnyTaskParams)
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .task_manager.SpectrTaskParams spect_par = 2;
  if (has_spect_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->spect_par(), target);
  }

  // optional .task_manager.VharmonicTaskParams harmonic_par = 3;
  if (has_harmonic_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->harmonic_par(), target);
  }

  // optional .task_manager.StatKurtosisTaskParams kurtosis_par = 4;
  if (has_kurtosis_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kurtosis_par(), target);
  }

  // optional .task_manager.StatTimeSigTaskParams stattimesig_par = 5;
  if (has_stattimesig_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stattimesig_par(), target);
  }

  // optional .task_manager.PlayerTimeSigTaskParams player_par = 6;
  if (has_player_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player_par(), target);
  }

  // optional .task_manager.VibegTaskParams vibeg_par = 7;
  if (has_vibeg_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vibeg_par(), target);
  }

  // optional .task_manager.QualityTimeSigTaskParams quality_par = 8;
  if (has_quality_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->quality_par(), target);
  }

  // optional .task_manager.SaveTimeSigTaskParams savetimesig_par = 9;
  if (has_savetimesig_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->savetimesig_par(), target);
  }

  // optional .task_manager.VsensorFrotTaskParams vsensorfrot_par = 10;
  if (has_vsensorfrot_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vsensorfrot_par(), target);
  }

  // optional .task_manager.DecimTimeSigTaskParams decim_par = 11;
  if (has_decim_par()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->decim_par(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:task_manager.AnyTaskParams)
  return target;
}

int AnyTaskParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .task_manager.SpectrTaskParams spect_par = 2;
    if (has_spect_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spect_par());
    }

    // optional .task_manager.VharmonicTaskParams harmonic_par = 3;
    if (has_harmonic_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->harmonic_par());
    }

    // optional .task_manager.StatKurtosisTaskParams kurtosis_par = 4;
    if (has_kurtosis_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kurtosis_par());
    }

    // optional .task_manager.StatTimeSigTaskParams stattimesig_par = 5;
    if (has_stattimesig_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stattimesig_par());
    }

    // optional .task_manager.PlayerTimeSigTaskParams player_par = 6;
    if (has_player_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_par());
    }

    // optional .task_manager.VibegTaskParams vibeg_par = 7;
    if (has_vibeg_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vibeg_par());
    }

    // optional .task_manager.QualityTimeSigTaskParams quality_par = 8;
    if (has_quality_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_par());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .task_manager.SaveTimeSigTaskParams savetimesig_par = 9;
    if (has_savetimesig_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->savetimesig_par());
    }

    // optional .task_manager.VsensorFrotTaskParams vsensorfrot_par = 10;
    if (has_vsensorfrot_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vsensorfrot_par());
    }

    // optional .task_manager.DecimTimeSigTaskParams decim_par = 11;
    if (has_decim_par()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decim_par());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnyTaskParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnyTaskParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnyTaskParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnyTaskParams::MergeFrom(const AnyTaskParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_spect_par()) {
      mutable_spect_par()->::task_manager::SpectrTaskParams::MergeFrom(from.spect_par());
    }
    if (from.has_harmonic_par()) {
      mutable_harmonic_par()->::task_manager::VharmonicTaskParams::MergeFrom(from.harmonic_par());
    }
    if (from.has_kurtosis_par()) {
      mutable_kurtosis_par()->::task_manager::StatKurtosisTaskParams::MergeFrom(from.kurtosis_par());
    }
    if (from.has_stattimesig_par()) {
      mutable_stattimesig_par()->::task_manager::StatTimeSigTaskParams::MergeFrom(from.stattimesig_par());
    }
    if (from.has_player_par()) {
      mutable_player_par()->::task_manager::PlayerTimeSigTaskParams::MergeFrom(from.player_par());
    }
    if (from.has_vibeg_par()) {
      mutable_vibeg_par()->::task_manager::VibegTaskParams::MergeFrom(from.vibeg_par());
    }
    if (from.has_quality_par()) {
      mutable_quality_par()->::task_manager::QualityTimeSigTaskParams::MergeFrom(from.quality_par());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_savetimesig_par()) {
      mutable_savetimesig_par()->::task_manager::SaveTimeSigTaskParams::MergeFrom(from.savetimesig_par());
    }
    if (from.has_vsensorfrot_par()) {
      mutable_vsensorfrot_par()->::task_manager::VsensorFrotTaskParams::MergeFrom(from.vsensorfrot_par());
    }
    if (from.has_decim_par()) {
      mutable_decim_par()->::task_manager::DecimTimeSigTaskParams::MergeFrom(from.decim_par());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnyTaskParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyTaskParams::CopyFrom(const AnyTaskParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyTaskParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_spect_par()) {
    if (!this->spect_par().IsInitialized()) return false;
  }
  if (has_harmonic_par()) {
    if (!this->harmonic_par().IsInitialized()) return false;
  }
  if (has_kurtosis_par()) {
    if (!this->kurtosis_par().IsInitialized()) return false;
  }
  if (has_stattimesig_par()) {
    if (!this->stattimesig_par().IsInitialized()) return false;
  }
  if (has_player_par()) {
    if (!this->player_par().IsInitialized()) return false;
  }
  if (has_vibeg_par()) {
    if (!this->vibeg_par().IsInitialized()) return false;
  }
  if (has_quality_par()) {
    if (!this->quality_par().IsInitialized()) return false;
  }
  if (has_savetimesig_par()) {
    if (!this->savetimesig_par().IsInitialized()) return false;
  }
  if (has_vsensorfrot_par()) {
    if (!this->vsensorfrot_par().IsInitialized()) return false;
  }
  if (has_decim_par()) {
    if (!this->decim_par().IsInitialized()) return false;
  }
  return true;
}

void AnyTaskParams::Swap(AnyTaskParams* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(spect_par_, other->spect_par_);
    std::swap(harmonic_par_, other->harmonic_par_);
    std::swap(kurtosis_par_, other->kurtosis_par_);
    std::swap(stattimesig_par_, other->stattimesig_par_);
    std::swap(player_par_, other->player_par_);
    std::swap(vibeg_par_, other->vibeg_par_);
    std::swap(quality_par_, other->quality_par_);
    std::swap(savetimesig_par_, other->savetimesig_par_);
    std::swap(vsensorfrot_par_, other->vsensorfrot_par_);
    std::swap(decim_par_, other->decim_par_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnyTaskParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnyTaskParams_descriptor_;
  metadata.reflection = AnyTaskParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace task_manager

// @@protoc_insertion_point(global_scope)
