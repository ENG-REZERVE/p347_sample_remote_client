// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace channel_manager {

namespace {

const ::google::protobuf::Descriptor* DriverTimings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DriverTimings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCTimeOffsets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCTimeOffsets_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvailableChannels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvailableChannels_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiplexerInitParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiplexerInitParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelManagerInitParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelManagerInitParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADCChannelInitParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADCChannelInitParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynctaskChannels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynctaskChannels_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotChannelInitParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotChannelInitParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_5fmanager_2eproto() {
  protobuf_AddDesc_channel_5fmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel_manager.proto");
  GOOGLE_CHECK(file != NULL);
  DriverTimings_descriptor_ = file->message_type(0);
  static const int DriverTimings_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, rot_run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, adc_set_params1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, adc_set_params2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, adc_set_params3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, adc_run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, adc_run_sync_),
  };
  DriverTimings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DriverTimings_descriptor_,
      DriverTimings::default_instance_,
      DriverTimings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DriverTimings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DriverTimings));
  ADCTimeOffsets_descriptor_ = file->message_type(1);
  static const int ADCTimeOffsets_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTimeOffsets, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTimeOffsets, error_code_),
  };
  ADCTimeOffsets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADCTimeOffsets_descriptor_,
      ADCTimeOffsets::default_instance_,
      ADCTimeOffsets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTimeOffsets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCTimeOffsets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADCTimeOffsets));
  AvailableChannels_descriptor_ = file->message_type(2);
  static const int AvailableChannels_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableChannels, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableChannels, channel_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableChannels, rot_idx_),
  };
  AvailableChannels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvailableChannels_descriptor_,
      AvailableChannels::default_instance_,
      AvailableChannels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableChannels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableChannels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvailableChannels));
  MultiplexerInitParams_descriptor_ = file->message_type(3);
  static const int MultiplexerInitParams_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerInitParams, dev_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerInitParams, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerInitParams, params_),
  };
  MultiplexerInitParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiplexerInitParams_descriptor_,
      MultiplexerInitParams::default_instance_,
      MultiplexerInitParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerInitParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiplexerInitParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiplexerInitParams));
  ServerVersion_descriptor_ = file->message_type(4);
  static const int ServerVersion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, build_),
  };
  ServerVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerVersion_descriptor_,
      ServerVersion::default_instance_,
      ServerVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerVersion));
  ChannelManagerInitParams_descriptor_ = file->message_type(5);
  static const int ChannelManagerInitParams_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, log_level_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, log_level_console_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, log_level_daemon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, dsph_level_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, dsph_level_console_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, dsph_level_daemon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, base_timing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, drv_buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, usr_proc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, spi_speed_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, main_sleep_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, idle_sleep_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, daemon_ipc_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, daemon_ipc_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, reset_at_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, chan_level_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, chan_level_console_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, chan_level_daemon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, driver_timings_),
  };
  ChannelManagerInitParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelManagerInitParams_descriptor_,
      ChannelManagerInitParams::default_instance_,
      ChannelManagerInitParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerInitParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelManagerInitParams));
  ADCParams_descriptor_ = file->message_type(6);
  static const int ADCParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, control1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, control2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, overrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, ch_settings_),
  };
  ADCParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADCParams_descriptor_,
      ADCParams::default_instance_,
      ADCParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADCParams));
  ADCChannelInitParams_descriptor_ = file->message_type(7);
  static const int ADCChannelInitParams_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, ch_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, rot_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, drv_buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, usr_proc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, usr_proc_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, sen_filter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, ap_),
  };
  ADCChannelInitParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADCChannelInitParams_descriptor_,
      ADCChannelInitParams::default_instance_,
      ADCChannelInitParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADCChannelInitParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADCChannelInitParams));
  SynctaskChannels_descriptor_ = file->message_type(8);
  static const int SynctaskChannels_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynctaskChannels, adc_ch_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynctaskChannels, adc_ch_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynctaskChannels, sync_reg_),
  };
  SynctaskChannels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynctaskChannels_descriptor_,
      SynctaskChannels::default_instance_,
      SynctaskChannels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynctaskChannels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynctaskChannels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynctaskChannels));
  RotChannelInitParams_descriptor_ = file->message_type(9);
  static const int RotChannelInitParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, rot_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, av_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, pw_min_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, period_min_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, period_max_us_),
  };
  RotChannelInitParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotChannelInitParams_descriptor_,
      RotChannelInitParams::default_instance_,
      RotChannelInitParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotChannelInitParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotChannelInitParams));
  RotData_descriptor_ = file->message_type(10);
  static const int RotData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, avr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, freq_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, freq_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, freq_avr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, overhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, underlow_),
  };
  RotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotData_descriptor_,
      RotData::default_instance_,
      RotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_5fmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DriverTimings_descriptor_, &DriverTimings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADCTimeOffsets_descriptor_, &ADCTimeOffsets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvailableChannels_descriptor_, &AvailableChannels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiplexerInitParams_descriptor_, &MultiplexerInitParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerVersion_descriptor_, &ServerVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelManagerInitParams_descriptor_, &ChannelManagerInitParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADCParams_descriptor_, &ADCParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADCChannelInitParams_descriptor_, &ADCChannelInitParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynctaskChannels_descriptor_, &SynctaskChannels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotChannelInitParams_descriptor_, &RotChannelInitParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotData_descriptor_, &RotData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_5fmanager_2eproto() {
  delete DriverTimings::default_instance_;
  delete DriverTimings_reflection_;
  delete ADCTimeOffsets::default_instance_;
  delete ADCTimeOffsets_reflection_;
  delete AvailableChannels::default_instance_;
  delete AvailableChannels_reflection_;
  delete MultiplexerInitParams::default_instance_;
  delete MultiplexerInitParams_reflection_;
  delete MultiplexerInitParams::_default_params_;
  delete ServerVersion::default_instance_;
  delete ServerVersion_reflection_;
  delete ChannelManagerInitParams::default_instance_;
  delete ChannelManagerInitParams_reflection_;
  delete ChannelManagerInitParams::_default_daemon_ipc_path_;
  delete ADCParams::default_instance_;
  delete ADCParams_reflection_;
  delete ADCChannelInitParams::default_instance_;
  delete ADCChannelInitParams_reflection_;
  delete SynctaskChannels::default_instance_;
  delete SynctaskChannels_reflection_;
  delete RotChannelInitParams::default_instance_;
  delete RotChannelInitParams_reflection_;
  delete RotData::default_instance_;
  delete RotData_reflection_;
}

void protobuf_AddDesc_channel_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025channel_manager.proto\022\017channel_manager"
    "\"\261\001\n\rDriverTimings\022\025\n\007rot_run\030\001 \002(\r:\004100"
    "0\022\034\n\017adc_set_params1\030\002 \002(\r:\003500\022\034\n\017adc_s"
    "et_params2\030\003 \002(\r:\003100\022\034\n\017adc_set_params3"
    "\030\004 \002(\r:\003100\022\024\n\007adc_run\030\005 \002(\r:\003100\022\031\n\014adc"
    "_run_sync\030\006 \002(\r:\003100\"7\n\016ADCTimeOffsets\022\016"
    "\n\006offset\030\001 \003(\r\022\025\n\nerror_code\030\002 \002(\021:\0010\"M\n"
    "\021AvailableChannels\022\022\n\nerror_code\030\001 \002(\021\022\023"
    "\n\013channel_idx\030\002 \003(\r\022\017\n\007rot_idx\030\003 \003(\r\"M\n\025"
    "MultiplexerInitParams\022\020\n\010dev_name\030\001 \002(\t\022"
    "\r\n\005speed\030\002 \002(\r\022\023\n\006params\030\003 \002(\t:\0038N1\"P\n\rS"
    "erverVersion\022\022\n\nerror_code\030\001 \002(\021\022\r\n\005majo"
    "r\030\002 \002(\r\022\r\n\005minor\030\003 \002(\r\022\r\n\005build\030\004 \002(\t\"\346\004"
    "\n\030ChannelManagerInitParams\022\031\n\016log_level_"
    "file\030\001 \002(\r:\0010\022\034\n\021log_level_console\030\002 \002(\r"
    ":\0011\022\033\n\020log_level_daemon\030\003 \002(\r:\0010\022\032\n\017dsph"
    "_level_file\030\004 \002(\r:\0010\022\035\n\022dsph_level_conso"
    "le\030\005 \002(\r:\0011\022\034\n\021dsph_level_daemon\030\006 \002(\r:\001"
    "0\022\031\n\013base_timing\030\007 \002(\r:\0041000\022\033\n\014drv_buf_"
    "size\030\010 \002(\r:\00532768\022\033\n\014usr_proc_len\030\t \002(\r:"
    "\00532768\022\033\n\014spi_speed_hz\030\n \002(\r:\00593750\022\032\n\rm"
    "ain_sleep_us\030\013 \002(\r:\003500\022\033\n\ridle_sleep_us"
    "\030\014 \002(\r:\0041000\022#\n\017daemon_ipc_path\030\r \002(\t:\n/"
    "mnt/share\022\032\n\016daemon_ipc_key\030\016 \002(\r:\00245\022\033\n"
    "\rreset_at_open\030\017 \002(\010:\004true\022\033\n\017chan_level"
    "_file\030\020 \003(\rB\002\020\001\022\036\n\022chan_level_console\030\021 "
    "\003(\rB\002\020\001\022\035\n\021chan_level_daemon\030\022 \003(\rB\002\020\001\0226"
    "\n\016driver_timings\030\023 \002(\0132\036.channel_manager"
    ".DriverTimings\"u\n\tADCParams\022\020\n\010control1\030"
    "\001 \002(\r\022\020\n\010control2\030\002 \002(\r\022\016\n\006offset\030\003 \002(\r\022"
    "\014\n\004gain\030\004 \002(\r\022\021\n\toverrange\030\005 \002(\r\022\023\n\013ch_s"
    "ettings\030\006 \002(\r\"\322\001\n\024ADCChannelInitParams\022\021"
    "\n\006ch_idx\030\001 \002(\r:\0010\022\022\n\007rot_idx\030\002 \002(\r:\0010\022\033\n"
    "\014drv_buf_size\030\003 \001(\r:\00532768\022\033\n\014usr_proc_l"
    "en\030\004 \001(\r:\00532768\022\027\n\014usr_proc_cnt\030\005 \001(\r:\0010"
    "\022\030\n\rsen_filter_id\030\006 \001(\r:\0010\022&\n\002ap\030\007 \001(\0132\032"
    ".channel_manager.ADCParams\"O\n\020SynctaskCh"
    "annels\022\025\n\nadc_ch_cnt\030\001 \002(\r:\0010\022\022\n\nadc_ch_"
    "idx\030\002 \003(\r\022\020\n\010sync_reg\030\003 \001(\r\"\221\001\n\024RotChann"
    "elInitParams\022\022\n\007rot_idx\030\001 \002(\r:\0010\022\021\n\006av_n"
    "um\030\002 \001(\r:\0011\022\025\n\tpw_min_us\030\003 \001(\r:\00225\022\033\n\rpe"
    "riod_min_us\030\004 \001(\r:\0048333\022\036\n\rperiod_max_us"
    "\030\005 \001(\r:\0071000000\"\361\001\n\007RotData\022\025\n\nerror_cod"
    "e\030\001 \002(\021:\0010\022\026\n\007running\030\002 \001(\010:\005false\022\016\n\003po"
    "s\030\003 \001(\r:\0010\022\013\n\003min\030\004 \001(\r\022\013\n\003max\030\005 \001(\r\022\013\n\003"
    "avr\030\006 \001(\r\022\013\n\003sum\030\007 \001(\001\022\013\n\003cnt\030\010 \001(\r\022\020\n\010f"
    "req_min\030\t \001(\001\022\020\n\010freq_max\030\n \001(\001\022\020\n\010freq_"
    "avr\030\013 \001(\001\022\027\n\010overhigh\030\014 \001(\010:\005false\022\027\n\010un"
    "derlow\030\r \001(\010:\005false", 1939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel_manager.proto", &protobuf_RegisterTypes);
  DriverTimings::default_instance_ = new DriverTimings();
  ADCTimeOffsets::default_instance_ = new ADCTimeOffsets();
  AvailableChannels::default_instance_ = new AvailableChannels();
  MultiplexerInitParams::_default_params_ =
      new ::std::string("8N1", 3);
  MultiplexerInitParams::default_instance_ = new MultiplexerInitParams();
  ServerVersion::default_instance_ = new ServerVersion();
  ChannelManagerInitParams::_default_daemon_ipc_path_ =
      new ::std::string("/mnt/share", 10);
  ChannelManagerInitParams::default_instance_ = new ChannelManagerInitParams();
  ADCParams::default_instance_ = new ADCParams();
  ADCChannelInitParams::default_instance_ = new ADCChannelInitParams();
  SynctaskChannels::default_instance_ = new SynctaskChannels();
  RotChannelInitParams::default_instance_ = new RotChannelInitParams();
  RotData::default_instance_ = new RotData();
  DriverTimings::default_instance_->InitAsDefaultInstance();
  ADCTimeOffsets::default_instance_->InitAsDefaultInstance();
  AvailableChannels::default_instance_->InitAsDefaultInstance();
  MultiplexerInitParams::default_instance_->InitAsDefaultInstance();
  ServerVersion::default_instance_->InitAsDefaultInstance();
  ChannelManagerInitParams::default_instance_->InitAsDefaultInstance();
  ADCParams::default_instance_->InitAsDefaultInstance();
  ADCChannelInitParams::default_instance_->InitAsDefaultInstance();
  SynctaskChannels::default_instance_->InitAsDefaultInstance();
  RotChannelInitParams::default_instance_->InitAsDefaultInstance();
  RotData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_5fmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_5fmanager_2eproto {
  StaticDescriptorInitializer_channel_5fmanager_2eproto() {
    protobuf_AddDesc_channel_5fmanager_2eproto();
  }
} static_descriptor_initializer_channel_5fmanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DriverTimings::kRotRunFieldNumber;
const int DriverTimings::kAdcSetParams1FieldNumber;
const int DriverTimings::kAdcSetParams2FieldNumber;
const int DriverTimings::kAdcSetParams3FieldNumber;
const int DriverTimings::kAdcRunFieldNumber;
const int DriverTimings::kAdcRunSyncFieldNumber;
#endif  // !_MSC_VER

DriverTimings::DriverTimings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.DriverTimings)
}

void DriverTimings::InitAsDefaultInstance() {
}

DriverTimings::DriverTimings(const DriverTimings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.DriverTimings)
}

void DriverTimings::SharedCtor() {
  _cached_size_ = 0;
  rot_run_ = 1000u;
  adc_set_params1_ = 500u;
  adc_set_params2_ = 100u;
  adc_set_params3_ = 100u;
  adc_run_ = 100u;
  adc_run_sync_ = 100u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DriverTimings::~DriverTimings() {
  // @@protoc_insertion_point(destructor:channel_manager.DriverTimings)
  SharedDtor();
}

void DriverTimings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DriverTimings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DriverTimings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DriverTimings_descriptor_;
}

const DriverTimings& DriverTimings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

DriverTimings* DriverTimings::default_instance_ = NULL;

DriverTimings* DriverTimings::New() const {
  return new DriverTimings;
}

void DriverTimings::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    rot_run_ = 1000u;
    adc_set_params1_ = 500u;
    adc_set_params2_ = 100u;
    adc_set_params3_ = 100u;
    adc_run_ = 100u;
    adc_run_sync_ = 100u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DriverTimings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.DriverTimings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rot_run = 1 [default = 1000];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rot_run_)));
          set_has_rot_run();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adc_set_params1;
        break;
      }

      // required uint32 adc_set_params1 = 2 [default = 500];
      case 2: {
        if (tag == 16) {
         parse_adc_set_params1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_set_params1_)));
          set_has_adc_set_params1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adc_set_params2;
        break;
      }

      // required uint32 adc_set_params2 = 3 [default = 100];
      case 3: {
        if (tag == 24) {
         parse_adc_set_params2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_set_params2_)));
          set_has_adc_set_params2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_adc_set_params3;
        break;
      }

      // required uint32 adc_set_params3 = 4 [default = 100];
      case 4: {
        if (tag == 32) {
         parse_adc_set_params3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_set_params3_)));
          set_has_adc_set_params3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adc_run;
        break;
      }

      // required uint32 adc_run = 5 [default = 100];
      case 5: {
        if (tag == 40) {
         parse_adc_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_run_)));
          set_has_adc_run();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_adc_run_sync;
        break;
      }

      // required uint32 adc_run_sync = 6 [default = 100];
      case 6: {
        if (tag == 48) {
         parse_adc_run_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_run_sync_)));
          set_has_adc_run_sync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.DriverTimings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.DriverTimings)
  return false;
#undef DO_
}

void DriverTimings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.DriverTimings)
  // required uint32 rot_run = 1 [default = 1000];
  if (has_rot_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rot_run(), output);
  }

  // required uint32 adc_set_params1 = 2 [default = 500];
  if (has_adc_set_params1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->adc_set_params1(), output);
  }

  // required uint32 adc_set_params2 = 3 [default = 100];
  if (has_adc_set_params2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adc_set_params2(), output);
  }

  // required uint32 adc_set_params3 = 4 [default = 100];
  if (has_adc_set_params3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->adc_set_params3(), output);
  }

  // required uint32 adc_run = 5 [default = 100];
  if (has_adc_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adc_run(), output);
  }

  // required uint32 adc_run_sync = 6 [default = 100];
  if (has_adc_run_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->adc_run_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.DriverTimings)
}

::google::protobuf::uint8* DriverTimings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.DriverTimings)
  // required uint32 rot_run = 1 [default = 1000];
  if (has_rot_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rot_run(), target);
  }

  // required uint32 adc_set_params1 = 2 [default = 500];
  if (has_adc_set_params1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->adc_set_params1(), target);
  }

  // required uint32 adc_set_params2 = 3 [default = 100];
  if (has_adc_set_params2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adc_set_params2(), target);
  }

  // required uint32 adc_set_params3 = 4 [default = 100];
  if (has_adc_set_params3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->adc_set_params3(), target);
  }

  // required uint32 adc_run = 5 [default = 100];
  if (has_adc_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->adc_run(), target);
  }

  // required uint32 adc_run_sync = 6 [default = 100];
  if (has_adc_run_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->adc_run_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.DriverTimings)
  return target;
}

int DriverTimings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rot_run = 1 [default = 1000];
    if (has_rot_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rot_run());
    }

    // required uint32 adc_set_params1 = 2 [default = 500];
    if (has_adc_set_params1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc_set_params1());
    }

    // required uint32 adc_set_params2 = 3 [default = 100];
    if (has_adc_set_params2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc_set_params2());
    }

    // required uint32 adc_set_params3 = 4 [default = 100];
    if (has_adc_set_params3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc_set_params3());
    }

    // required uint32 adc_run = 5 [default = 100];
    if (has_adc_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc_run());
    }

    // required uint32 adc_run_sync = 6 [default = 100];
    if (has_adc_run_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc_run_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriverTimings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DriverTimings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DriverTimings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DriverTimings::MergeFrom(const DriverTimings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rot_run()) {
      set_rot_run(from.rot_run());
    }
    if (from.has_adc_set_params1()) {
      set_adc_set_params1(from.adc_set_params1());
    }
    if (from.has_adc_set_params2()) {
      set_adc_set_params2(from.adc_set_params2());
    }
    if (from.has_adc_set_params3()) {
      set_adc_set_params3(from.adc_set_params3());
    }
    if (from.has_adc_run()) {
      set_adc_run(from.adc_run());
    }
    if (from.has_adc_run_sync()) {
      set_adc_run_sync(from.adc_run_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DriverTimings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DriverTimings::CopyFrom(const DriverTimings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriverTimings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DriverTimings::Swap(DriverTimings* other) {
  if (other != this) {
    std::swap(rot_run_, other->rot_run_);
    std::swap(adc_set_params1_, other->adc_set_params1_);
    std::swap(adc_set_params2_, other->adc_set_params2_);
    std::swap(adc_set_params3_, other->adc_set_params3_);
    std::swap(adc_run_, other->adc_run_);
    std::swap(adc_run_sync_, other->adc_run_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DriverTimings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DriverTimings_descriptor_;
  metadata.reflection = DriverTimings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADCTimeOffsets::kOffsetFieldNumber;
const int ADCTimeOffsets::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ADCTimeOffsets::ADCTimeOffsets()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.ADCTimeOffsets)
}

void ADCTimeOffsets::InitAsDefaultInstance() {
}

ADCTimeOffsets::ADCTimeOffsets(const ADCTimeOffsets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.ADCTimeOffsets)
}

void ADCTimeOffsets::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCTimeOffsets::~ADCTimeOffsets() {
  // @@protoc_insertion_point(destructor:channel_manager.ADCTimeOffsets)
  SharedDtor();
}

void ADCTimeOffsets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCTimeOffsets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTimeOffsets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCTimeOffsets_descriptor_;
}

const ADCTimeOffsets& ADCTimeOffsets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

ADCTimeOffsets* ADCTimeOffsets::default_instance_ = NULL;

ADCTimeOffsets* ADCTimeOffsets::New() const {
  return new ADCTimeOffsets;
}

void ADCTimeOffsets::Clear() {
  error_code_ = 0;
  offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADCTimeOffsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.ADCTimeOffsets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 offset = 1;
      case 1: {
        if (tag == 8) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_offset())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_offset())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_offset;
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required sint32 error_code = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.ADCTimeOffsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.ADCTimeOffsets)
  return false;
#undef DO_
}

void ADCTimeOffsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.ADCTimeOffsets)
  // repeated uint32 offset = 1;
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->offset(i), output);
  }

  // required sint32 error_code = 2 [default = 0];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.ADCTimeOffsets)
}

::google::protobuf::uint8* ADCTimeOffsets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.ADCTimeOffsets)
  // repeated uint32 offset = 1;
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->offset(i), target);
  }

  // required sint32 error_code = 2 [default = 0];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.ADCTimeOffsets)
  return target;
}

int ADCTimeOffsets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required sint32 error_code = 2 [default = 0];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

  }
  // repeated uint32 offset = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->offset_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->offset(i));
    }
    total_size += 1 * this->offset_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTimeOffsets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADCTimeOffsets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADCTimeOffsets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADCTimeOffsets::MergeFrom(const ADCTimeOffsets& from) {
  GOOGLE_CHECK_NE(&from, this);
  offset_.MergeFrom(from.offset_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADCTimeOffsets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTimeOffsets::CopyFrom(const ADCTimeOffsets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTimeOffsets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ADCTimeOffsets::Swap(ADCTimeOffsets* other) {
  if (other != this) {
    offset_.Swap(&other->offset_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADCTimeOffsets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCTimeOffsets_descriptor_;
  metadata.reflection = ADCTimeOffsets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvailableChannels::kErrorCodeFieldNumber;
const int AvailableChannels::kChannelIdxFieldNumber;
const int AvailableChannels::kRotIdxFieldNumber;
#endif  // !_MSC_VER

AvailableChannels::AvailableChannels()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.AvailableChannels)
}

void AvailableChannels::InitAsDefaultInstance() {
}

AvailableChannels::AvailableChannels(const AvailableChannels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.AvailableChannels)
}

void AvailableChannels::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvailableChannels::~AvailableChannels() {
  // @@protoc_insertion_point(destructor:channel_manager.AvailableChannels)
  SharedDtor();
}

void AvailableChannels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvailableChannels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvailableChannels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvailableChannels_descriptor_;
}

const AvailableChannels& AvailableChannels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

AvailableChannels* AvailableChannels::default_instance_ = NULL;

AvailableChannels* AvailableChannels::New() const {
  return new AvailableChannels;
}

void AvailableChannels::Clear() {
  error_code_ = 0;
  channel_idx_.Clear();
  rot_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvailableChannels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.AvailableChannels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_idx;
        break;
      }

      // repeated uint32 channel_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_channel_idx())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channel_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_idx;
        if (input->ExpectTag(24)) goto parse_rot_idx;
        break;
      }

      // repeated uint32 rot_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_rot_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rot_idx())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rot_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rot_idx;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.AvailableChannels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.AvailableChannels)
  return false;
#undef DO_
}

void AvailableChannels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.AvailableChannels)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // repeated uint32 channel_idx = 2;
  for (int i = 0; i < this->channel_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->channel_idx(i), output);
  }

  // repeated uint32 rot_idx = 3;
  for (int i = 0; i < this->rot_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rot_idx(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.AvailableChannels)
}

::google::protobuf::uint8* AvailableChannels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.AvailableChannels)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // repeated uint32 channel_idx = 2;
  for (int i = 0; i < this->channel_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->channel_idx(i), target);
  }

  // repeated uint32 rot_idx = 3;
  for (int i = 0; i < this->rot_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rot_idx(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.AvailableChannels)
  return target;
}

int AvailableChannels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

  }
  // repeated uint32 channel_idx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channel_idx(i));
    }
    total_size += 1 * this->channel_idx_size() + data_size;
  }

  // repeated uint32 rot_idx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rot_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rot_idx(i));
    }
    total_size += 1 * this->rot_idx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvailableChannels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvailableChannels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvailableChannels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvailableChannels::MergeFrom(const AvailableChannels& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_idx_.MergeFrom(from.channel_idx_);
  rot_idx_.MergeFrom(from.rot_idx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvailableChannels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvailableChannels::CopyFrom(const AvailableChannels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableChannels::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AvailableChannels::Swap(AvailableChannels* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    channel_idx_.Swap(&other->channel_idx_);
    rot_idx_.Swap(&other->rot_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvailableChannels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvailableChannels_descriptor_;
  metadata.reflection = AvailableChannels_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MultiplexerInitParams::_default_params_ = NULL;
#ifndef _MSC_VER
const int MultiplexerInitParams::kDevNameFieldNumber;
const int MultiplexerInitParams::kSpeedFieldNumber;
const int MultiplexerInitParams::kParamsFieldNumber;
#endif  // !_MSC_VER

MultiplexerInitParams::MultiplexerInitParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.MultiplexerInitParams)
}

void MultiplexerInitParams::InitAsDefaultInstance() {
}

MultiplexerInitParams::MultiplexerInitParams(const MultiplexerInitParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.MultiplexerInitParams)
}

void MultiplexerInitParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dev_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_ = 0u;
  params_ = const_cast< ::std::string*>(_default_params_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiplexerInitParams::~MultiplexerInitParams() {
  // @@protoc_insertion_point(destructor:channel_manager.MultiplexerInitParams)
  SharedDtor();
}

void MultiplexerInitParams::SharedDtor() {
  if (dev_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dev_name_;
  }
  if (params_ != _default_params_) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void MultiplexerInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiplexerInitParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiplexerInitParams_descriptor_;
}

const MultiplexerInitParams& MultiplexerInitParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

MultiplexerInitParams* MultiplexerInitParams::default_instance_ = NULL;

MultiplexerInitParams* MultiplexerInitParams::New() const {
  return new MultiplexerInitParams;
}

void MultiplexerInitParams::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_dev_name()) {
      if (dev_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dev_name_->clear();
      }
    }
    speed_ = 0u;
    if (has_params()) {
      if (params_ != _default_params_) {
        params_->assign(*_default_params_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiplexerInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.MultiplexerInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dev_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dev_name().data(), this->dev_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dev_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }

      // required uint32 speed = 2;
      case 2: {
        if (tag == 16) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required string params = 3 [default = "8N1"];
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.MultiplexerInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.MultiplexerInitParams)
  return false;
#undef DO_
}

void MultiplexerInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.MultiplexerInitParams)
  // required string dev_name = 1;
  if (has_dev_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dev_name().data(), this->dev_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dev_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dev_name(), output);
  }

  // required uint32 speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->speed(), output);
  }

  // required string params = 3 [default = "8N1"];
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.MultiplexerInitParams)
}

::google::protobuf::uint8* MultiplexerInitParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.MultiplexerInitParams)
  // required string dev_name = 1;
  if (has_dev_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dev_name().data(), this->dev_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dev_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dev_name(), target);
  }

  // required uint32 speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->speed(), target);
  }

  // required string params = 3 [default = "8N1"];
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.MultiplexerInitParams)
  return target;
}

int MultiplexerInitParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dev_name = 1;
    if (has_dev_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dev_name());
    }

    // required uint32 speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required string params = 3 [default = "8N1"];
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiplexerInitParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiplexerInitParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiplexerInitParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiplexerInitParams::MergeFrom(const MultiplexerInitParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dev_name()) {
      set_dev_name(from.dev_name());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiplexerInitParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiplexerInitParams::CopyFrom(const MultiplexerInitParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiplexerInitParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MultiplexerInitParams::Swap(MultiplexerInitParams* other) {
  if (other != this) {
    std::swap(dev_name_, other->dev_name_);
    std::swap(speed_, other->speed_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiplexerInitParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiplexerInitParams_descriptor_;
  metadata.reflection = MultiplexerInitParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerVersion::kErrorCodeFieldNumber;
const int ServerVersion::kMajorFieldNumber;
const int ServerVersion::kMinorFieldNumber;
const int ServerVersion::kBuildFieldNumber;
#endif  // !_MSC_VER

ServerVersion::ServerVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.ServerVersion)
}

void ServerVersion::InitAsDefaultInstance() {
}

ServerVersion::ServerVersion(const ServerVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.ServerVersion)
}

void ServerVersion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  major_ = 0u;
  minor_ = 0u;
  build_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerVersion::~ServerVersion() {
  // @@protoc_insertion_point(destructor:channel_manager.ServerVersion)
  SharedDtor();
}

void ServerVersion::SharedDtor() {
  if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_;
  }
  if (this != default_instance_) {
  }
}

void ServerVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerVersion_descriptor_;
}

const ServerVersion& ServerVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

ServerVersion* ServerVersion::default_instance_ = NULL;

ServerVersion* ServerVersion::New() const {
  return new ServerVersion;
}

void ServerVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(error_code_, major_);
    minor_ = 0u;
    if (has_build()) {
      if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        build_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.ServerVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_major;
        break;
      }

      // required uint32 major = 2;
      case 2: {
        if (tag == 16) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minor;
        break;
      }

      // required uint32 minor = 3;
      case 3: {
        if (tag == 24) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_build;
        break;
      }

      // required string build = 4;
      case 4: {
        if (tag == 34) {
         parse_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->build().data(), this->build().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "build");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.ServerVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.ServerVersion)
  return false;
#undef DO_
}

void ServerVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.ServerVersion)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // required uint32 major = 2;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->major(), output);
  }

  // required uint32 minor = 3;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minor(), output);
  }

  // required string build = 4;
  if (has_build()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build().data(), this->build().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->build(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.ServerVersion)
}

::google::protobuf::uint8* ServerVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.ServerVersion)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // required uint32 major = 2;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->major(), target);
  }

  // required uint32 minor = 3;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minor(), target);
  }

  // required string build = 4;
  if (has_build()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build().data(), this->build().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->build(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.ServerVersion)
  return target;
}

int ServerVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // required uint32 major = 2;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }

    // required uint32 minor = 3;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

    // required string build = 4;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerVersion::MergeFrom(const ServerVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_build()) {
      set_build(from.build());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerVersion::CopyFrom(const ServerVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerVersion::Swap(ServerVersion* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(build_, other->build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerVersion_descriptor_;
  metadata.reflection = ServerVersion_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ChannelManagerInitParams::_default_daemon_ipc_path_ = NULL;
#ifndef _MSC_VER
const int ChannelManagerInitParams::kLogLevelFileFieldNumber;
const int ChannelManagerInitParams::kLogLevelConsoleFieldNumber;
const int ChannelManagerInitParams::kLogLevelDaemonFieldNumber;
const int ChannelManagerInitParams::kDsphLevelFileFieldNumber;
const int ChannelManagerInitParams::kDsphLevelConsoleFieldNumber;
const int ChannelManagerInitParams::kDsphLevelDaemonFieldNumber;
const int ChannelManagerInitParams::kBaseTimingFieldNumber;
const int ChannelManagerInitParams::kDrvBufSizeFieldNumber;
const int ChannelManagerInitParams::kUsrProcLenFieldNumber;
const int ChannelManagerInitParams::kSpiSpeedHzFieldNumber;
const int ChannelManagerInitParams::kMainSleepUsFieldNumber;
const int ChannelManagerInitParams::kIdleSleepUsFieldNumber;
const int ChannelManagerInitParams::kDaemonIpcPathFieldNumber;
const int ChannelManagerInitParams::kDaemonIpcKeyFieldNumber;
const int ChannelManagerInitParams::kResetAtOpenFieldNumber;
const int ChannelManagerInitParams::kChanLevelFileFieldNumber;
const int ChannelManagerInitParams::kChanLevelConsoleFieldNumber;
const int ChannelManagerInitParams::kChanLevelDaemonFieldNumber;
const int ChannelManagerInitParams::kDriverTimingsFieldNumber;
#endif  // !_MSC_VER

ChannelManagerInitParams::ChannelManagerInitParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.ChannelManagerInitParams)
}

void ChannelManagerInitParams::InitAsDefaultInstance() {
  driver_timings_ = const_cast< ::channel_manager::DriverTimings*>(&::channel_manager::DriverTimings::default_instance());
}

ChannelManagerInitParams::ChannelManagerInitParams(const ChannelManagerInitParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.ChannelManagerInitParams)
}

void ChannelManagerInitParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  log_level_file_ = 0u;
  log_level_console_ = 1u;
  log_level_daemon_ = 0u;
  dsph_level_file_ = 0u;
  dsph_level_console_ = 1u;
  dsph_level_daemon_ = 0u;
  base_timing_ = 1000u;
  drv_buf_size_ = 32768u;
  usr_proc_len_ = 32768u;
  spi_speed_hz_ = 93750u;
  main_sleep_us_ = 500u;
  idle_sleep_us_ = 1000u;
  daemon_ipc_path_ = const_cast< ::std::string*>(_default_daemon_ipc_path_);
  daemon_ipc_key_ = 45u;
  reset_at_open_ = true;
  driver_timings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelManagerInitParams::~ChannelManagerInitParams() {
  // @@protoc_insertion_point(destructor:channel_manager.ChannelManagerInitParams)
  SharedDtor();
}

void ChannelManagerInitParams::SharedDtor() {
  if (daemon_ipc_path_ != _default_daemon_ipc_path_) {
    delete daemon_ipc_path_;
  }
  if (this != default_instance_) {
    delete driver_timings_;
  }
}

void ChannelManagerInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelManagerInitParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelManagerInitParams_descriptor_;
}

const ChannelManagerInitParams& ChannelManagerInitParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

ChannelManagerInitParams* ChannelManagerInitParams::default_instance_ = NULL;

ChannelManagerInitParams* ChannelManagerInitParams::New() const {
  return new ChannelManagerInitParams;
}

void ChannelManagerInitParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChannelManagerInitParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(log_level_daemon_, dsph_level_file_);
    log_level_file_ = 0u;
    log_level_console_ = 1u;
    dsph_level_console_ = 1u;
    dsph_level_daemon_ = 0u;
    base_timing_ = 1000u;
    drv_buf_size_ = 32768u;
  }
  if (_has_bits_[8 / 32] & 32512) {
    usr_proc_len_ = 32768u;
    spi_speed_hz_ = 93750u;
    main_sleep_us_ = 500u;
    idle_sleep_us_ = 1000u;
    if (has_daemon_ipc_path()) {
      if (daemon_ipc_path_ != _default_daemon_ipc_path_) {
        daemon_ipc_path_->assign(*_default_daemon_ipc_path_);
      }
    }
    daemon_ipc_key_ = 45u;
    reset_at_open_ = true;
  }
  if (has_driver_timings()) {
    if (driver_timings_ != NULL) driver_timings_->::channel_manager::DriverTimings::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  chan_level_file_.Clear();
  chan_level_console_.Clear();
  chan_level_daemon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelManagerInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.ChannelManagerInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 log_level_file = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_file_)));
          set_has_log_level_file();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_log_level_console;
        break;
      }

      // required uint32 log_level_console = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_log_level_console:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_console_)));
          set_has_log_level_console();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_level_daemon;
        break;
      }

      // required uint32 log_level_daemon = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_log_level_daemon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &log_level_daemon_)));
          set_has_log_level_daemon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dsph_level_file;
        break;
      }

      // required uint32 dsph_level_file = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_dsph_level_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dsph_level_file_)));
          set_has_dsph_level_file();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dsph_level_console;
        break;
      }

      // required uint32 dsph_level_console = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_dsph_level_console:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dsph_level_console_)));
          set_has_dsph_level_console();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dsph_level_daemon;
        break;
      }

      // required uint32 dsph_level_daemon = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_dsph_level_daemon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dsph_level_daemon_)));
          set_has_dsph_level_daemon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_base_timing;
        break;
      }

      // required uint32 base_timing = 7 [default = 1000];
      case 7: {
        if (tag == 56) {
         parse_base_timing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_timing_)));
          set_has_base_timing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_drv_buf_size;
        break;
      }

      // required uint32 drv_buf_size = 8 [default = 32768];
      case 8: {
        if (tag == 64) {
         parse_drv_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drv_buf_size_)));
          set_has_drv_buf_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_usr_proc_len;
        break;
      }

      // required uint32 usr_proc_len = 9 [default = 32768];
      case 9: {
        if (tag == 72) {
         parse_usr_proc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usr_proc_len_)));
          set_has_usr_proc_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_spi_speed_hz;
        break;
      }

      // required uint32 spi_speed_hz = 10 [default = 93750];
      case 10: {
        if (tag == 80) {
         parse_spi_speed_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spi_speed_hz_)));
          set_has_spi_speed_hz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_main_sleep_us;
        break;
      }

      // required uint32 main_sleep_us = 11 [default = 500];
      case 11: {
        if (tag == 88) {
         parse_main_sleep_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_sleep_us_)));
          set_has_main_sleep_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_idle_sleep_us;
        break;
      }

      // required uint32 idle_sleep_us = 12 [default = 1000];
      case 12: {
        if (tag == 96) {
         parse_idle_sleep_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_sleep_us_)));
          set_has_idle_sleep_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_daemon_ipc_path;
        break;
      }

      // required string daemon_ipc_path = 13 [default = "/mnt/share"];
      case 13: {
        if (tag == 106) {
         parse_daemon_ipc_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daemon_ipc_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->daemon_ipc_path().data(), this->daemon_ipc_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "daemon_ipc_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_daemon_ipc_key;
        break;
      }

      // required uint32 daemon_ipc_key = 14 [default = 45];
      case 14: {
        if (tag == 112) {
         parse_daemon_ipc_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daemon_ipc_key_)));
          set_has_daemon_ipc_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_reset_at_open;
        break;
      }

      // required bool reset_at_open = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_reset_at_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_at_open_)));
          set_has_reset_at_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_chan_level_file;
        break;
      }

      // repeated uint32 chan_level_file = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_chan_level_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chan_level_file())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 130, input, this->mutable_chan_level_file())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_chan_level_console;
        break;
      }

      // repeated uint32 chan_level_console = 17 [packed = true];
      case 17: {
        if (tag == 138) {
         parse_chan_level_console:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chan_level_console())));
        } else if (tag == 136) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 138, input, this->mutable_chan_level_console())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_chan_level_daemon;
        break;
      }

      // repeated uint32 chan_level_daemon = 18 [packed = true];
      case 18: {
        if (tag == 146) {
         parse_chan_level_daemon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chan_level_daemon())));
        } else if (tag == 144) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 146, input, this->mutable_chan_level_daemon())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_driver_timings;
        break;
      }

      // required .channel_manager.DriverTimings driver_timings = 19;
      case 19: {
        if (tag == 154) {
         parse_driver_timings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driver_timings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.ChannelManagerInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.ChannelManagerInitParams)
  return false;
#undef DO_
}

void ChannelManagerInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.ChannelManagerInitParams)
  // required uint32 log_level_file = 1 [default = 0];
  if (has_log_level_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->log_level_file(), output);
  }

  // required uint32 log_level_console = 2 [default = 1];
  if (has_log_level_console()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->log_level_console(), output);
  }

  // required uint32 log_level_daemon = 3 [default = 0];
  if (has_log_level_daemon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->log_level_daemon(), output);
  }

  // required uint32 dsph_level_file = 4 [default = 0];
  if (has_dsph_level_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dsph_level_file(), output);
  }

  // required uint32 dsph_level_console = 5 [default = 1];
  if (has_dsph_level_console()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dsph_level_console(), output);
  }

  // required uint32 dsph_level_daemon = 6 [default = 0];
  if (has_dsph_level_daemon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dsph_level_daemon(), output);
  }

  // required uint32 base_timing = 7 [default = 1000];
  if (has_base_timing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->base_timing(), output);
  }

  // required uint32 drv_buf_size = 8 [default = 32768];
  if (has_drv_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->drv_buf_size(), output);
  }

  // required uint32 usr_proc_len = 9 [default = 32768];
  if (has_usr_proc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usr_proc_len(), output);
  }

  // required uint32 spi_speed_hz = 10 [default = 93750];
  if (has_spi_speed_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->spi_speed_hz(), output);
  }

  // required uint32 main_sleep_us = 11 [default = 500];
  if (has_main_sleep_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->main_sleep_us(), output);
  }

  // required uint32 idle_sleep_us = 12 [default = 1000];
  if (has_idle_sleep_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->idle_sleep_us(), output);
  }

  // required string daemon_ipc_path = 13 [default = "/mnt/share"];
  if (has_daemon_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daemon_ipc_path().data(), this->daemon_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "daemon_ipc_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->daemon_ipc_path(), output);
  }

  // required uint32 daemon_ipc_key = 14 [default = 45];
  if (has_daemon_ipc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->daemon_ipc_key(), output);
  }

  // required bool reset_at_open = 15 [default = true];
  if (has_reset_at_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->reset_at_open(), output);
  }

  // repeated uint32 chan_level_file = 16 [packed = true];
  if (this->chan_level_file_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chan_level_file_cached_byte_size_);
  }
  for (int i = 0; i < this->chan_level_file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->chan_level_file(i), output);
  }

  // repeated uint32 chan_level_console = 17 [packed = true];
  if (this->chan_level_console_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chan_level_console_cached_byte_size_);
  }
  for (int i = 0; i < this->chan_level_console_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->chan_level_console(i), output);
  }

  // repeated uint32 chan_level_daemon = 18 [packed = true];
  if (this->chan_level_daemon_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(18, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chan_level_daemon_cached_byte_size_);
  }
  for (int i = 0; i < this->chan_level_daemon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->chan_level_daemon(i), output);
  }

  // required .channel_manager.DriverTimings driver_timings = 19;
  if (has_driver_timings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->driver_timings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.ChannelManagerInitParams)
}

::google::protobuf::uint8* ChannelManagerInitParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.ChannelManagerInitParams)
  // required uint32 log_level_file = 1 [default = 0];
  if (has_log_level_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->log_level_file(), target);
  }

  // required uint32 log_level_console = 2 [default = 1];
  if (has_log_level_console()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->log_level_console(), target);
  }

  // required uint32 log_level_daemon = 3 [default = 0];
  if (has_log_level_daemon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->log_level_daemon(), target);
  }

  // required uint32 dsph_level_file = 4 [default = 0];
  if (has_dsph_level_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dsph_level_file(), target);
  }

  // required uint32 dsph_level_console = 5 [default = 1];
  if (has_dsph_level_console()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dsph_level_console(), target);
  }

  // required uint32 dsph_level_daemon = 6 [default = 0];
  if (has_dsph_level_daemon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dsph_level_daemon(), target);
  }

  // required uint32 base_timing = 7 [default = 1000];
  if (has_base_timing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->base_timing(), target);
  }

  // required uint32 drv_buf_size = 8 [default = 32768];
  if (has_drv_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->drv_buf_size(), target);
  }

  // required uint32 usr_proc_len = 9 [default = 32768];
  if (has_usr_proc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usr_proc_len(), target);
  }

  // required uint32 spi_speed_hz = 10 [default = 93750];
  if (has_spi_speed_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->spi_speed_hz(), target);
  }

  // required uint32 main_sleep_us = 11 [default = 500];
  if (has_main_sleep_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->main_sleep_us(), target);
  }

  // required uint32 idle_sleep_us = 12 [default = 1000];
  if (has_idle_sleep_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->idle_sleep_us(), target);
  }

  // required string daemon_ipc_path = 13 [default = "/mnt/share"];
  if (has_daemon_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->daemon_ipc_path().data(), this->daemon_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "daemon_ipc_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->daemon_ipc_path(), target);
  }

  // required uint32 daemon_ipc_key = 14 [default = 45];
  if (has_daemon_ipc_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->daemon_ipc_key(), target);
  }

  // required bool reset_at_open = 15 [default = true];
  if (has_reset_at_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->reset_at_open(), target);
  }

  // repeated uint32 chan_level_file = 16 [packed = true];
  if (this->chan_level_file_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chan_level_file_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chan_level_file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->chan_level_file(i), target);
  }

  // repeated uint32 chan_level_console = 17 [packed = true];
  if (this->chan_level_console_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chan_level_console_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chan_level_console_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->chan_level_console(i), target);
  }

  // repeated uint32 chan_level_daemon = 18 [packed = true];
  if (this->chan_level_daemon_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      18,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chan_level_daemon_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chan_level_daemon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->chan_level_daemon(i), target);
  }

  // required .channel_manager.DriverTimings driver_timings = 19;
  if (has_driver_timings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->driver_timings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.ChannelManagerInitParams)
  return target;
}

int ChannelManagerInitParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 log_level_file = 1 [default = 0];
    if (has_log_level_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level_file());
    }

    // required uint32 log_level_console = 2 [default = 1];
    if (has_log_level_console()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level_console());
    }

    // required uint32 log_level_daemon = 3 [default = 0];
    if (has_log_level_daemon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->log_level_daemon());
    }

    // required uint32 dsph_level_file = 4 [default = 0];
    if (has_dsph_level_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dsph_level_file());
    }

    // required uint32 dsph_level_console = 5 [default = 1];
    if (has_dsph_level_console()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dsph_level_console());
    }

    // required uint32 dsph_level_daemon = 6 [default = 0];
    if (has_dsph_level_daemon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dsph_level_daemon());
    }

    // required uint32 base_timing = 7 [default = 1000];
    if (has_base_timing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_timing());
    }

    // required uint32 drv_buf_size = 8 [default = 32768];
    if (has_drv_buf_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drv_buf_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 usr_proc_len = 9 [default = 32768];
    if (has_usr_proc_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usr_proc_len());
    }

    // required uint32 spi_speed_hz = 10 [default = 93750];
    if (has_spi_speed_hz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spi_speed_hz());
    }

    // required uint32 main_sleep_us = 11 [default = 500];
    if (has_main_sleep_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_sleep_us());
    }

    // required uint32 idle_sleep_us = 12 [default = 1000];
    if (has_idle_sleep_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idle_sleep_us());
    }

    // required string daemon_ipc_path = 13 [default = "/mnt/share"];
    if (has_daemon_ipc_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daemon_ipc_path());
    }

    // required uint32 daemon_ipc_key = 14 [default = 45];
    if (has_daemon_ipc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daemon_ipc_key());
    }

    // required bool reset_at_open = 15 [default = true];
    if (has_reset_at_open()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // required .channel_manager.DriverTimings driver_timings = 19;
    if (has_driver_timings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->driver_timings());
    }

  }
  // repeated uint32 chan_level_file = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->chan_level_file_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chan_level_file(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chan_level_file_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 chan_level_console = 17 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->chan_level_console_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chan_level_console(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chan_level_console_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 chan_level_daemon = 18 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->chan_level_daemon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chan_level_daemon(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chan_level_daemon_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelManagerInitParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelManagerInitParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelManagerInitParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelManagerInitParams::MergeFrom(const ChannelManagerInitParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  chan_level_file_.MergeFrom(from.chan_level_file_);
  chan_level_console_.MergeFrom(from.chan_level_console_);
  chan_level_daemon_.MergeFrom(from.chan_level_daemon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_level_file()) {
      set_log_level_file(from.log_level_file());
    }
    if (from.has_log_level_console()) {
      set_log_level_console(from.log_level_console());
    }
    if (from.has_log_level_daemon()) {
      set_log_level_daemon(from.log_level_daemon());
    }
    if (from.has_dsph_level_file()) {
      set_dsph_level_file(from.dsph_level_file());
    }
    if (from.has_dsph_level_console()) {
      set_dsph_level_console(from.dsph_level_console());
    }
    if (from.has_dsph_level_daemon()) {
      set_dsph_level_daemon(from.dsph_level_daemon());
    }
    if (from.has_base_timing()) {
      set_base_timing(from.base_timing());
    }
    if (from.has_drv_buf_size()) {
      set_drv_buf_size(from.drv_buf_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usr_proc_len()) {
      set_usr_proc_len(from.usr_proc_len());
    }
    if (from.has_spi_speed_hz()) {
      set_spi_speed_hz(from.spi_speed_hz());
    }
    if (from.has_main_sleep_us()) {
      set_main_sleep_us(from.main_sleep_us());
    }
    if (from.has_idle_sleep_us()) {
      set_idle_sleep_us(from.idle_sleep_us());
    }
    if (from.has_daemon_ipc_path()) {
      set_daemon_ipc_path(from.daemon_ipc_path());
    }
    if (from.has_daemon_ipc_key()) {
      set_daemon_ipc_key(from.daemon_ipc_key());
    }
    if (from.has_reset_at_open()) {
      set_reset_at_open(from.reset_at_open());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_driver_timings()) {
      mutable_driver_timings()->::channel_manager::DriverTimings::MergeFrom(from.driver_timings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelManagerInitParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelManagerInitParams::CopyFrom(const ChannelManagerInitParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelManagerInitParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00047fff) != 0x00047fff) return false;

  if (has_driver_timings()) {
    if (!this->driver_timings().IsInitialized()) return false;
  }
  return true;
}

void ChannelManagerInitParams::Swap(ChannelManagerInitParams* other) {
  if (other != this) {
    std::swap(log_level_file_, other->log_level_file_);
    std::swap(log_level_console_, other->log_level_console_);
    std::swap(log_level_daemon_, other->log_level_daemon_);
    std::swap(dsph_level_file_, other->dsph_level_file_);
    std::swap(dsph_level_console_, other->dsph_level_console_);
    std::swap(dsph_level_daemon_, other->dsph_level_daemon_);
    std::swap(base_timing_, other->base_timing_);
    std::swap(drv_buf_size_, other->drv_buf_size_);
    std::swap(usr_proc_len_, other->usr_proc_len_);
    std::swap(spi_speed_hz_, other->spi_speed_hz_);
    std::swap(main_sleep_us_, other->main_sleep_us_);
    std::swap(idle_sleep_us_, other->idle_sleep_us_);
    std::swap(daemon_ipc_path_, other->daemon_ipc_path_);
    std::swap(daemon_ipc_key_, other->daemon_ipc_key_);
    std::swap(reset_at_open_, other->reset_at_open_);
    chan_level_file_.Swap(&other->chan_level_file_);
    chan_level_console_.Swap(&other->chan_level_console_);
    chan_level_daemon_.Swap(&other->chan_level_daemon_);
    std::swap(driver_timings_, other->driver_timings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelManagerInitParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelManagerInitParams_descriptor_;
  metadata.reflection = ChannelManagerInitParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADCParams::kControl1FieldNumber;
const int ADCParams::kControl2FieldNumber;
const int ADCParams::kOffsetFieldNumber;
const int ADCParams::kGainFieldNumber;
const int ADCParams::kOverrangeFieldNumber;
const int ADCParams::kChSettingsFieldNumber;
#endif  // !_MSC_VER

ADCParams::ADCParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.ADCParams)
}

void ADCParams::InitAsDefaultInstance() {
}

ADCParams::ADCParams(const ADCParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.ADCParams)
}

void ADCParams::SharedCtor() {
  _cached_size_ = 0;
  control1_ = 0u;
  control2_ = 0u;
  offset_ = 0u;
  gain_ = 0u;
  overrange_ = 0u;
  ch_settings_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCParams::~ADCParams() {
  // @@protoc_insertion_point(destructor:channel_manager.ADCParams)
  SharedDtor();
}

void ADCParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADCParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCParams_descriptor_;
}

const ADCParams& ADCParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

ADCParams* ADCParams::default_instance_ = NULL;

ADCParams* ADCParams::New() const {
  return new ADCParams;
}

void ADCParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ADCParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(control1_, ch_settings_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADCParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.ADCParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 control1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control1_)));
          set_has_control1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_control2;
        break;
      }

      // required uint32 control2 = 2;
      case 2: {
        if (tag == 16) {
         parse_control2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control2_)));
          set_has_control2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required uint32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gain;
        break;
      }

      // required uint32 gain = 4;
      case 4: {
        if (tag == 32) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_overrange;
        break;
      }

      // required uint32 overrange = 5;
      case 5: {
        if (tag == 40) {
         parse_overrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overrange_)));
          set_has_overrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ch_settings;
        break;
      }

      // required uint32 ch_settings = 6;
      case 6: {
        if (tag == 48) {
         parse_ch_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_settings_)));
          set_has_ch_settings();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.ADCParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.ADCParams)
  return false;
#undef DO_
}

void ADCParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.ADCParams)
  // required uint32 control1 = 1;
  if (has_control1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->control1(), output);
  }

  // required uint32 control2 = 2;
  if (has_control2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control2(), output);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // required uint32 gain = 4;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gain(), output);
  }

  // required uint32 overrange = 5;
  if (has_overrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->overrange(), output);
  }

  // required uint32 ch_settings = 6;
  if (has_ch_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ch_settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.ADCParams)
}

::google::protobuf::uint8* ADCParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.ADCParams)
  // required uint32 control1 = 1;
  if (has_control1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->control1(), target);
  }

  // required uint32 control2 = 2;
  if (has_control2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control2(), target);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // required uint32 gain = 4;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gain(), target);
  }

  // required uint32 overrange = 5;
  if (has_overrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->overrange(), target);
  }

  // required uint32 ch_settings = 6;
  if (has_ch_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ch_settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.ADCParams)
  return target;
}

int ADCParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 control1 = 1;
    if (has_control1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control1());
    }

    // required uint32 control2 = 2;
    if (has_control2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control2());
    }

    // required uint32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 gain = 4;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain());
    }

    // required uint32 overrange = 5;
    if (has_overrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overrange());
    }

    // required uint32 ch_settings = 6;
    if (has_ch_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ch_settings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADCParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADCParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADCParams::MergeFrom(const ADCParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control1()) {
      set_control1(from.control1());
    }
    if (from.has_control2()) {
      set_control2(from.control2());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_overrange()) {
      set_overrange(from.overrange());
    }
    if (from.has_ch_settings()) {
      set_ch_settings(from.ch_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADCParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCParams::CopyFrom(const ADCParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ADCParams::Swap(ADCParams* other) {
  if (other != this) {
    std::swap(control1_, other->control1_);
    std::swap(control2_, other->control2_);
    std::swap(offset_, other->offset_);
    std::swap(gain_, other->gain_);
    std::swap(overrange_, other->overrange_);
    std::swap(ch_settings_, other->ch_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADCParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCParams_descriptor_;
  metadata.reflection = ADCParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ADCChannelInitParams::kChIdxFieldNumber;
const int ADCChannelInitParams::kRotIdxFieldNumber;
const int ADCChannelInitParams::kDrvBufSizeFieldNumber;
const int ADCChannelInitParams::kUsrProcLenFieldNumber;
const int ADCChannelInitParams::kUsrProcCntFieldNumber;
const int ADCChannelInitParams::kSenFilterIdFieldNumber;
const int ADCChannelInitParams::kApFieldNumber;
#endif  // !_MSC_VER

ADCChannelInitParams::ADCChannelInitParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.ADCChannelInitParams)
}

void ADCChannelInitParams::InitAsDefaultInstance() {
  ap_ = const_cast< ::channel_manager::ADCParams*>(&::channel_manager::ADCParams::default_instance());
}

ADCChannelInitParams::ADCChannelInitParams(const ADCChannelInitParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.ADCChannelInitParams)
}

void ADCChannelInitParams::SharedCtor() {
  _cached_size_ = 0;
  ch_idx_ = 0u;
  rot_idx_ = 0u;
  drv_buf_size_ = 32768u;
  usr_proc_len_ = 32768u;
  usr_proc_cnt_ = 0u;
  sen_filter_id_ = 0u;
  ap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADCChannelInitParams::~ADCChannelInitParams() {
  // @@protoc_insertion_point(destructor:channel_manager.ADCChannelInitParams)
  SharedDtor();
}

void ADCChannelInitParams::SharedDtor() {
  if (this != default_instance_) {
    delete ap_;
  }
}

void ADCChannelInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCChannelInitParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADCChannelInitParams_descriptor_;
}

const ADCChannelInitParams& ADCChannelInitParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

ADCChannelInitParams* ADCChannelInitParams::default_instance_ = NULL;

ADCChannelInitParams* ADCChannelInitParams::New() const {
  return new ADCChannelInitParams;
}

void ADCChannelInitParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ADCChannelInitParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ch_idx_, rot_idx_);
    ZR_(usr_proc_cnt_, sen_filter_id_);
    drv_buf_size_ = 32768u;
    usr_proc_len_ = 32768u;
    if (has_ap()) {
      if (ap_ != NULL) ap_->::channel_manager::ADCParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADCChannelInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.ADCChannelInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ch_idx = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_idx_)));
          set_has_ch_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rot_idx;
        break;
      }

      // required uint32 rot_idx = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_rot_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rot_idx_)));
          set_has_rot_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_drv_buf_size;
        break;
      }

      // optional uint32 drv_buf_size = 3 [default = 32768];
      case 3: {
        if (tag == 24) {
         parse_drv_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drv_buf_size_)));
          set_has_drv_buf_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_usr_proc_len;
        break;
      }

      // optional uint32 usr_proc_len = 4 [default = 32768];
      case 4: {
        if (tag == 32) {
         parse_usr_proc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usr_proc_len_)));
          set_has_usr_proc_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_usr_proc_cnt;
        break;
      }

      // optional uint32 usr_proc_cnt = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_usr_proc_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usr_proc_cnt_)));
          set_has_usr_proc_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sen_filter_id;
        break;
      }

      // optional uint32 sen_filter_id = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_sen_filter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sen_filter_id_)));
          set_has_sen_filter_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ap;
        break;
      }

      // optional .channel_manager.ADCParams ap = 7;
      case 7: {
        if (tag == 58) {
         parse_ap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.ADCChannelInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.ADCChannelInitParams)
  return false;
#undef DO_
}

void ADCChannelInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.ADCChannelInitParams)
  // required uint32 ch_idx = 1 [default = 0];
  if (has_ch_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ch_idx(), output);
  }

  // required uint32 rot_idx = 2 [default = 0];
  if (has_rot_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rot_idx(), output);
  }

  // optional uint32 drv_buf_size = 3 [default = 32768];
  if (has_drv_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drv_buf_size(), output);
  }

  // optional uint32 usr_proc_len = 4 [default = 32768];
  if (has_usr_proc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usr_proc_len(), output);
  }

  // optional uint32 usr_proc_cnt = 5 [default = 0];
  if (has_usr_proc_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->usr_proc_cnt(), output);
  }

  // optional uint32 sen_filter_id = 6 [default = 0];
  if (has_sen_filter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sen_filter_id(), output);
  }

  // optional .channel_manager.ADCParams ap = 7;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.ADCChannelInitParams)
}

::google::protobuf::uint8* ADCChannelInitParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.ADCChannelInitParams)
  // required uint32 ch_idx = 1 [default = 0];
  if (has_ch_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ch_idx(), target);
  }

  // required uint32 rot_idx = 2 [default = 0];
  if (has_rot_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rot_idx(), target);
  }

  // optional uint32 drv_buf_size = 3 [default = 32768];
  if (has_drv_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drv_buf_size(), target);
  }

  // optional uint32 usr_proc_len = 4 [default = 32768];
  if (has_usr_proc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usr_proc_len(), target);
  }

  // optional uint32 usr_proc_cnt = 5 [default = 0];
  if (has_usr_proc_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->usr_proc_cnt(), target);
  }

  // optional uint32 sen_filter_id = 6 [default = 0];
  if (has_sen_filter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sen_filter_id(), target);
  }

  // optional .channel_manager.ADCParams ap = 7;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.ADCChannelInitParams)
  return target;
}

int ADCChannelInitParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ch_idx = 1 [default = 0];
    if (has_ch_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ch_idx());
    }

    // required uint32 rot_idx = 2 [default = 0];
    if (has_rot_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rot_idx());
    }

    // optional uint32 drv_buf_size = 3 [default = 32768];
    if (has_drv_buf_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drv_buf_size());
    }

    // optional uint32 usr_proc_len = 4 [default = 32768];
    if (has_usr_proc_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usr_proc_len());
    }

    // optional uint32 usr_proc_cnt = 5 [default = 0];
    if (has_usr_proc_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usr_proc_cnt());
    }

    // optional uint32 sen_filter_id = 6 [default = 0];
    if (has_sen_filter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sen_filter_id());
    }

    // optional .channel_manager.ADCParams ap = 7;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCChannelInitParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADCChannelInitParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADCChannelInitParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADCChannelInitParams::MergeFrom(const ADCChannelInitParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ch_idx()) {
      set_ch_idx(from.ch_idx());
    }
    if (from.has_rot_idx()) {
      set_rot_idx(from.rot_idx());
    }
    if (from.has_drv_buf_size()) {
      set_drv_buf_size(from.drv_buf_size());
    }
    if (from.has_usr_proc_len()) {
      set_usr_proc_len(from.usr_proc_len());
    }
    if (from.has_usr_proc_cnt()) {
      set_usr_proc_cnt(from.usr_proc_cnt());
    }
    if (from.has_sen_filter_id()) {
      set_sen_filter_id(from.sen_filter_id());
    }
    if (from.has_ap()) {
      mutable_ap()->::channel_manager::ADCParams::MergeFrom(from.ap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADCChannelInitParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCChannelInitParams::CopyFrom(const ADCChannelInitParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCChannelInitParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ap()) {
    if (!this->ap().IsInitialized()) return false;
  }
  return true;
}

void ADCChannelInitParams::Swap(ADCChannelInitParams* other) {
  if (other != this) {
    std::swap(ch_idx_, other->ch_idx_);
    std::swap(rot_idx_, other->rot_idx_);
    std::swap(drv_buf_size_, other->drv_buf_size_);
    std::swap(usr_proc_len_, other->usr_proc_len_);
    std::swap(usr_proc_cnt_, other->usr_proc_cnt_);
    std::swap(sen_filter_id_, other->sen_filter_id_);
    std::swap(ap_, other->ap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ADCChannelInitParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADCChannelInitParams_descriptor_;
  metadata.reflection = ADCChannelInitParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynctaskChannels::kAdcChCntFieldNumber;
const int SynctaskChannels::kAdcChIdxFieldNumber;
const int SynctaskChannels::kSyncRegFieldNumber;
#endif  // !_MSC_VER

SynctaskChannels::SynctaskChannels()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.SynctaskChannels)
}

void SynctaskChannels::InitAsDefaultInstance() {
}

SynctaskChannels::SynctaskChannels(const SynctaskChannels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.SynctaskChannels)
}

void SynctaskChannels::SharedCtor() {
  _cached_size_ = 0;
  adc_ch_cnt_ = 0u;
  sync_reg_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynctaskChannels::~SynctaskChannels() {
  // @@protoc_insertion_point(destructor:channel_manager.SynctaskChannels)
  SharedDtor();
}

void SynctaskChannels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynctaskChannels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynctaskChannels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynctaskChannels_descriptor_;
}

const SynctaskChannels& SynctaskChannels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

SynctaskChannels* SynctaskChannels::default_instance_ = NULL;

SynctaskChannels* SynctaskChannels::New() const {
  return new SynctaskChannels;
}

void SynctaskChannels::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SynctaskChannels*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(adc_ch_cnt_, sync_reg_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  adc_ch_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynctaskChannels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.SynctaskChannels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adc_ch_cnt = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc_ch_cnt_)));
          set_has_adc_ch_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adc_ch_idx;
        break;
      }

      // repeated uint32 adc_ch_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_adc_ch_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_adc_ch_idx())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_adc_ch_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adc_ch_idx;
        if (input->ExpectTag(24)) goto parse_sync_reg;
        break;
      }

      // optional uint32 sync_reg = 3;
      case 3: {
        if (tag == 24) {
         parse_sync_reg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sync_reg_)));
          set_has_sync_reg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.SynctaskChannels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.SynctaskChannels)
  return false;
#undef DO_
}

void SynctaskChannels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.SynctaskChannels)
  // required uint32 adc_ch_cnt = 1 [default = 0];
  if (has_adc_ch_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adc_ch_cnt(), output);
  }

  // repeated uint32 adc_ch_idx = 2;
  for (int i = 0; i < this->adc_ch_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->adc_ch_idx(i), output);
  }

  // optional uint32 sync_reg = 3;
  if (has_sync_reg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sync_reg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.SynctaskChannels)
}

::google::protobuf::uint8* SynctaskChannels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.SynctaskChannels)
  // required uint32 adc_ch_cnt = 1 [default = 0];
  if (has_adc_ch_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adc_ch_cnt(), target);
  }

  // repeated uint32 adc_ch_idx = 2;
  for (int i = 0; i < this->adc_ch_idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->adc_ch_idx(i), target);
  }

  // optional uint32 sync_reg = 3;
  if (has_sync_reg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sync_reg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.SynctaskChannels)
  return target;
}

int SynctaskChannels::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adc_ch_cnt = 1 [default = 0];
    if (has_adc_ch_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc_ch_cnt());
    }

    // optional uint32 sync_reg = 3;
    if (has_sync_reg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sync_reg());
    }

  }
  // repeated uint32 adc_ch_idx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->adc_ch_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->adc_ch_idx(i));
    }
    total_size += 1 * this->adc_ch_idx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynctaskChannels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynctaskChannels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynctaskChannels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynctaskChannels::MergeFrom(const SynctaskChannels& from) {
  GOOGLE_CHECK_NE(&from, this);
  adc_ch_idx_.MergeFrom(from.adc_ch_idx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adc_ch_cnt()) {
      set_adc_ch_cnt(from.adc_ch_cnt());
    }
    if (from.has_sync_reg()) {
      set_sync_reg(from.sync_reg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynctaskChannels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynctaskChannels::CopyFrom(const SynctaskChannels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynctaskChannels::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SynctaskChannels::Swap(SynctaskChannels* other) {
  if (other != this) {
    std::swap(adc_ch_cnt_, other->adc_ch_cnt_);
    adc_ch_idx_.Swap(&other->adc_ch_idx_);
    std::swap(sync_reg_, other->sync_reg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynctaskChannels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynctaskChannels_descriptor_;
  metadata.reflection = SynctaskChannels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotChannelInitParams::kRotIdxFieldNumber;
const int RotChannelInitParams::kAvNumFieldNumber;
const int RotChannelInitParams::kPwMinUsFieldNumber;
const int RotChannelInitParams::kPeriodMinUsFieldNumber;
const int RotChannelInitParams::kPeriodMaxUsFieldNumber;
#endif  // !_MSC_VER

RotChannelInitParams::RotChannelInitParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.RotChannelInitParams)
}

void RotChannelInitParams::InitAsDefaultInstance() {
}

RotChannelInitParams::RotChannelInitParams(const RotChannelInitParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.RotChannelInitParams)
}

void RotChannelInitParams::SharedCtor() {
  _cached_size_ = 0;
  rot_idx_ = 0u;
  av_num_ = 1u;
  pw_min_us_ = 25u;
  period_min_us_ = 8333u;
  period_max_us_ = 1000000u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotChannelInitParams::~RotChannelInitParams() {
  // @@protoc_insertion_point(destructor:channel_manager.RotChannelInitParams)
  SharedDtor();
}

void RotChannelInitParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotChannelInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotChannelInitParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotChannelInitParams_descriptor_;
}

const RotChannelInitParams& RotChannelInitParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

RotChannelInitParams* RotChannelInitParams::default_instance_ = NULL;

RotChannelInitParams* RotChannelInitParams::New() const {
  return new RotChannelInitParams;
}

void RotChannelInitParams::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    rot_idx_ = 0u;
    av_num_ = 1u;
    pw_min_us_ = 25u;
    period_min_us_ = 8333u;
    period_max_us_ = 1000000u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotChannelInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.RotChannelInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rot_idx = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rot_idx_)));
          set_has_rot_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_av_num;
        break;
      }

      // optional uint32 av_num = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_av_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &av_num_)));
          set_has_av_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pw_min_us;
        break;
      }

      // optional uint32 pw_min_us = 3 [default = 25];
      case 3: {
        if (tag == 24) {
         parse_pw_min_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_min_us_)));
          set_has_pw_min_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_period_min_us;
        break;
      }

      // optional uint32 period_min_us = 4 [default = 8333];
      case 4: {
        if (tag == 32) {
         parse_period_min_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_min_us_)));
          set_has_period_min_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_period_max_us;
        break;
      }

      // optional uint32 period_max_us = 5 [default = 1000000];
      case 5: {
        if (tag == 40) {
         parse_period_max_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &period_max_us_)));
          set_has_period_max_us();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.RotChannelInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.RotChannelInitParams)
  return false;
#undef DO_
}

void RotChannelInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.RotChannelInitParams)
  // required uint32 rot_idx = 1 [default = 0];
  if (has_rot_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rot_idx(), output);
  }

  // optional uint32 av_num = 2 [default = 1];
  if (has_av_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->av_num(), output);
  }

  // optional uint32 pw_min_us = 3 [default = 25];
  if (has_pw_min_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pw_min_us(), output);
  }

  // optional uint32 period_min_us = 4 [default = 8333];
  if (has_period_min_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->period_min_us(), output);
  }

  // optional uint32 period_max_us = 5 [default = 1000000];
  if (has_period_max_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->period_max_us(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.RotChannelInitParams)
}

::google::protobuf::uint8* RotChannelInitParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.RotChannelInitParams)
  // required uint32 rot_idx = 1 [default = 0];
  if (has_rot_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rot_idx(), target);
  }

  // optional uint32 av_num = 2 [default = 1];
  if (has_av_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->av_num(), target);
  }

  // optional uint32 pw_min_us = 3 [default = 25];
  if (has_pw_min_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pw_min_us(), target);
  }

  // optional uint32 period_min_us = 4 [default = 8333];
  if (has_period_min_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->period_min_us(), target);
  }

  // optional uint32 period_max_us = 5 [default = 1000000];
  if (has_period_max_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->period_max_us(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.RotChannelInitParams)
  return target;
}

int RotChannelInitParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rot_idx = 1 [default = 0];
    if (has_rot_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rot_idx());
    }

    // optional uint32 av_num = 2 [default = 1];
    if (has_av_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->av_num());
    }

    // optional uint32 pw_min_us = 3 [default = 25];
    if (has_pw_min_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw_min_us());
    }

    // optional uint32 period_min_us = 4 [default = 8333];
    if (has_period_min_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period_min_us());
    }

    // optional uint32 period_max_us = 5 [default = 1000000];
    if (has_period_max_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->period_max_us());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotChannelInitParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotChannelInitParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotChannelInitParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotChannelInitParams::MergeFrom(const RotChannelInitParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rot_idx()) {
      set_rot_idx(from.rot_idx());
    }
    if (from.has_av_num()) {
      set_av_num(from.av_num());
    }
    if (from.has_pw_min_us()) {
      set_pw_min_us(from.pw_min_us());
    }
    if (from.has_period_min_us()) {
      set_period_min_us(from.period_min_us());
    }
    if (from.has_period_max_us()) {
      set_period_max_us(from.period_max_us());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotChannelInitParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotChannelInitParams::CopyFrom(const RotChannelInitParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotChannelInitParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RotChannelInitParams::Swap(RotChannelInitParams* other) {
  if (other != this) {
    std::swap(rot_idx_, other->rot_idx_);
    std::swap(av_num_, other->av_num_);
    std::swap(pw_min_us_, other->pw_min_us_);
    std::swap(period_min_us_, other->period_min_us_);
    std::swap(period_max_us_, other->period_max_us_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotChannelInitParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotChannelInitParams_descriptor_;
  metadata.reflection = RotChannelInitParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotData::kErrorCodeFieldNumber;
const int RotData::kRunningFieldNumber;
const int RotData::kPosFieldNumber;
const int RotData::kMinFieldNumber;
const int RotData::kMaxFieldNumber;
const int RotData::kAvrFieldNumber;
const int RotData::kSumFieldNumber;
const int RotData::kCntFieldNumber;
const int RotData::kFreqMinFieldNumber;
const int RotData::kFreqMaxFieldNumber;
const int RotData::kFreqAvrFieldNumber;
const int RotData::kOverhighFieldNumber;
const int RotData::kUnderlowFieldNumber;
#endif  // !_MSC_VER

RotData::RotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:channel_manager.RotData)
}

void RotData::InitAsDefaultInstance() {
}

RotData::RotData(const RotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:channel_manager.RotData)
}

void RotData::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  running_ = false;
  pos_ = 0u;
  min_ = 0u;
  max_ = 0u;
  avr_ = 0u;
  sum_ = 0;
  cnt_ = 0u;
  freq_min_ = 0;
  freq_max_ = 0;
  freq_avr_ = 0;
  overhigh_ = false;
  underlow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotData::~RotData() {
  // @@protoc_insertion_point(destructor:channel_manager.RotData)
  SharedDtor();
}

void RotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotData_descriptor_;
}

const RotData& RotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmanager_2eproto();
  return *default_instance_;
}

RotData* RotData::default_instance_ = NULL;

RotData* RotData::New() const {
  return new RotData;
}

void RotData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RotData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(error_code_, cnt_);
    running_ = false;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(freq_min_, freq_avr_);
    ZR_(overhigh_, underlow_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:channel_manager.RotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_running;
        break;
      }

      // optional bool running = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
          set_has_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min;
        break;
      }

      // optional uint32 min = 4;
      case 4: {
        if (tag == 32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max;
        break;
      }

      // optional uint32 max = 5;
      case 5: {
        if (tag == 40) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_avr;
        break;
      }

      // optional uint32 avr = 6;
      case 6: {
        if (tag == 48) {
         parse_avr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avr_)));
          set_has_avr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_sum;
        break;
      }

      // optional double sum = 7;
      case 7: {
        if (tag == 57) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cnt;
        break;
      }

      // optional uint32 cnt = 8;
      case 8: {
        if (tag == 64) {
         parse_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_freq_min;
        break;
      }

      // optional double freq_min = 9;
      case 9: {
        if (tag == 73) {
         parse_freq_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_min_)));
          set_has_freq_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_freq_max;
        break;
      }

      // optional double freq_max = 10;
      case 10: {
        if (tag == 81) {
         parse_freq_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_max_)));
          set_has_freq_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_freq_avr;
        break;
      }

      // optional double freq_avr = 11;
      case 11: {
        if (tag == 89) {
         parse_freq_avr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_avr_)));
          set_has_freq_avr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_overhigh;
        break;
      }

      // optional bool overhigh = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_overhigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overhigh_)));
          set_has_overhigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_underlow;
        break;
      }

      // optional bool underlow = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_underlow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underlow_)));
          set_has_underlow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:channel_manager.RotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:channel_manager.RotData)
  return false;
#undef DO_
}

void RotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:channel_manager.RotData)
  // required sint32 error_code = 1 [default = 0];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional bool running = 2 [default = false];
  if (has_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->running(), output);
  }

  // optional uint32 pos = 3 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional uint32 min = 4;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min(), output);
  }

  // optional uint32 max = 5;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max(), output);
  }

  // optional uint32 avr = 6;
  if (has_avr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->avr(), output);
  }

  // optional double sum = 7;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sum(), output);
  }

  // optional uint32 cnt = 8;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cnt(), output);
  }

  // optional double freq_min = 9;
  if (has_freq_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->freq_min(), output);
  }

  // optional double freq_max = 10;
  if (has_freq_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->freq_max(), output);
  }

  // optional double freq_avr = 11;
  if (has_freq_avr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->freq_avr(), output);
  }

  // optional bool overhigh = 12 [default = false];
  if (has_overhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->overhigh(), output);
  }

  // optional bool underlow = 13 [default = false];
  if (has_underlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->underlow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:channel_manager.RotData)
}

::google::protobuf::uint8* RotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:channel_manager.RotData)
  // required sint32 error_code = 1 [default = 0];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional bool running = 2 [default = false];
  if (has_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->running(), target);
  }

  // optional uint32 pos = 3 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional uint32 min = 4;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min(), target);
  }

  // optional uint32 max = 5;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max(), target);
  }

  // optional uint32 avr = 6;
  if (has_avr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->avr(), target);
  }

  // optional double sum = 7;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sum(), target);
  }

  // optional uint32 cnt = 8;
  if (has_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cnt(), target);
  }

  // optional double freq_min = 9;
  if (has_freq_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->freq_min(), target);
  }

  // optional double freq_max = 10;
  if (has_freq_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->freq_max(), target);
  }

  // optional double freq_avr = 11;
  if (has_freq_avr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->freq_avr(), target);
  }

  // optional bool overhigh = 12 [default = false];
  if (has_overhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->overhigh(), target);
  }

  // optional bool underlow = 13 [default = false];
  if (has_underlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->underlow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:channel_manager.RotData)
  return target;
}

int RotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1 [default = 0];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // optional bool running = 2 [default = false];
    if (has_running()) {
      total_size += 1 + 1;
    }

    // optional uint32 pos = 3 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 min = 4;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 5;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional uint32 avr = 6;
    if (has_avr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avr());
    }

    // optional double sum = 7;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional uint32 cnt = 8;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double freq_min = 9;
    if (has_freq_min()) {
      total_size += 1 + 8;
    }

    // optional double freq_max = 10;
    if (has_freq_max()) {
      total_size += 1 + 8;
    }

    // optional double freq_avr = 11;
    if (has_freq_avr()) {
      total_size += 1 + 8;
    }

    // optional bool overhigh = 12 [default = false];
    if (has_overhigh()) {
      total_size += 1 + 1;
    }

    // optional bool underlow = 13 [default = false];
    if (has_underlow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotData::MergeFrom(const RotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_running()) {
      set_running(from.running());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_avr()) {
      set_avr(from.avr());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_freq_min()) {
      set_freq_min(from.freq_min());
    }
    if (from.has_freq_max()) {
      set_freq_max(from.freq_max());
    }
    if (from.has_freq_avr()) {
      set_freq_avr(from.freq_avr());
    }
    if (from.has_overhigh()) {
      set_overhigh(from.overhigh());
    }
    if (from.has_underlow()) {
      set_underlow(from.underlow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotData::CopyFrom(const RotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RotData::Swap(RotData* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(running_, other->running_);
    std::swap(pos_, other->pos_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(avr_, other->avr_);
    std::swap(sum_, other->sum_);
    std::swap(cnt_, other->cnt_);
    std::swap(freq_min_, other->freq_min_);
    std::swap(freq_max_, other->freq_max_);
    std::swap(freq_avr_, other->freq_avr_);
    std::swap(overhigh_, other->overhigh_);
    std::swap(underlow_, other->underlow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotData_descriptor_;
  metadata.reflection = RotData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel_manager

// @@protoc_insertion_point(global_scope)
