// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hardware_monitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hardware_monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hardware_monitor {

namespace {

const ::google::protobuf::Descriptor* BatteryInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatteryInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemperatureInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemperatureInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardwareMonitoringClientInitParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardwareMonitoringClientInitParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* HwmonLoggingParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HwmonLoggingParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeTM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeTM_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceMemory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceMemory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hardware_5fmonitor_2eproto() {
  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hardware_monitor.proto");
  GOOGLE_CHECK(file != NULL);
  BatteryInformation_descriptor_ = file->message_type(0);
  static const int BatteryInformation_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, is_bm_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, is_charging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, is_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, shdn_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, battery_presense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, outer_power_presense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, alarm_low_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, no_connect_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, val_base_charge_uah_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, val_current_charge_uah_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, val_icharge_ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, val_ucharge_mv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, fullchg_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, fastchg_bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, hex_current_charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, charge_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, minutes_left_),
  };
  BatteryInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatteryInformation_descriptor_,
      BatteryInformation::default_instance_,
      BatteryInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatteryInformation));
  TemperatureInformation_descriptor_ = file->message_type(1);
  static const int TemperatureInformation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureInformation, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureInformation, t_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureInformation, t_max_),
  };
  TemperatureInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemperatureInformation_descriptor_,
      TemperatureInformation::default_instance_,
      TemperatureInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemperatureInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemperatureInformation));
  ButtonInformation_descriptor_ = file->message_type(2);
  static const int ButtonInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonInformation, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonInformation, is_pressed_),
  };
  ButtonInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonInformation_descriptor_,
      ButtonInformation::default_instance_,
      ButtonInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonInformation));
  HardwareMonitoringClientInitParams_descriptor_ = file->message_type(3);
  static const int HardwareMonitoringClientInitParams_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, srv_conn_wait_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, srv_conn_retry_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, journal_ipc_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, journal_ipc_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, hwserver_ipc_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, hwserver_ipc_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, own_ipc_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, own_ipc_key_),
  };
  HardwareMonitoringClientInitParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HardwareMonitoringClientInitParams_descriptor_,
      HardwareMonitoringClientInitParams::default_instance_,
      HardwareMonitoringClientInitParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareMonitoringClientInitParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HardwareMonitoringClientInitParams));
  HwmonLoggingParams_descriptor_ = file->message_type(4);
  static const int HwmonLoggingParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, hwclient_console_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, hwclient_file_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, hwclientdaemon_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, main_console_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, main_file_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, main_daemon_level_),
  };
  HwmonLoggingParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HwmonLoggingParams_descriptor_,
      HwmonLoggingParams::default_instance_,
      HwmonLoggingParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HwmonLoggingParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HwmonLoggingParams));
  SubscriptionMask_descriptor_ = file->message_type(5);
  static const int SubscriptionMask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, battery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, cpu_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, pbutton_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, pbutton_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, local_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, device_memory_),
  };
  SubscriptionMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionMask_descriptor_,
      SubscriptionMask::default_instance_,
      SubscriptionMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionMask));
  ServerVersion_descriptor_ = file->message_type(6);
  static const int ServerVersion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, build_),
  };
  ServerVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerVersion_descriptor_,
      ServerVersion::default_instance_,
      ServerVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerVersion));
  TimeTM_descriptor_ = file->message_type(7);
  static const int TimeTM_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_mday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_mon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_wday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_yday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, tm_isdst_),
  };
  TimeTM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeTM_descriptor_,
      TimeTM::default_instance_,
      TimeTM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeTM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeTM));
  DeviceMemory_descriptor_ = file->message_type(8);
  static const int DeviceMemory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, ram_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, ram_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, flash_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, flash_free_),
  };
  DeviceMemory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceMemory_descriptor_,
      DeviceMemory::default_instance_,
      DeviceMemory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceMemory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceMemory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hardware_5fmonitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatteryInformation_descriptor_, &BatteryInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemperatureInformation_descriptor_, &TemperatureInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonInformation_descriptor_, &ButtonInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HardwareMonitoringClientInitParams_descriptor_, &HardwareMonitoringClientInitParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HwmonLoggingParams_descriptor_, &HwmonLoggingParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionMask_descriptor_, &SubscriptionMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerVersion_descriptor_, &ServerVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeTM_descriptor_, &TimeTM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceMemory_descriptor_, &DeviceMemory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hardware_5fmonitor_2eproto() {
  delete BatteryInformation::default_instance_;
  delete BatteryInformation_reflection_;
  delete TemperatureInformation::default_instance_;
  delete TemperatureInformation_reflection_;
  delete ButtonInformation::default_instance_;
  delete ButtonInformation_reflection_;
  delete HardwareMonitoringClientInitParams::default_instance_;
  delete HardwareMonitoringClientInitParams_reflection_;
  delete HardwareMonitoringClientInitParams::_default_journal_ipc_path_;
  delete HardwareMonitoringClientInitParams::_default_hwserver_ipc_path_;
  delete HardwareMonitoringClientInitParams::_default_own_ipc_path_;
  delete HwmonLoggingParams::default_instance_;
  delete HwmonLoggingParams_reflection_;
  delete SubscriptionMask::default_instance_;
  delete SubscriptionMask_reflection_;
  delete ServerVersion::default_instance_;
  delete ServerVersion_reflection_;
  delete TimeTM::default_instance_;
  delete TimeTM_reflection_;
  delete DeviceMemory::default_instance_;
  delete DeviceMemory_reflection_;
}

void protobuf_AddDesc_hardware_5fmonitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026hardware_monitor.proto\022\020hardware_monit"
    "or\"\317\003\n\022BatteryInformation\022\022\n\nerror_code\030"
    "\001 \002(\021\022\027\n\017is_bm_connected\030\002 \001(\010\022\023\n\013is_cha"
    "rging\030\003 \001(\010\022\020\n\010is_fault\030\004 \001(\010\022\022\n\nshdn_st"
    "ate\030\005 \001(\010\022\030\n\020battery_presense\030\006 \001(\010\022\034\n\024o"
    "uter_power_presense\030\007 \001(\010\022\031\n\021alarm_low_v"
    "oltage\030\010 \001(\010\022\035\n\022no_connect_counter\030\t \001(\r"
    ":\0010\022\033\n\023val_base_charge_uAh\030\n \001(\021\022\036\n\026val_"
    "current_charge_uAh\030\013 \001(\021\022\026\n\016val_icharge_"
    "uA\030\014 \001(\021\022\026\n\016val_ucharge_mV\030\r \001(\r\022\023\n\013full"
    "chg_bit\030\016 \001(\010\022\023\n\013fastchg_bit\030\017 \001(\010\022\032\n\022he"
    "x_current_charge\030\020 \001(\r\022\026\n\016charge_percent"
    "\030\021 \001(\r\022\024\n\014minutes_left\030\022 \001(\r\"J\n\026Temperat"
    "ureInformation\022\022\n\nerror_code\030\001 \002(\021\022\r\n\005t_"
    "min\030\002 \002(\001\022\r\n\005t_max\030\003 \002(\001\";\n\021ButtonInform"
    "ation\022\022\n\nerror_code\030\001 \002(\021\022\022\n\nis_pressed\030"
    "\002 \002(\010\"\241\002\n\"HardwareMonitoringClientInitPa"
    "rams\022\037\n\022srv_conn_wait_msec\030\001 \002(\r:\003500\022\035\n"
    "\022srv_conn_retry_cnt\030\002 \002(\r:\0014\022$\n\020journal_"
    "ipc_path\030\003 \001(\t:\n/mnt/share\022\033\n\017journal_ip"
    "c_key\030\004 \001(\r:\00245\022%\n\021hwserver_ipc_path\030\005 \001"
    "(\t:\n/mnt/share\022\034\n\020hwserver_ipc_key\030\006 \001(\r"
    ":\00244\022\032\n\014own_ipc_path\030\007 \001(\t:\004/etc\022\027\n\013own_"
    "ipc_key\030\010 \001(\r:\00222\"\277\001\n\022HwmonLoggingParams"
    "\022\036\n\026hwclient_console_level\030\001 \002(\r\022\033\n\023hwcl"
    "ient_file_level\030\002 \002(\r\022\034\n\024hwclientdaemon_"
    "level\030\003 \002(\r\022\032\n\022main_console_level\030\007 \002(\r\022"
    "\027\n\017main_file_level\030\010 \002(\r\022\031\n\021main_daemon_"
    "level\030\t \002(\r\"\251\001\n\020SubscriptionMask\022\022\n\nerro"
    "r_code\030\001 \002(\021\022\017\n\007battery\030\002 \001(\010\022\027\n\017cpu_tem"
    "perature\030\003 \001(\010\022\024\n\014pbutton_info\030\004 \001(\010\022\026\n\016"
    "pbutton_action\030\005 \001(\010\022\022\n\nlocal_time\030\006 \001(\010"
    "\022\025\n\rdevice_memory\030\007 \001(\010\"P\n\rServerVersion"
    "\022\022\n\nerror_code\030\001 \002(\021\022\r\n\005major\030\002 \002(\r\022\r\n\005m"
    "inor\030\003 \002(\r\022\r\n\005build\030\004 \002(\t\"\263\001\n\006TimeTM\022\022\n\n"
    "error_code\030\001 \002(\021\022\016\n\006tm_sec\030\002 \001(\r\022\016\n\006tm_m"
    "in\030\003 \001(\r\022\017\n\007tm_hour\030\004 \001(\r\022\017\n\007tm_mday\030\005 \001"
    "(\r\022\016\n\006tm_mon\030\006 \001(\r\022\017\n\007tm_year\030\007 \001(\r\022\017\n\007t"
    "m_wday\030\010 \001(\r\022\017\n\007tm_yday\030\t \001(\r\022\020\n\010tm_isds"
    "t\030\n \001(\r\"p\n\014DeviceMemory\022\022\n\nerror_code\030\001 "
    "\002(\021\022\021\n\tram_total\030\002 \001(\r\022\020\n\010ram_free\030\003 \001(\r"
    "\022\023\n\013flash_total\030\004 \001(\r\022\022\n\nflash_free\030\005 \001("
    "\r", 1681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hardware_monitor.proto", &protobuf_RegisterTypes);
  BatteryInformation::default_instance_ = new BatteryInformation();
  TemperatureInformation::default_instance_ = new TemperatureInformation();
  ButtonInformation::default_instance_ = new ButtonInformation();
  HardwareMonitoringClientInitParams::_default_journal_ipc_path_ =
      new ::std::string("/mnt/share", 10);
  HardwareMonitoringClientInitParams::_default_hwserver_ipc_path_ =
      new ::std::string("/mnt/share", 10);
  HardwareMonitoringClientInitParams::_default_own_ipc_path_ =
      new ::std::string("/etc", 4);
  HardwareMonitoringClientInitParams::default_instance_ = new HardwareMonitoringClientInitParams();
  HwmonLoggingParams::default_instance_ = new HwmonLoggingParams();
  SubscriptionMask::default_instance_ = new SubscriptionMask();
  ServerVersion::default_instance_ = new ServerVersion();
  TimeTM::default_instance_ = new TimeTM();
  DeviceMemory::default_instance_ = new DeviceMemory();
  BatteryInformation::default_instance_->InitAsDefaultInstance();
  TemperatureInformation::default_instance_->InitAsDefaultInstance();
  ButtonInformation::default_instance_->InitAsDefaultInstance();
  HardwareMonitoringClientInitParams::default_instance_->InitAsDefaultInstance();
  HwmonLoggingParams::default_instance_->InitAsDefaultInstance();
  SubscriptionMask::default_instance_->InitAsDefaultInstance();
  ServerVersion::default_instance_->InitAsDefaultInstance();
  TimeTM::default_instance_->InitAsDefaultInstance();
  DeviceMemory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hardware_5fmonitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hardware_5fmonitor_2eproto {
  StaticDescriptorInitializer_hardware_5fmonitor_2eproto() {
    protobuf_AddDesc_hardware_5fmonitor_2eproto();
  }
} static_descriptor_initializer_hardware_5fmonitor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BatteryInformation::kErrorCodeFieldNumber;
const int BatteryInformation::kIsBmConnectedFieldNumber;
const int BatteryInformation::kIsChargingFieldNumber;
const int BatteryInformation::kIsFaultFieldNumber;
const int BatteryInformation::kShdnStateFieldNumber;
const int BatteryInformation::kBatteryPresenseFieldNumber;
const int BatteryInformation::kOuterPowerPresenseFieldNumber;
const int BatteryInformation::kAlarmLowVoltageFieldNumber;
const int BatteryInformation::kNoConnectCounterFieldNumber;
const int BatteryInformation::kValBaseChargeUAhFieldNumber;
const int BatteryInformation::kValCurrentChargeUAhFieldNumber;
const int BatteryInformation::kValIchargeUAFieldNumber;
const int BatteryInformation::kValUchargeMVFieldNumber;
const int BatteryInformation::kFullchgBitFieldNumber;
const int BatteryInformation::kFastchgBitFieldNumber;
const int BatteryInformation::kHexCurrentChargeFieldNumber;
const int BatteryInformation::kChargePercentFieldNumber;
const int BatteryInformation::kMinutesLeftFieldNumber;
#endif  // !_MSC_VER

BatteryInformation::BatteryInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.BatteryInformation)
}

void BatteryInformation::InitAsDefaultInstance() {
}

BatteryInformation::BatteryInformation(const BatteryInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.BatteryInformation)
}

void BatteryInformation::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  is_bm_connected_ = false;
  is_charging_ = false;
  is_fault_ = false;
  shdn_state_ = false;
  battery_presense_ = false;
  outer_power_presense_ = false;
  alarm_low_voltage_ = false;
  no_connect_counter_ = 0u;
  val_base_charge_uah_ = 0;
  val_current_charge_uah_ = 0;
  val_icharge_ua_ = 0;
  val_ucharge_mv_ = 0u;
  fullchg_bit_ = false;
  fastchg_bit_ = false;
  hex_current_charge_ = 0u;
  charge_percent_ = 0u;
  minutes_left_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatteryInformation::~BatteryInformation() {
  // @@protoc_insertion_point(destructor:hardware_monitor.BatteryInformation)
  SharedDtor();
}

void BatteryInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatteryInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatteryInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatteryInformation_descriptor_;
}

const BatteryInformation& BatteryInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

BatteryInformation* BatteryInformation::default_instance_ = NULL;

BatteryInformation* BatteryInformation::New() const {
  return new BatteryInformation;
}

void BatteryInformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatteryInformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(error_code_, alarm_low_voltage_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(fullchg_bit_, hex_current_charge_);
  }
  ZR_(charge_percent_, minutes_left_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatteryInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.BatteryInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_bm_connected;
        break;
      }

      // optional bool is_bm_connected = 2;
      case 2: {
        if (tag == 16) {
         parse_is_bm_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bm_connected_)));
          set_has_is_bm_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_charging;
        break;
      }

      // optional bool is_charging = 3;
      case 3: {
        if (tag == 24) {
         parse_is_charging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_charging_)));
          set_has_is_charging();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_fault;
        break;
      }

      // optional bool is_fault = 4;
      case 4: {
        if (tag == 32) {
         parse_is_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fault_)));
          set_has_is_fault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_shdn_state;
        break;
      }

      // optional bool shdn_state = 5;
      case 5: {
        if (tag == 40) {
         parse_shdn_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shdn_state_)));
          set_has_shdn_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_battery_presense;
        break;
      }

      // optional bool battery_presense = 6;
      case 6: {
        if (tag == 48) {
         parse_battery_presense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battery_presense_)));
          set_has_battery_presense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_outer_power_presense;
        break;
      }

      // optional bool outer_power_presense = 7;
      case 7: {
        if (tag == 56) {
         parse_outer_power_presense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &outer_power_presense_)));
          set_has_outer_power_presense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_alarm_low_voltage;
        break;
      }

      // optional bool alarm_low_voltage = 8;
      case 8: {
        if (tag == 64) {
         parse_alarm_low_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alarm_low_voltage_)));
          set_has_alarm_low_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_no_connect_counter;
        break;
      }

      // optional uint32 no_connect_counter = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_no_connect_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_connect_counter_)));
          set_has_no_connect_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_val_base_charge_uAh;
        break;
      }

      // optional sint32 val_base_charge_uAh = 10;
      case 10: {
        if (tag == 80) {
         parse_val_base_charge_uAh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_base_charge_uah_)));
          set_has_val_base_charge_uah();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_val_current_charge_uAh;
        break;
      }

      // optional sint32 val_current_charge_uAh = 11;
      case 11: {
        if (tag == 88) {
         parse_val_current_charge_uAh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_current_charge_uah_)));
          set_has_val_current_charge_uah();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_val_icharge_uA;
        break;
      }

      // optional sint32 val_icharge_uA = 12;
      case 12: {
        if (tag == 96) {
         parse_val_icharge_uA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_icharge_ua_)));
          set_has_val_icharge_ua();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_val_ucharge_mV;
        break;
      }

      // optional uint32 val_ucharge_mV = 13;
      case 13: {
        if (tag == 104) {
         parse_val_ucharge_mV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_ucharge_mv_)));
          set_has_val_ucharge_mv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_fullchg_bit;
        break;
      }

      // optional bool fullchg_bit = 14;
      case 14: {
        if (tag == 112) {
         parse_fullchg_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fullchg_bit_)));
          set_has_fullchg_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_fastchg_bit;
        break;
      }

      // optional bool fastchg_bit = 15;
      case 15: {
        if (tag == 120) {
         parse_fastchg_bit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fastchg_bit_)));
          set_has_fastchg_bit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_hex_current_charge;
        break;
      }

      // optional uint32 hex_current_charge = 16;
      case 16: {
        if (tag == 128) {
         parse_hex_current_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hex_current_charge_)));
          set_has_hex_current_charge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_charge_percent;
        break;
      }

      // optional uint32 charge_percent = 17;
      case 17: {
        if (tag == 136) {
         parse_charge_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_percent_)));
          set_has_charge_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_minutes_left;
        break;
      }

      // optional uint32 minutes_left = 18;
      case 18: {
        if (tag == 144) {
         parse_minutes_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minutes_left_)));
          set_has_minutes_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.BatteryInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.BatteryInformation)
  return false;
#undef DO_
}

void BatteryInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.BatteryInformation)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional bool is_bm_connected = 2;
  if (has_is_bm_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_bm_connected(), output);
  }

  // optional bool is_charging = 3;
  if (has_is_charging()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_charging(), output);
  }

  // optional bool is_fault = 4;
  if (has_is_fault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_fault(), output);
  }

  // optional bool shdn_state = 5;
  if (has_shdn_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shdn_state(), output);
  }

  // optional bool battery_presense = 6;
  if (has_battery_presense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->battery_presense(), output);
  }

  // optional bool outer_power_presense = 7;
  if (has_outer_power_presense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->outer_power_presense(), output);
  }

  // optional bool alarm_low_voltage = 8;
  if (has_alarm_low_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->alarm_low_voltage(), output);
  }

  // optional uint32 no_connect_counter = 9 [default = 0];
  if (has_no_connect_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->no_connect_counter(), output);
  }

  // optional sint32 val_base_charge_uAh = 10;
  if (has_val_base_charge_uah()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->val_base_charge_uah(), output);
  }

  // optional sint32 val_current_charge_uAh = 11;
  if (has_val_current_charge_uah()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->val_current_charge_uah(), output);
  }

  // optional sint32 val_icharge_uA = 12;
  if (has_val_icharge_ua()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->val_icharge_ua(), output);
  }

  // optional uint32 val_ucharge_mV = 13;
  if (has_val_ucharge_mv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->val_ucharge_mv(), output);
  }

  // optional bool fullchg_bit = 14;
  if (has_fullchg_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fullchg_bit(), output);
  }

  // optional bool fastchg_bit = 15;
  if (has_fastchg_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fastchg_bit(), output);
  }

  // optional uint32 hex_current_charge = 16;
  if (has_hex_current_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hex_current_charge(), output);
  }

  // optional uint32 charge_percent = 17;
  if (has_charge_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->charge_percent(), output);
  }

  // optional uint32 minutes_left = 18;
  if (has_minutes_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->minutes_left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.BatteryInformation)
}

::google::protobuf::uint8* BatteryInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.BatteryInformation)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional bool is_bm_connected = 2;
  if (has_is_bm_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_bm_connected(), target);
  }

  // optional bool is_charging = 3;
  if (has_is_charging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_charging(), target);
  }

  // optional bool is_fault = 4;
  if (has_is_fault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_fault(), target);
  }

  // optional bool shdn_state = 5;
  if (has_shdn_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shdn_state(), target);
  }

  // optional bool battery_presense = 6;
  if (has_battery_presense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->battery_presense(), target);
  }

  // optional bool outer_power_presense = 7;
  if (has_outer_power_presense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->outer_power_presense(), target);
  }

  // optional bool alarm_low_voltage = 8;
  if (has_alarm_low_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->alarm_low_voltage(), target);
  }

  // optional uint32 no_connect_counter = 9 [default = 0];
  if (has_no_connect_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->no_connect_counter(), target);
  }

  // optional sint32 val_base_charge_uAh = 10;
  if (has_val_base_charge_uah()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->val_base_charge_uah(), target);
  }

  // optional sint32 val_current_charge_uAh = 11;
  if (has_val_current_charge_uah()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->val_current_charge_uah(), target);
  }

  // optional sint32 val_icharge_uA = 12;
  if (has_val_icharge_ua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->val_icharge_ua(), target);
  }

  // optional uint32 val_ucharge_mV = 13;
  if (has_val_ucharge_mv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->val_ucharge_mv(), target);
  }

  // optional bool fullchg_bit = 14;
  if (has_fullchg_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fullchg_bit(), target);
  }

  // optional bool fastchg_bit = 15;
  if (has_fastchg_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fastchg_bit(), target);
  }

  // optional uint32 hex_current_charge = 16;
  if (has_hex_current_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hex_current_charge(), target);
  }

  // optional uint32 charge_percent = 17;
  if (has_charge_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->charge_percent(), target);
  }

  // optional uint32 minutes_left = 18;
  if (has_minutes_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->minutes_left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.BatteryInformation)
  return target;
}

int BatteryInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // optional bool is_bm_connected = 2;
    if (has_is_bm_connected()) {
      total_size += 1 + 1;
    }

    // optional bool is_charging = 3;
    if (has_is_charging()) {
      total_size += 1 + 1;
    }

    // optional bool is_fault = 4;
    if (has_is_fault()) {
      total_size += 1 + 1;
    }

    // optional bool shdn_state = 5;
    if (has_shdn_state()) {
      total_size += 1 + 1;
    }

    // optional bool battery_presense = 6;
    if (has_battery_presense()) {
      total_size += 1 + 1;
    }

    // optional bool outer_power_presense = 7;
    if (has_outer_power_presense()) {
      total_size += 1 + 1;
    }

    // optional bool alarm_low_voltage = 8;
    if (has_alarm_low_voltage()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 no_connect_counter = 9 [default = 0];
    if (has_no_connect_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_connect_counter());
    }

    // optional sint32 val_base_charge_uAh = 10;
    if (has_val_base_charge_uah()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->val_base_charge_uah());
    }

    // optional sint32 val_current_charge_uAh = 11;
    if (has_val_current_charge_uah()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->val_current_charge_uah());
    }

    // optional sint32 val_icharge_uA = 12;
    if (has_val_icharge_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->val_icharge_ua());
    }

    // optional uint32 val_ucharge_mV = 13;
    if (has_val_ucharge_mv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val_ucharge_mv());
    }

    // optional bool fullchg_bit = 14;
    if (has_fullchg_bit()) {
      total_size += 1 + 1;
    }

    // optional bool fastchg_bit = 15;
    if (has_fastchg_bit()) {
      total_size += 1 + 1;
    }

    // optional uint32 hex_current_charge = 16;
    if (has_hex_current_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hex_current_charge());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 charge_percent = 17;
    if (has_charge_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge_percent());
    }

    // optional uint32 minutes_left = 18;
    if (has_minutes_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minutes_left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatteryInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatteryInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatteryInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatteryInformation::MergeFrom(const BatteryInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_is_bm_connected()) {
      set_is_bm_connected(from.is_bm_connected());
    }
    if (from.has_is_charging()) {
      set_is_charging(from.is_charging());
    }
    if (from.has_is_fault()) {
      set_is_fault(from.is_fault());
    }
    if (from.has_shdn_state()) {
      set_shdn_state(from.shdn_state());
    }
    if (from.has_battery_presense()) {
      set_battery_presense(from.battery_presense());
    }
    if (from.has_outer_power_presense()) {
      set_outer_power_presense(from.outer_power_presense());
    }
    if (from.has_alarm_low_voltage()) {
      set_alarm_low_voltage(from.alarm_low_voltage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_no_connect_counter()) {
      set_no_connect_counter(from.no_connect_counter());
    }
    if (from.has_val_base_charge_uah()) {
      set_val_base_charge_uah(from.val_base_charge_uah());
    }
    if (from.has_val_current_charge_uah()) {
      set_val_current_charge_uah(from.val_current_charge_uah());
    }
    if (from.has_val_icharge_ua()) {
      set_val_icharge_ua(from.val_icharge_ua());
    }
    if (from.has_val_ucharge_mv()) {
      set_val_ucharge_mv(from.val_ucharge_mv());
    }
    if (from.has_fullchg_bit()) {
      set_fullchg_bit(from.fullchg_bit());
    }
    if (from.has_fastchg_bit()) {
      set_fastchg_bit(from.fastchg_bit());
    }
    if (from.has_hex_current_charge()) {
      set_hex_current_charge(from.hex_current_charge());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_charge_percent()) {
      set_charge_percent(from.charge_percent());
    }
    if (from.has_minutes_left()) {
      set_minutes_left(from.minutes_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatteryInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryInformation::CopyFrom(const BatteryInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BatteryInformation::Swap(BatteryInformation* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(is_bm_connected_, other->is_bm_connected_);
    std::swap(is_charging_, other->is_charging_);
    std::swap(is_fault_, other->is_fault_);
    std::swap(shdn_state_, other->shdn_state_);
    std::swap(battery_presense_, other->battery_presense_);
    std::swap(outer_power_presense_, other->outer_power_presense_);
    std::swap(alarm_low_voltage_, other->alarm_low_voltage_);
    std::swap(no_connect_counter_, other->no_connect_counter_);
    std::swap(val_base_charge_uah_, other->val_base_charge_uah_);
    std::swap(val_current_charge_uah_, other->val_current_charge_uah_);
    std::swap(val_icharge_ua_, other->val_icharge_ua_);
    std::swap(val_ucharge_mv_, other->val_ucharge_mv_);
    std::swap(fullchg_bit_, other->fullchg_bit_);
    std::swap(fastchg_bit_, other->fastchg_bit_);
    std::swap(hex_current_charge_, other->hex_current_charge_);
    std::swap(charge_percent_, other->charge_percent_);
    std::swap(minutes_left_, other->minutes_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatteryInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatteryInformation_descriptor_;
  metadata.reflection = BatteryInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemperatureInformation::kErrorCodeFieldNumber;
const int TemperatureInformation::kTMinFieldNumber;
const int TemperatureInformation::kTMaxFieldNumber;
#endif  // !_MSC_VER

TemperatureInformation::TemperatureInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.TemperatureInformation)
}

void TemperatureInformation::InitAsDefaultInstance() {
}

TemperatureInformation::TemperatureInformation(const TemperatureInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.TemperatureInformation)
}

void TemperatureInformation::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  t_min_ = 0;
  t_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemperatureInformation::~TemperatureInformation() {
  // @@protoc_insertion_point(destructor:hardware_monitor.TemperatureInformation)
  SharedDtor();
}

void TemperatureInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TemperatureInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemperatureInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemperatureInformation_descriptor_;
}

const TemperatureInformation& TemperatureInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

TemperatureInformation* TemperatureInformation::default_instance_ = NULL;

TemperatureInformation* TemperatureInformation::New() const {
  return new TemperatureInformation;
}

void TemperatureInformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TemperatureInformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(t_min_, error_code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemperatureInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.TemperatureInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t_min;
        break;
      }

      // required double t_min = 2;
      case 2: {
        if (tag == 17) {
         parse_t_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_min_)));
          set_has_t_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_t_max;
        break;
      }

      // required double t_max = 3;
      case 3: {
        if (tag == 25) {
         parse_t_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_max_)));
          set_has_t_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.TemperatureInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.TemperatureInformation)
  return false;
#undef DO_
}

void TemperatureInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.TemperatureInformation)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // required double t_min = 2;
  if (has_t_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t_min(), output);
  }

  // required double t_max = 3;
  if (has_t_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.TemperatureInformation)
}

::google::protobuf::uint8* TemperatureInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.TemperatureInformation)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // required double t_min = 2;
  if (has_t_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t_min(), target);
  }

  // required double t_max = 3;
  if (has_t_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.TemperatureInformation)
  return target;
}

int TemperatureInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // required double t_min = 2;
    if (has_t_min()) {
      total_size += 1 + 8;
    }

    // required double t_max = 3;
    if (has_t_max()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemperatureInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemperatureInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemperatureInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemperatureInformation::MergeFrom(const TemperatureInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_t_min()) {
      set_t_min(from.t_min());
    }
    if (from.has_t_max()) {
      set_t_max(from.t_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemperatureInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureInformation::CopyFrom(const TemperatureInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TemperatureInformation::Swap(TemperatureInformation* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(t_min_, other->t_min_);
    std::swap(t_max_, other->t_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemperatureInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemperatureInformation_descriptor_;
  metadata.reflection = TemperatureInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ButtonInformation::kErrorCodeFieldNumber;
const int ButtonInformation::kIsPressedFieldNumber;
#endif  // !_MSC_VER

ButtonInformation::ButtonInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.ButtonInformation)
}

void ButtonInformation::InitAsDefaultInstance() {
}

ButtonInformation::ButtonInformation(const ButtonInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.ButtonInformation)
}

void ButtonInformation::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  is_pressed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonInformation::~ButtonInformation() {
  // @@protoc_insertion_point(destructor:hardware_monitor.ButtonInformation)
  SharedDtor();
}

void ButtonInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonInformation_descriptor_;
}

const ButtonInformation& ButtonInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

ButtonInformation* ButtonInformation::default_instance_ = NULL;

ButtonInformation* ButtonInformation::New() const {
  return new ButtonInformation;
}

void ButtonInformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ButtonInformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(error_code_, is_pressed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.ButtonInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_pressed;
        break;
      }

      // required bool is_pressed = 2;
      case 2: {
        if (tag == 16) {
         parse_is_pressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pressed_)));
          set_has_is_pressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.ButtonInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.ButtonInformation)
  return false;
#undef DO_
}

void ButtonInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.ButtonInformation)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // required bool is_pressed = 2;
  if (has_is_pressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pressed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.ButtonInformation)
}

::google::protobuf::uint8* ButtonInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.ButtonInformation)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // required bool is_pressed = 2;
  if (has_is_pressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pressed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.ButtonInformation)
  return target;
}

int ButtonInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // required bool is_pressed = 2;
    if (has_is_pressed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonInformation::MergeFrom(const ButtonInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_is_pressed()) {
      set_is_pressed(from.is_pressed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonInformation::CopyFrom(const ButtonInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ButtonInformation::Swap(ButtonInformation* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(is_pressed_, other->is_pressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonInformation_descriptor_;
  metadata.reflection = ButtonInformation_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HardwareMonitoringClientInitParams::_default_journal_ipc_path_ = NULL;
::std::string* HardwareMonitoringClientInitParams::_default_hwserver_ipc_path_ = NULL;
::std::string* HardwareMonitoringClientInitParams::_default_own_ipc_path_ = NULL;
#ifndef _MSC_VER
const int HardwareMonitoringClientInitParams::kSrvConnWaitMsecFieldNumber;
const int HardwareMonitoringClientInitParams::kSrvConnRetryCntFieldNumber;
const int HardwareMonitoringClientInitParams::kJournalIpcPathFieldNumber;
const int HardwareMonitoringClientInitParams::kJournalIpcKeyFieldNumber;
const int HardwareMonitoringClientInitParams::kHwserverIpcPathFieldNumber;
const int HardwareMonitoringClientInitParams::kHwserverIpcKeyFieldNumber;
const int HardwareMonitoringClientInitParams::kOwnIpcPathFieldNumber;
const int HardwareMonitoringClientInitParams::kOwnIpcKeyFieldNumber;
#endif  // !_MSC_VER

HardwareMonitoringClientInitParams::HardwareMonitoringClientInitParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.HardwareMonitoringClientInitParams)
}

void HardwareMonitoringClientInitParams::InitAsDefaultInstance() {
}

HardwareMonitoringClientInitParams::HardwareMonitoringClientInitParams(const HardwareMonitoringClientInitParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.HardwareMonitoringClientInitParams)
}

void HardwareMonitoringClientInitParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  srv_conn_wait_msec_ = 500u;
  srv_conn_retry_cnt_ = 4u;
  journal_ipc_path_ = const_cast< ::std::string*>(_default_journal_ipc_path_);
  journal_ipc_key_ = 45u;
  hwserver_ipc_path_ = const_cast< ::std::string*>(_default_hwserver_ipc_path_);
  hwserver_ipc_key_ = 44u;
  own_ipc_path_ = const_cast< ::std::string*>(_default_own_ipc_path_);
  own_ipc_key_ = 22u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardwareMonitoringClientInitParams::~HardwareMonitoringClientInitParams() {
  // @@protoc_insertion_point(destructor:hardware_monitor.HardwareMonitoringClientInitParams)
  SharedDtor();
}

void HardwareMonitoringClientInitParams::SharedDtor() {
  if (journal_ipc_path_ != _default_journal_ipc_path_) {
    delete journal_ipc_path_;
  }
  if (hwserver_ipc_path_ != _default_hwserver_ipc_path_) {
    delete hwserver_ipc_path_;
  }
  if (own_ipc_path_ != _default_own_ipc_path_) {
    delete own_ipc_path_;
  }
  if (this != default_instance_) {
  }
}

void HardwareMonitoringClientInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardwareMonitoringClientInitParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareMonitoringClientInitParams_descriptor_;
}

const HardwareMonitoringClientInitParams& HardwareMonitoringClientInitParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

HardwareMonitoringClientInitParams* HardwareMonitoringClientInitParams::default_instance_ = NULL;

HardwareMonitoringClientInitParams* HardwareMonitoringClientInitParams::New() const {
  return new HardwareMonitoringClientInitParams;
}

void HardwareMonitoringClientInitParams::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    srv_conn_wait_msec_ = 500u;
    srv_conn_retry_cnt_ = 4u;
    if (has_journal_ipc_path()) {
      if (journal_ipc_path_ != _default_journal_ipc_path_) {
        journal_ipc_path_->assign(*_default_journal_ipc_path_);
      }
    }
    journal_ipc_key_ = 45u;
    if (has_hwserver_ipc_path()) {
      if (hwserver_ipc_path_ != _default_hwserver_ipc_path_) {
        hwserver_ipc_path_->assign(*_default_hwserver_ipc_path_);
      }
    }
    hwserver_ipc_key_ = 44u;
    if (has_own_ipc_path()) {
      if (own_ipc_path_ != _default_own_ipc_path_) {
        own_ipc_path_->assign(*_default_own_ipc_path_);
      }
    }
    own_ipc_key_ = 22u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HardwareMonitoringClientInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.HardwareMonitoringClientInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 srv_conn_wait_msec = 1 [default = 500];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srv_conn_wait_msec_)));
          set_has_srv_conn_wait_msec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_srv_conn_retry_cnt;
        break;
      }

      // required uint32 srv_conn_retry_cnt = 2 [default = 4];
      case 2: {
        if (tag == 16) {
         parse_srv_conn_retry_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srv_conn_retry_cnt_)));
          set_has_srv_conn_retry_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_journal_ipc_path;
        break;
      }

      // optional string journal_ipc_path = 3 [default = "/mnt/share"];
      case 3: {
        if (tag == 26) {
         parse_journal_ipc_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_journal_ipc_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->journal_ipc_path().data(), this->journal_ipc_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "journal_ipc_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_journal_ipc_key;
        break;
      }

      // optional uint32 journal_ipc_key = 4 [default = 45];
      case 4: {
        if (tag == 32) {
         parse_journal_ipc_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &journal_ipc_key_)));
          set_has_journal_ipc_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hwserver_ipc_path;
        break;
      }

      // optional string hwserver_ipc_path = 5 [default = "/mnt/share"];
      case 5: {
        if (tag == 42) {
         parse_hwserver_ipc_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwserver_ipc_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hwserver_ipc_path().data(), this->hwserver_ipc_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hwserver_ipc_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hwserver_ipc_key;
        break;
      }

      // optional uint32 hwserver_ipc_key = 6 [default = 44];
      case 6: {
        if (tag == 48) {
         parse_hwserver_ipc_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwserver_ipc_key_)));
          set_has_hwserver_ipc_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_own_ipc_path;
        break;
      }

      // optional string own_ipc_path = 7 [default = "/etc"];
      case 7: {
        if (tag == 58) {
         parse_own_ipc_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_own_ipc_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->own_ipc_path().data(), this->own_ipc_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "own_ipc_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_own_ipc_key;
        break;
      }

      // optional uint32 own_ipc_key = 8 [default = 22];
      case 8: {
        if (tag == 64) {
         parse_own_ipc_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &own_ipc_key_)));
          set_has_own_ipc_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.HardwareMonitoringClientInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.HardwareMonitoringClientInitParams)
  return false;
#undef DO_
}

void HardwareMonitoringClientInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.HardwareMonitoringClientInitParams)
  // required uint32 srv_conn_wait_msec = 1 [default = 500];
  if (has_srv_conn_wait_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srv_conn_wait_msec(), output);
  }

  // required uint32 srv_conn_retry_cnt = 2 [default = 4];
  if (has_srv_conn_retry_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srv_conn_retry_cnt(), output);
  }

  // optional string journal_ipc_path = 3 [default = "/mnt/share"];
  if (has_journal_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journal_ipc_path().data(), this->journal_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "journal_ipc_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->journal_ipc_path(), output);
  }

  // optional uint32 journal_ipc_key = 4 [default = 45];
  if (has_journal_ipc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->journal_ipc_key(), output);
  }

  // optional string hwserver_ipc_path = 5 [default = "/mnt/share"];
  if (has_hwserver_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwserver_ipc_path().data(), this->hwserver_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hwserver_ipc_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hwserver_ipc_path(), output);
  }

  // optional uint32 hwserver_ipc_key = 6 [default = 44];
  if (has_hwserver_ipc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hwserver_ipc_key(), output);
  }

  // optional string own_ipc_path = 7 [default = "/etc"];
  if (has_own_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->own_ipc_path().data(), this->own_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "own_ipc_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->own_ipc_path(), output);
  }

  // optional uint32 own_ipc_key = 8 [default = 22];
  if (has_own_ipc_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->own_ipc_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.HardwareMonitoringClientInitParams)
}

::google::protobuf::uint8* HardwareMonitoringClientInitParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.HardwareMonitoringClientInitParams)
  // required uint32 srv_conn_wait_msec = 1 [default = 500];
  if (has_srv_conn_wait_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srv_conn_wait_msec(), target);
  }

  // required uint32 srv_conn_retry_cnt = 2 [default = 4];
  if (has_srv_conn_retry_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srv_conn_retry_cnt(), target);
  }

  // optional string journal_ipc_path = 3 [default = "/mnt/share"];
  if (has_journal_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journal_ipc_path().data(), this->journal_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "journal_ipc_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->journal_ipc_path(), target);
  }

  // optional uint32 journal_ipc_key = 4 [default = 45];
  if (has_journal_ipc_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->journal_ipc_key(), target);
  }

  // optional string hwserver_ipc_path = 5 [default = "/mnt/share"];
  if (has_hwserver_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwserver_ipc_path().data(), this->hwserver_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hwserver_ipc_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hwserver_ipc_path(), target);
  }

  // optional uint32 hwserver_ipc_key = 6 [default = 44];
  if (has_hwserver_ipc_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hwserver_ipc_key(), target);
  }

  // optional string own_ipc_path = 7 [default = "/etc"];
  if (has_own_ipc_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->own_ipc_path().data(), this->own_ipc_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "own_ipc_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->own_ipc_path(), target);
  }

  // optional uint32 own_ipc_key = 8 [default = 22];
  if (has_own_ipc_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->own_ipc_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.HardwareMonitoringClientInitParams)
  return target;
}

int HardwareMonitoringClientInitParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 srv_conn_wait_msec = 1 [default = 500];
    if (has_srv_conn_wait_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srv_conn_wait_msec());
    }

    // required uint32 srv_conn_retry_cnt = 2 [default = 4];
    if (has_srv_conn_retry_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srv_conn_retry_cnt());
    }

    // optional string journal_ipc_path = 3 [default = "/mnt/share"];
    if (has_journal_ipc_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->journal_ipc_path());
    }

    // optional uint32 journal_ipc_key = 4 [default = 45];
    if (has_journal_ipc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->journal_ipc_key());
    }

    // optional string hwserver_ipc_path = 5 [default = "/mnt/share"];
    if (has_hwserver_ipc_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwserver_ipc_path());
    }

    // optional uint32 hwserver_ipc_key = 6 [default = 44];
    if (has_hwserver_ipc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hwserver_ipc_key());
    }

    // optional string own_ipc_path = 7 [default = "/etc"];
    if (has_own_ipc_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->own_ipc_path());
    }

    // optional uint32 own_ipc_key = 8 [default = 22];
    if (has_own_ipc_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->own_ipc_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareMonitoringClientInitParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HardwareMonitoringClientInitParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HardwareMonitoringClientInitParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HardwareMonitoringClientInitParams::MergeFrom(const HardwareMonitoringClientInitParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srv_conn_wait_msec()) {
      set_srv_conn_wait_msec(from.srv_conn_wait_msec());
    }
    if (from.has_srv_conn_retry_cnt()) {
      set_srv_conn_retry_cnt(from.srv_conn_retry_cnt());
    }
    if (from.has_journal_ipc_path()) {
      set_journal_ipc_path(from.journal_ipc_path());
    }
    if (from.has_journal_ipc_key()) {
      set_journal_ipc_key(from.journal_ipc_key());
    }
    if (from.has_hwserver_ipc_path()) {
      set_hwserver_ipc_path(from.hwserver_ipc_path());
    }
    if (from.has_hwserver_ipc_key()) {
      set_hwserver_ipc_key(from.hwserver_ipc_key());
    }
    if (from.has_own_ipc_path()) {
      set_own_ipc_path(from.own_ipc_path());
    }
    if (from.has_own_ipc_key()) {
      set_own_ipc_key(from.own_ipc_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HardwareMonitoringClientInitParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareMonitoringClientInitParams::CopyFrom(const HardwareMonitoringClientInitParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareMonitoringClientInitParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HardwareMonitoringClientInitParams::Swap(HardwareMonitoringClientInitParams* other) {
  if (other != this) {
    std::swap(srv_conn_wait_msec_, other->srv_conn_wait_msec_);
    std::swap(srv_conn_retry_cnt_, other->srv_conn_retry_cnt_);
    std::swap(journal_ipc_path_, other->journal_ipc_path_);
    std::swap(journal_ipc_key_, other->journal_ipc_key_);
    std::swap(hwserver_ipc_path_, other->hwserver_ipc_path_);
    std::swap(hwserver_ipc_key_, other->hwserver_ipc_key_);
    std::swap(own_ipc_path_, other->own_ipc_path_);
    std::swap(own_ipc_key_, other->own_ipc_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HardwareMonitoringClientInitParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardwareMonitoringClientInitParams_descriptor_;
  metadata.reflection = HardwareMonitoringClientInitParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HwmonLoggingParams::kHwclientConsoleLevelFieldNumber;
const int HwmonLoggingParams::kHwclientFileLevelFieldNumber;
const int HwmonLoggingParams::kHwclientdaemonLevelFieldNumber;
const int HwmonLoggingParams::kMainConsoleLevelFieldNumber;
const int HwmonLoggingParams::kMainFileLevelFieldNumber;
const int HwmonLoggingParams::kMainDaemonLevelFieldNumber;
#endif  // !_MSC_VER

HwmonLoggingParams::HwmonLoggingParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.HwmonLoggingParams)
}

void HwmonLoggingParams::InitAsDefaultInstance() {
}

HwmonLoggingParams::HwmonLoggingParams(const HwmonLoggingParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.HwmonLoggingParams)
}

void HwmonLoggingParams::SharedCtor() {
  _cached_size_ = 0;
  hwclient_console_level_ = 0u;
  hwclient_file_level_ = 0u;
  hwclientdaemon_level_ = 0u;
  main_console_level_ = 0u;
  main_file_level_ = 0u;
  main_daemon_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HwmonLoggingParams::~HwmonLoggingParams() {
  // @@protoc_insertion_point(destructor:hardware_monitor.HwmonLoggingParams)
  SharedDtor();
}

void HwmonLoggingParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HwmonLoggingParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HwmonLoggingParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HwmonLoggingParams_descriptor_;
}

const HwmonLoggingParams& HwmonLoggingParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

HwmonLoggingParams* HwmonLoggingParams::default_instance_ = NULL;

HwmonLoggingParams* HwmonLoggingParams::New() const {
  return new HwmonLoggingParams;
}

void HwmonLoggingParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HwmonLoggingParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hwclient_console_level_, main_daemon_level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HwmonLoggingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.HwmonLoggingParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hwclient_console_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwclient_console_level_)));
          set_has_hwclient_console_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hwclient_file_level;
        break;
      }

      // required uint32 hwclient_file_level = 2;
      case 2: {
        if (tag == 16) {
         parse_hwclient_file_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwclient_file_level_)));
          set_has_hwclient_file_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hwclientdaemon_level;
        break;
      }

      // required uint32 hwclientdaemon_level = 3;
      case 3: {
        if (tag == 24) {
         parse_hwclientdaemon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwclientdaemon_level_)));
          set_has_hwclientdaemon_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_main_console_level;
        break;
      }

      // required uint32 main_console_level = 7;
      case 7: {
        if (tag == 56) {
         parse_main_console_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_console_level_)));
          set_has_main_console_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_main_file_level;
        break;
      }

      // required uint32 main_file_level = 8;
      case 8: {
        if (tag == 64) {
         parse_main_file_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_file_level_)));
          set_has_main_file_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_main_daemon_level;
        break;
      }

      // required uint32 main_daemon_level = 9;
      case 9: {
        if (tag == 72) {
         parse_main_daemon_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &main_daemon_level_)));
          set_has_main_daemon_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.HwmonLoggingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.HwmonLoggingParams)
  return false;
#undef DO_
}

void HwmonLoggingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.HwmonLoggingParams)
  // required uint32 hwclient_console_level = 1;
  if (has_hwclient_console_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hwclient_console_level(), output);
  }

  // required uint32 hwclient_file_level = 2;
  if (has_hwclient_file_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hwclient_file_level(), output);
  }

  // required uint32 hwclientdaemon_level = 3;
  if (has_hwclientdaemon_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hwclientdaemon_level(), output);
  }

  // required uint32 main_console_level = 7;
  if (has_main_console_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->main_console_level(), output);
  }

  // required uint32 main_file_level = 8;
  if (has_main_file_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->main_file_level(), output);
  }

  // required uint32 main_daemon_level = 9;
  if (has_main_daemon_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->main_daemon_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.HwmonLoggingParams)
}

::google::protobuf::uint8* HwmonLoggingParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.HwmonLoggingParams)
  // required uint32 hwclient_console_level = 1;
  if (has_hwclient_console_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hwclient_console_level(), target);
  }

  // required uint32 hwclient_file_level = 2;
  if (has_hwclient_file_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hwclient_file_level(), target);
  }

  // required uint32 hwclientdaemon_level = 3;
  if (has_hwclientdaemon_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hwclientdaemon_level(), target);
  }

  // required uint32 main_console_level = 7;
  if (has_main_console_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->main_console_level(), target);
  }

  // required uint32 main_file_level = 8;
  if (has_main_file_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->main_file_level(), target);
  }

  // required uint32 main_daemon_level = 9;
  if (has_main_daemon_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->main_daemon_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.HwmonLoggingParams)
  return target;
}

int HwmonLoggingParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hwclient_console_level = 1;
    if (has_hwclient_console_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hwclient_console_level());
    }

    // required uint32 hwclient_file_level = 2;
    if (has_hwclient_file_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hwclient_file_level());
    }

    // required uint32 hwclientdaemon_level = 3;
    if (has_hwclientdaemon_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hwclientdaemon_level());
    }

    // required uint32 main_console_level = 7;
    if (has_main_console_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_console_level());
    }

    // required uint32 main_file_level = 8;
    if (has_main_file_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_file_level());
    }

    // required uint32 main_daemon_level = 9;
    if (has_main_daemon_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->main_daemon_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HwmonLoggingParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HwmonLoggingParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HwmonLoggingParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HwmonLoggingParams::MergeFrom(const HwmonLoggingParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hwclient_console_level()) {
      set_hwclient_console_level(from.hwclient_console_level());
    }
    if (from.has_hwclient_file_level()) {
      set_hwclient_file_level(from.hwclient_file_level());
    }
    if (from.has_hwclientdaemon_level()) {
      set_hwclientdaemon_level(from.hwclientdaemon_level());
    }
    if (from.has_main_console_level()) {
      set_main_console_level(from.main_console_level());
    }
    if (from.has_main_file_level()) {
      set_main_file_level(from.main_file_level());
    }
    if (from.has_main_daemon_level()) {
      set_main_daemon_level(from.main_daemon_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HwmonLoggingParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HwmonLoggingParams::CopyFrom(const HwmonLoggingParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HwmonLoggingParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void HwmonLoggingParams::Swap(HwmonLoggingParams* other) {
  if (other != this) {
    std::swap(hwclient_console_level_, other->hwclient_console_level_);
    std::swap(hwclient_file_level_, other->hwclient_file_level_);
    std::swap(hwclientdaemon_level_, other->hwclientdaemon_level_);
    std::swap(main_console_level_, other->main_console_level_);
    std::swap(main_file_level_, other->main_file_level_);
    std::swap(main_daemon_level_, other->main_daemon_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HwmonLoggingParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HwmonLoggingParams_descriptor_;
  metadata.reflection = HwmonLoggingParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionMask::kErrorCodeFieldNumber;
const int SubscriptionMask::kBatteryFieldNumber;
const int SubscriptionMask::kCpuTemperatureFieldNumber;
const int SubscriptionMask::kPbuttonInfoFieldNumber;
const int SubscriptionMask::kPbuttonActionFieldNumber;
const int SubscriptionMask::kLocalTimeFieldNumber;
const int SubscriptionMask::kDeviceMemoryFieldNumber;
#endif  // !_MSC_VER

SubscriptionMask::SubscriptionMask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.SubscriptionMask)
}

void SubscriptionMask::InitAsDefaultInstance() {
}

SubscriptionMask::SubscriptionMask(const SubscriptionMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.SubscriptionMask)
}

void SubscriptionMask::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  battery_ = false;
  cpu_temperature_ = false;
  pbutton_info_ = false;
  pbutton_action_ = false;
  local_time_ = false;
  device_memory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionMask::~SubscriptionMask() {
  // @@protoc_insertion_point(destructor:hardware_monitor.SubscriptionMask)
  SharedDtor();
}

void SubscriptionMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionMask_descriptor_;
}

const SubscriptionMask& SubscriptionMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

SubscriptionMask* SubscriptionMask::default_instance_ = NULL;

SubscriptionMask* SubscriptionMask::New() const {
  return new SubscriptionMask;
}

void SubscriptionMask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubscriptionMask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(error_code_, device_memory_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.SubscriptionMask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battery;
        break;
      }

      // optional bool battery = 2;
      case 2: {
        if (tag == 16) {
         parse_battery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battery_)));
          set_has_battery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cpu_temperature;
        break;
      }

      // optional bool cpu_temperature = 3;
      case 3: {
        if (tag == 24) {
         parse_cpu_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cpu_temperature_)));
          set_has_cpu_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pbutton_info;
        break;
      }

      // optional bool pbutton_info = 4;
      case 4: {
        if (tag == 32) {
         parse_pbutton_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pbutton_info_)));
          set_has_pbutton_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pbutton_action;
        break;
      }

      // optional bool pbutton_action = 5;
      case 5: {
        if (tag == 40) {
         parse_pbutton_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pbutton_action_)));
          set_has_pbutton_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_local_time;
        break;
      }

      // optional bool local_time = 6;
      case 6: {
        if (tag == 48) {
         parse_local_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_time_)));
          set_has_local_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_device_memory;
        break;
      }

      // optional bool device_memory = 7;
      case 7: {
        if (tag == 56) {
         parse_device_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &device_memory_)));
          set_has_device_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.SubscriptionMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.SubscriptionMask)
  return false;
#undef DO_
}

void SubscriptionMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.SubscriptionMask)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional bool battery = 2;
  if (has_battery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->battery(), output);
  }

  // optional bool cpu_temperature = 3;
  if (has_cpu_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cpu_temperature(), output);
  }

  // optional bool pbutton_info = 4;
  if (has_pbutton_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pbutton_info(), output);
  }

  // optional bool pbutton_action = 5;
  if (has_pbutton_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pbutton_action(), output);
  }

  // optional bool local_time = 6;
  if (has_local_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->local_time(), output);
  }

  // optional bool device_memory = 7;
  if (has_device_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->device_memory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.SubscriptionMask)
}

::google::protobuf::uint8* SubscriptionMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.SubscriptionMask)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional bool battery = 2;
  if (has_battery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->battery(), target);
  }

  // optional bool cpu_temperature = 3;
  if (has_cpu_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->cpu_temperature(), target);
  }

  // optional bool pbutton_info = 4;
  if (has_pbutton_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pbutton_info(), target);
  }

  // optional bool pbutton_action = 5;
  if (has_pbutton_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pbutton_action(), target);
  }

  // optional bool local_time = 6;
  if (has_local_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->local_time(), target);
  }

  // optional bool device_memory = 7;
  if (has_device_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->device_memory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.SubscriptionMask)
  return target;
}

int SubscriptionMask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // optional bool battery = 2;
    if (has_battery()) {
      total_size += 1 + 1;
    }

    // optional bool cpu_temperature = 3;
    if (has_cpu_temperature()) {
      total_size += 1 + 1;
    }

    // optional bool pbutton_info = 4;
    if (has_pbutton_info()) {
      total_size += 1 + 1;
    }

    // optional bool pbutton_action = 5;
    if (has_pbutton_action()) {
      total_size += 1 + 1;
    }

    // optional bool local_time = 6;
    if (has_local_time()) {
      total_size += 1 + 1;
    }

    // optional bool device_memory = 7;
    if (has_device_memory()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionMask::MergeFrom(const SubscriptionMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_battery()) {
      set_battery(from.battery());
    }
    if (from.has_cpu_temperature()) {
      set_cpu_temperature(from.cpu_temperature());
    }
    if (from.has_pbutton_info()) {
      set_pbutton_info(from.pbutton_info());
    }
    if (from.has_pbutton_action()) {
      set_pbutton_action(from.pbutton_action());
    }
    if (from.has_local_time()) {
      set_local_time(from.local_time());
    }
    if (from.has_device_memory()) {
      set_device_memory(from.device_memory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionMask::CopyFrom(const SubscriptionMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionMask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscriptionMask::Swap(SubscriptionMask* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(battery_, other->battery_);
    std::swap(cpu_temperature_, other->cpu_temperature_);
    std::swap(pbutton_info_, other->pbutton_info_);
    std::swap(pbutton_action_, other->pbutton_action_);
    std::swap(local_time_, other->local_time_);
    std::swap(device_memory_, other->device_memory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionMask_descriptor_;
  metadata.reflection = SubscriptionMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerVersion::kErrorCodeFieldNumber;
const int ServerVersion::kMajorFieldNumber;
const int ServerVersion::kMinorFieldNumber;
const int ServerVersion::kBuildFieldNumber;
#endif  // !_MSC_VER

ServerVersion::ServerVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.ServerVersion)
}

void ServerVersion::InitAsDefaultInstance() {
}

ServerVersion::ServerVersion(const ServerVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.ServerVersion)
}

void ServerVersion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  major_ = 0u;
  minor_ = 0u;
  build_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerVersion::~ServerVersion() {
  // @@protoc_insertion_point(destructor:hardware_monitor.ServerVersion)
  SharedDtor();
}

void ServerVersion::SharedDtor() {
  if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_;
  }
  if (this != default_instance_) {
  }
}

void ServerVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerVersion_descriptor_;
}

const ServerVersion& ServerVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

ServerVersion* ServerVersion::default_instance_ = NULL;

ServerVersion* ServerVersion::New() const {
  return new ServerVersion;
}

void ServerVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(error_code_, major_);
    minor_ = 0u;
    if (has_build()) {
      if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        build_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.ServerVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_major;
        break;
      }

      // required uint32 major = 2;
      case 2: {
        if (tag == 16) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minor;
        break;
      }

      // required uint32 minor = 3;
      case 3: {
        if (tag == 24) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_build;
        break;
      }

      // required string build = 4;
      case 4: {
        if (tag == 34) {
         parse_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->build().data(), this->build().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "build");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.ServerVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.ServerVersion)
  return false;
#undef DO_
}

void ServerVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.ServerVersion)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // required uint32 major = 2;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->major(), output);
  }

  // required uint32 minor = 3;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minor(), output);
  }

  // required string build = 4;
  if (has_build()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build().data(), this->build().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "build");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->build(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.ServerVersion)
}

::google::protobuf::uint8* ServerVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.ServerVersion)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // required uint32 major = 2;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->major(), target);
  }

  // required uint32 minor = 3;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minor(), target);
  }

  // required string build = 4;
  if (has_build()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build().data(), this->build().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "build");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->build(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.ServerVersion)
  return target;
}

int ServerVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // required uint32 major = 2;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }

    // required uint32 minor = 3;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }

    // required string build = 4;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerVersion::MergeFrom(const ServerVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_build()) {
      set_build(from.build());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerVersion::CopyFrom(const ServerVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerVersion::Swap(ServerVersion* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(build_, other->build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerVersion_descriptor_;
  metadata.reflection = ServerVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeTM::kErrorCodeFieldNumber;
const int TimeTM::kTmSecFieldNumber;
const int TimeTM::kTmMinFieldNumber;
const int TimeTM::kTmHourFieldNumber;
const int TimeTM::kTmMdayFieldNumber;
const int TimeTM::kTmMonFieldNumber;
const int TimeTM::kTmYearFieldNumber;
const int TimeTM::kTmWdayFieldNumber;
const int TimeTM::kTmYdayFieldNumber;
const int TimeTM::kTmIsdstFieldNumber;
#endif  // !_MSC_VER

TimeTM::TimeTM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.TimeTM)
}

void TimeTM::InitAsDefaultInstance() {
}

TimeTM::TimeTM(const TimeTM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.TimeTM)
}

void TimeTM::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  tm_sec_ = 0u;
  tm_min_ = 0u;
  tm_hour_ = 0u;
  tm_mday_ = 0u;
  tm_mon_ = 0u;
  tm_year_ = 0u;
  tm_wday_ = 0u;
  tm_yday_ = 0u;
  tm_isdst_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeTM::~TimeTM() {
  // @@protoc_insertion_point(destructor:hardware_monitor.TimeTM)
  SharedDtor();
}

void TimeTM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeTM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeTM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeTM_descriptor_;
}

const TimeTM& TimeTM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

TimeTM* TimeTM::default_instance_ = NULL;

TimeTM* TimeTM::New() const {
  return new TimeTM;
}

void TimeTM::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeTM*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(error_code_, tm_wday_);
  }
  ZR_(tm_yday_, tm_isdst_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeTM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.TimeTM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tm_sec;
        break;
      }

      // optional uint32 tm_sec = 2;
      case 2: {
        if (tag == 16) {
         parse_tm_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_sec_)));
          set_has_tm_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tm_min;
        break;
      }

      // optional uint32 tm_min = 3;
      case 3: {
        if (tag == 24) {
         parse_tm_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_min_)));
          set_has_tm_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tm_hour;
        break;
      }

      // optional uint32 tm_hour = 4;
      case 4: {
        if (tag == 32) {
         parse_tm_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_hour_)));
          set_has_tm_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tm_mday;
        break;
      }

      // optional uint32 tm_mday = 5;
      case 5: {
        if (tag == 40) {
         parse_tm_mday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_mday_)));
          set_has_tm_mday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tm_mon;
        break;
      }

      // optional uint32 tm_mon = 6;
      case 6: {
        if (tag == 48) {
         parse_tm_mon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_mon_)));
          set_has_tm_mon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tm_year;
        break;
      }

      // optional uint32 tm_year = 7;
      case 7: {
        if (tag == 56) {
         parse_tm_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_year_)));
          set_has_tm_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tm_wday;
        break;
      }

      // optional uint32 tm_wday = 8;
      case 8: {
        if (tag == 64) {
         parse_tm_wday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_wday_)));
          set_has_tm_wday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tm_yday;
        break;
      }

      // optional uint32 tm_yday = 9;
      case 9: {
        if (tag == 72) {
         parse_tm_yday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_yday_)));
          set_has_tm_yday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tm_isdst;
        break;
      }

      // optional uint32 tm_isdst = 10;
      case 10: {
        if (tag == 80) {
         parse_tm_isdst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_isdst_)));
          set_has_tm_isdst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.TimeTM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.TimeTM)
  return false;
#undef DO_
}

void TimeTM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.TimeTM)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional uint32 tm_sec = 2;
  if (has_tm_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tm_sec(), output);
  }

  // optional uint32 tm_min = 3;
  if (has_tm_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tm_min(), output);
  }

  // optional uint32 tm_hour = 4;
  if (has_tm_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tm_hour(), output);
  }

  // optional uint32 tm_mday = 5;
  if (has_tm_mday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tm_mday(), output);
  }

  // optional uint32 tm_mon = 6;
  if (has_tm_mon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tm_mon(), output);
  }

  // optional uint32 tm_year = 7;
  if (has_tm_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tm_year(), output);
  }

  // optional uint32 tm_wday = 8;
  if (has_tm_wday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tm_wday(), output);
  }

  // optional uint32 tm_yday = 9;
  if (has_tm_yday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tm_yday(), output);
  }

  // optional uint32 tm_isdst = 10;
  if (has_tm_isdst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tm_isdst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.TimeTM)
}

::google::protobuf::uint8* TimeTM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.TimeTM)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 tm_sec = 2;
  if (has_tm_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tm_sec(), target);
  }

  // optional uint32 tm_min = 3;
  if (has_tm_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tm_min(), target);
  }

  // optional uint32 tm_hour = 4;
  if (has_tm_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tm_hour(), target);
  }

  // optional uint32 tm_mday = 5;
  if (has_tm_mday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tm_mday(), target);
  }

  // optional uint32 tm_mon = 6;
  if (has_tm_mon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tm_mon(), target);
  }

  // optional uint32 tm_year = 7;
  if (has_tm_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tm_year(), target);
  }

  // optional uint32 tm_wday = 8;
  if (has_tm_wday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tm_wday(), target);
  }

  // optional uint32 tm_yday = 9;
  if (has_tm_yday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tm_yday(), target);
  }

  // optional uint32 tm_isdst = 10;
  if (has_tm_isdst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tm_isdst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.TimeTM)
  return target;
}

int TimeTM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // optional uint32 tm_sec = 2;
    if (has_tm_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_sec());
    }

    // optional uint32 tm_min = 3;
    if (has_tm_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_min());
    }

    // optional uint32 tm_hour = 4;
    if (has_tm_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_hour());
    }

    // optional uint32 tm_mday = 5;
    if (has_tm_mday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_mday());
    }

    // optional uint32 tm_mon = 6;
    if (has_tm_mon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_mon());
    }

    // optional uint32 tm_year = 7;
    if (has_tm_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_year());
    }

    // optional uint32 tm_wday = 8;
    if (has_tm_wday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_wday());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 tm_yday = 9;
    if (has_tm_yday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_yday());
    }

    // optional uint32 tm_isdst = 10;
    if (has_tm_isdst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm_isdst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeTM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeTM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeTM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeTM::MergeFrom(const TimeTM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_tm_sec()) {
      set_tm_sec(from.tm_sec());
    }
    if (from.has_tm_min()) {
      set_tm_min(from.tm_min());
    }
    if (from.has_tm_hour()) {
      set_tm_hour(from.tm_hour());
    }
    if (from.has_tm_mday()) {
      set_tm_mday(from.tm_mday());
    }
    if (from.has_tm_mon()) {
      set_tm_mon(from.tm_mon());
    }
    if (from.has_tm_year()) {
      set_tm_year(from.tm_year());
    }
    if (from.has_tm_wday()) {
      set_tm_wday(from.tm_wday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tm_yday()) {
      set_tm_yday(from.tm_yday());
    }
    if (from.has_tm_isdst()) {
      set_tm_isdst(from.tm_isdst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeTM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTM::CopyFrom(const TimeTM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimeTM::Swap(TimeTM* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(tm_sec_, other->tm_sec_);
    std::swap(tm_min_, other->tm_min_);
    std::swap(tm_hour_, other->tm_hour_);
    std::swap(tm_mday_, other->tm_mday_);
    std::swap(tm_mon_, other->tm_mon_);
    std::swap(tm_year_, other->tm_year_);
    std::swap(tm_wday_, other->tm_wday_);
    std::swap(tm_yday_, other->tm_yday_);
    std::swap(tm_isdst_, other->tm_isdst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeTM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeTM_descriptor_;
  metadata.reflection = TimeTM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceMemory::kErrorCodeFieldNumber;
const int DeviceMemory::kRamTotalFieldNumber;
const int DeviceMemory::kRamFreeFieldNumber;
const int DeviceMemory::kFlashTotalFieldNumber;
const int DeviceMemory::kFlashFreeFieldNumber;
#endif  // !_MSC_VER

DeviceMemory::DeviceMemory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hardware_monitor.DeviceMemory)
}

void DeviceMemory::InitAsDefaultInstance() {
}

DeviceMemory::DeviceMemory(const DeviceMemory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hardware_monitor.DeviceMemory)
}

void DeviceMemory::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ram_total_ = 0u;
  ram_free_ = 0u;
  flash_total_ = 0u;
  flash_free_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceMemory::~DeviceMemory() {
  // @@protoc_insertion_point(destructor:hardware_monitor.DeviceMemory)
  SharedDtor();
}

void DeviceMemory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceMemory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceMemory_descriptor_;
}

const DeviceMemory& DeviceMemory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fmonitor_2eproto();
  return *default_instance_;
}

DeviceMemory* DeviceMemory::default_instance_ = NULL;

DeviceMemory* DeviceMemory::New() const {
  return new DeviceMemory;
}

void DeviceMemory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceMemory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(error_code_, flash_free_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hardware_monitor.DeviceMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ram_total;
        break;
      }

      // optional uint32 ram_total = 2;
      case 2: {
        if (tag == 16) {
         parse_ram_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ram_total_)));
          set_has_ram_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ram_free;
        break;
      }

      // optional uint32 ram_free = 3;
      case 3: {
        if (tag == 24) {
         parse_ram_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ram_free_)));
          set_has_ram_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flash_total;
        break;
      }

      // optional uint32 flash_total = 4;
      case 4: {
        if (tag == 32) {
         parse_flash_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flash_total_)));
          set_has_flash_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flash_free;
        break;
      }

      // optional uint32 flash_free = 5;
      case 5: {
        if (tag == 40) {
         parse_flash_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flash_free_)));
          set_has_flash_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hardware_monitor.DeviceMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hardware_monitor.DeviceMemory)
  return false;
#undef DO_
}

void DeviceMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hardware_monitor.DeviceMemory)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error_code(), output);
  }

  // optional uint32 ram_total = 2;
  if (has_ram_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ram_total(), output);
  }

  // optional uint32 ram_free = 3;
  if (has_ram_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ram_free(), output);
  }

  // optional uint32 flash_total = 4;
  if (has_flash_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flash_total(), output);
  }

  // optional uint32 flash_free = 5;
  if (has_flash_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flash_free(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hardware_monitor.DeviceMemory)
}

::google::protobuf::uint8* DeviceMemory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hardware_monitor.DeviceMemory)
  // required sint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 ram_total = 2;
  if (has_ram_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ram_total(), target);
  }

  // optional uint32 ram_free = 3;
  if (has_ram_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ram_free(), target);
  }

  // optional uint32 flash_total = 4;
  if (has_flash_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flash_total(), target);
  }

  // optional uint32 flash_free = 5;
  if (has_flash_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flash_free(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hardware_monitor.DeviceMemory)
  return target;
}

int DeviceMemory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }

    // optional uint32 ram_total = 2;
    if (has_ram_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ram_total());
    }

    // optional uint32 ram_free = 3;
    if (has_ram_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ram_free());
    }

    // optional uint32 flash_total = 4;
    if (has_flash_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flash_total());
    }

    // optional uint32 flash_free = 5;
    if (has_flash_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flash_free());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceMemory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceMemory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceMemory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceMemory::MergeFrom(const DeviceMemory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_ram_total()) {
      set_ram_total(from.ram_total());
    }
    if (from.has_ram_free()) {
      set_ram_free(from.ram_free());
    }
    if (from.has_flash_total()) {
      set_flash_total(from.flash_total());
    }
    if (from.has_flash_free()) {
      set_flash_free(from.flash_free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceMemory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceMemory::CopyFrom(const DeviceMemory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMemory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeviceMemory::Swap(DeviceMemory* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(ram_total_, other->ram_total_);
    std::swap(ram_free_, other->ram_free_);
    std::swap(flash_total_, other->flash_total_);
    std::swap(flash_free_, other->flash_free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceMemory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceMemory_descriptor_;
  metadata.reflection = DeviceMemory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hardware_monitor

// @@protoc_insertion_point(global_scope)
