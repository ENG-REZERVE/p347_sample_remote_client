//--------------------------------------------------------------------
//Class:	TEvent, TCriticalSection
//Author: 	Vasiliy S. Barayshchuk
//--------------------------------------------------------------------
//Библиотека объектов синхронизации под Linux
//в стиле Borland VCL
//--------------------------------------------------------------------
#ifndef BVS_SYNCOBJS_HPP
#define BVS_SYNCOBJS_HPP
//--------------------------------------------------------------------
#include <pthread.h>
//--------------------------------------------------------------------

//--------------------------------------------------------------------
// TEvent
// попытка реализовать виндовский евент под линукс.
// Естественно есть отличия и ограничения:
// 1. Параметры конструктора EventAttributes и Name игнорируются
//--------------------------------------------------------------------
// Infinite timeout
#ifdef _LINUX_
#define INFINITE            0xFFFFFFFF
#else
#include <windows.h>
#endif
enum TWaitResult { wrSignaled, wrTimeout, wrAbandoned, wrError };
//--------------------------------------------------------------------
class TEvent
{
  public:
    //---------------------------------------------------------------- 
    //конструкторы и деструкторы
    //---------------------------------------------------------------- 
    TEvent(int EventAttributes, bool ManualReset, 
			bool InitialState, char* Name, bool UseCOMWait);
    ~TEvent();

    //---------------------------------------------------------------- 
    //Управление событием
    //---------------------------------------------------------------- 
    void ResetEvent();
	void SetEvent();
	TWaitResult WaitFor(int Timeout);

  private:
    bool FManualReset;
    bool FState;
	pthread_mutex_t FMutex;
	pthread_cond_t FCond;
	int Fwaiting_count;
	bool FTerminating;
};
//--------------------------------------------------------------------

//--------------------------------------------------------------------
// TCriticalSection
// критическая секция под линуксом легко реализуется с помощью 
// мьютекса
//--------------------------------------------------------------------
class TCriticalSection
{
  public:
    //---------------------------------------------------------------- 
    //конструкторы и деструкторы
    //---------------------------------------------------------------- 
    TCriticalSection(); 
    ~TCriticalSection();

    //---------------------------------------------------------------- 
    //Управление критической секцией
    //---------------------------------------------------------------- 
    void Enter();
	void Leave();

  private:
	pthread_mutex_t FMutex;
	pthread_mutexattr_t FAttr;
};
//--------------------------------------------------------------------

#endif
