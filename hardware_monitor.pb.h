// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hardware_monitor.proto

#ifndef PROTOBUF_hardware_5fmonitor_2eproto__INCLUDED
#define PROTOBUF_hardware_5fmonitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hardware_monitor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

class BatteryInformation;
class TemperatureInformation;
class ButtonInformation;
class HardwareMonitoringClientInitParams;
class HwmonLoggingParams;
class SubscriptionMask;
class ServerVersion;

// ===================================================================

class BatteryInformation : public ::google::protobuf::Message {
 public:
  BatteryInformation();
  virtual ~BatteryInformation();

  BatteryInformation(const BatteryInformation& from);

  inline BatteryInformation& operator=(const BatteryInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatteryInformation& default_instance();

  void Swap(BatteryInformation* other);

  // implements Message ----------------------------------------------

  BatteryInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatteryInformation& from);
  void MergeFrom(const BatteryInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional bool is_bm_connected = 2;
  inline bool has_is_bm_connected() const;
  inline void clear_is_bm_connected();
  static const int kIsBmConnectedFieldNumber = 2;
  inline bool is_bm_connected() const;
  inline void set_is_bm_connected(bool value);

  // optional bool is_charging = 3;
  inline bool has_is_charging() const;
  inline void clear_is_charging();
  static const int kIsChargingFieldNumber = 3;
  inline bool is_charging() const;
  inline void set_is_charging(bool value);

  // optional bool is_fault = 4;
  inline bool has_is_fault() const;
  inline void clear_is_fault();
  static const int kIsFaultFieldNumber = 4;
  inline bool is_fault() const;
  inline void set_is_fault(bool value);

  // optional bool shdn_state = 5;
  inline bool has_shdn_state() const;
  inline void clear_shdn_state();
  static const int kShdnStateFieldNumber = 5;
  inline bool shdn_state() const;
  inline void set_shdn_state(bool value);

  // optional bool battery_presense = 6;
  inline bool has_battery_presense() const;
  inline void clear_battery_presense();
  static const int kBatteryPresenseFieldNumber = 6;
  inline bool battery_presense() const;
  inline void set_battery_presense(bool value);

  // optional bool outer_power_presense = 7;
  inline bool has_outer_power_presense() const;
  inline void clear_outer_power_presense();
  static const int kOuterPowerPresenseFieldNumber = 7;
  inline bool outer_power_presense() const;
  inline void set_outer_power_presense(bool value);

  // optional bool alarm_low_voltage = 8;
  inline bool has_alarm_low_voltage() const;
  inline void clear_alarm_low_voltage();
  static const int kAlarmLowVoltageFieldNumber = 8;
  inline bool alarm_low_voltage() const;
  inline void set_alarm_low_voltage(bool value);

  // optional uint32 no_connect_counter = 9 [default = 0];
  inline bool has_no_connect_counter() const;
  inline void clear_no_connect_counter();
  static const int kNoConnectCounterFieldNumber = 9;
  inline ::google::protobuf::uint32 no_connect_counter() const;
  inline void set_no_connect_counter(::google::protobuf::uint32 value);

  // optional sint32 val_base_charge_uAh = 10;
  inline bool has_val_base_charge_uah() const;
  inline void clear_val_base_charge_uah();
  static const int kValBaseChargeUAhFieldNumber = 10;
  inline ::google::protobuf::int32 val_base_charge_uah() const;
  inline void set_val_base_charge_uah(::google::protobuf::int32 value);

  // optional sint32 val_current_charge_uAh = 11;
  inline bool has_val_current_charge_uah() const;
  inline void clear_val_current_charge_uah();
  static const int kValCurrentChargeUAhFieldNumber = 11;
  inline ::google::protobuf::int32 val_current_charge_uah() const;
  inline void set_val_current_charge_uah(::google::protobuf::int32 value);

  // optional sint32 val_icharge_uA = 12;
  inline bool has_val_icharge_ua() const;
  inline void clear_val_icharge_ua();
  static const int kValIchargeUAFieldNumber = 12;
  inline ::google::protobuf::int32 val_icharge_ua() const;
  inline void set_val_icharge_ua(::google::protobuf::int32 value);

  // optional uint32 val_ucharge_mV = 13;
  inline bool has_val_ucharge_mv() const;
  inline void clear_val_ucharge_mv();
  static const int kValUchargeMVFieldNumber = 13;
  inline ::google::protobuf::uint32 val_ucharge_mv() const;
  inline void set_val_ucharge_mv(::google::protobuf::uint32 value);

  // optional bool fullchg_bit = 14;
  inline bool has_fullchg_bit() const;
  inline void clear_fullchg_bit();
  static const int kFullchgBitFieldNumber = 14;
  inline bool fullchg_bit() const;
  inline void set_fullchg_bit(bool value);

  // optional bool fastchg_bit = 15;
  inline bool has_fastchg_bit() const;
  inline void clear_fastchg_bit();
  static const int kFastchgBitFieldNumber = 15;
  inline bool fastchg_bit() const;
  inline void set_fastchg_bit(bool value);

  // optional uint32 hex_current_charge = 16;
  inline bool has_hex_current_charge() const;
  inline void clear_hex_current_charge();
  static const int kHexCurrentChargeFieldNumber = 16;
  inline ::google::protobuf::uint32 hex_current_charge() const;
  inline void set_hex_current_charge(::google::protobuf::uint32 value);

  // optional uint32 charge_percent = 17;
  inline bool has_charge_percent() const;
  inline void clear_charge_percent();
  static const int kChargePercentFieldNumber = 17;
  inline ::google::protobuf::uint32 charge_percent() const;
  inline void set_charge_percent(::google::protobuf::uint32 value);

  // optional uint32 minutes_left = 18;
  inline bool has_minutes_left() const;
  inline void clear_minutes_left();
  static const int kMinutesLeftFieldNumber = 18;
  inline ::google::protobuf::uint32 minutes_left() const;
  inline void set_minutes_left(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hardware_monitor.BatteryInformation)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_is_bm_connected();
  inline void clear_has_is_bm_connected();
  inline void set_has_is_charging();
  inline void clear_has_is_charging();
  inline void set_has_is_fault();
  inline void clear_has_is_fault();
  inline void set_has_shdn_state();
  inline void clear_has_shdn_state();
  inline void set_has_battery_presense();
  inline void clear_has_battery_presense();
  inline void set_has_outer_power_presense();
  inline void clear_has_outer_power_presense();
  inline void set_has_alarm_low_voltage();
  inline void clear_has_alarm_low_voltage();
  inline void set_has_no_connect_counter();
  inline void clear_has_no_connect_counter();
  inline void set_has_val_base_charge_uah();
  inline void clear_has_val_base_charge_uah();
  inline void set_has_val_current_charge_uah();
  inline void clear_has_val_current_charge_uah();
  inline void set_has_val_icharge_ua();
  inline void clear_has_val_icharge_ua();
  inline void set_has_val_ucharge_mv();
  inline void clear_has_val_ucharge_mv();
  inline void set_has_fullchg_bit();
  inline void clear_has_fullchg_bit();
  inline void set_has_fastchg_bit();
  inline void clear_has_fastchg_bit();
  inline void set_has_hex_current_charge();
  inline void clear_has_hex_current_charge();
  inline void set_has_charge_percent();
  inline void clear_has_charge_percent();
  inline void set_has_minutes_left();
  inline void clear_has_minutes_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  bool is_bm_connected_;
  bool is_charging_;
  bool is_fault_;
  bool shdn_state_;
  bool battery_presense_;
  bool outer_power_presense_;
  bool alarm_low_voltage_;
  bool fullchg_bit_;
  ::google::protobuf::uint32 no_connect_counter_;
  ::google::protobuf::int32 val_base_charge_uah_;
  ::google::protobuf::int32 val_current_charge_uah_;
  ::google::protobuf::int32 val_icharge_ua_;
  ::google::protobuf::uint32 val_ucharge_mv_;
  bool fastchg_bit_;
  ::google::protobuf::uint32 hex_current_charge_;
  ::google::protobuf::uint32 charge_percent_;
  ::google::protobuf::uint32 minutes_left_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static BatteryInformation* default_instance_;
};
// -------------------------------------------------------------------

class TemperatureInformation : public ::google::protobuf::Message {
 public:
  TemperatureInformation();
  virtual ~TemperatureInformation();

  TemperatureInformation(const TemperatureInformation& from);

  inline TemperatureInformation& operator=(const TemperatureInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureInformation& default_instance();

  void Swap(TemperatureInformation* other);

  // implements Message ----------------------------------------------

  TemperatureInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemperatureInformation& from);
  void MergeFrom(const TemperatureInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required double t_min = 2;
  inline bool has_t_min() const;
  inline void clear_t_min();
  static const int kTMinFieldNumber = 2;
  inline double t_min() const;
  inline void set_t_min(double value);

  // required double t_max = 3;
  inline bool has_t_max() const;
  inline void clear_t_max();
  static const int kTMaxFieldNumber = 3;
  inline double t_max() const;
  inline void set_t_max(double value);

  // @@protoc_insertion_point(class_scope:hardware_monitor.TemperatureInformation)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_t_min();
  inline void clear_has_t_min();
  inline void set_has_t_max();
  inline void clear_has_t_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double t_min_;
  double t_max_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static TemperatureInformation* default_instance_;
};
// -------------------------------------------------------------------

class ButtonInformation : public ::google::protobuf::Message {
 public:
  ButtonInformation();
  virtual ~ButtonInformation();

  ButtonInformation(const ButtonInformation& from);

  inline ButtonInformation& operator=(const ButtonInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonInformation& default_instance();

  void Swap(ButtonInformation* other);

  // implements Message ----------------------------------------------

  ButtonInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonInformation& from);
  void MergeFrom(const ButtonInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required bool is_pressed = 2;
  inline bool has_is_pressed() const;
  inline void clear_is_pressed();
  static const int kIsPressedFieldNumber = 2;
  inline bool is_pressed() const;
  inline void set_is_pressed(bool value);

  // @@protoc_insertion_point(class_scope:hardware_monitor.ButtonInformation)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_is_pressed();
  inline void clear_has_is_pressed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  bool is_pressed_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static ButtonInformation* default_instance_;
};
// -------------------------------------------------------------------

class HardwareMonitoringClientInitParams : public ::google::protobuf::Message {
 public:
  HardwareMonitoringClientInitParams();
  virtual ~HardwareMonitoringClientInitParams();

  HardwareMonitoringClientInitParams(const HardwareMonitoringClientInitParams& from);

  inline HardwareMonitoringClientInitParams& operator=(const HardwareMonitoringClientInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HardwareMonitoringClientInitParams& default_instance();

  void Swap(HardwareMonitoringClientInitParams* other);

  // implements Message ----------------------------------------------

  HardwareMonitoringClientInitParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HardwareMonitoringClientInitParams& from);
  void MergeFrom(const HardwareMonitoringClientInitParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 srv_conn_wait_msec = 1 [default = 500];
  inline bool has_srv_conn_wait_msec() const;
  inline void clear_srv_conn_wait_msec();
  static const int kSrvConnWaitMsecFieldNumber = 1;
  inline ::google::protobuf::uint32 srv_conn_wait_msec() const;
  inline void set_srv_conn_wait_msec(::google::protobuf::uint32 value);

  // required uint32 srv_conn_retry_cnt = 2 [default = 4];
  inline bool has_srv_conn_retry_cnt() const;
  inline void clear_srv_conn_retry_cnt();
  static const int kSrvConnRetryCntFieldNumber = 2;
  inline ::google::protobuf::uint32 srv_conn_retry_cnt() const;
  inline void set_srv_conn_retry_cnt(::google::protobuf::uint32 value);

  // optional string journal_ipc_path = 3 [default = "/mnt/share"];
  inline bool has_journal_ipc_path() const;
  inline void clear_journal_ipc_path();
  static const int kJournalIpcPathFieldNumber = 3;
  inline const ::std::string& journal_ipc_path() const;
  inline void set_journal_ipc_path(const ::std::string& value);
  inline void set_journal_ipc_path(const char* value);
  inline void set_journal_ipc_path(const char* value, size_t size);
  inline ::std::string* mutable_journal_ipc_path();
  inline ::std::string* release_journal_ipc_path();
  inline void set_allocated_journal_ipc_path(::std::string* journal_ipc_path);

  // optional uint32 journal_ipc_key = 4 [default = 45];
  inline bool has_journal_ipc_key() const;
  inline void clear_journal_ipc_key();
  static const int kJournalIpcKeyFieldNumber = 4;
  inline ::google::protobuf::uint32 journal_ipc_key() const;
  inline void set_journal_ipc_key(::google::protobuf::uint32 value);

  // optional string hwserver_ipc_path = 5 [default = "/mnt/share"];
  inline bool has_hwserver_ipc_path() const;
  inline void clear_hwserver_ipc_path();
  static const int kHwserverIpcPathFieldNumber = 5;
  inline const ::std::string& hwserver_ipc_path() const;
  inline void set_hwserver_ipc_path(const ::std::string& value);
  inline void set_hwserver_ipc_path(const char* value);
  inline void set_hwserver_ipc_path(const char* value, size_t size);
  inline ::std::string* mutable_hwserver_ipc_path();
  inline ::std::string* release_hwserver_ipc_path();
  inline void set_allocated_hwserver_ipc_path(::std::string* hwserver_ipc_path);

  // optional uint32 hwserver_ipc_key = 6 [default = 44];
  inline bool has_hwserver_ipc_key() const;
  inline void clear_hwserver_ipc_key();
  static const int kHwserverIpcKeyFieldNumber = 6;
  inline ::google::protobuf::uint32 hwserver_ipc_key() const;
  inline void set_hwserver_ipc_key(::google::protobuf::uint32 value);

  // optional string own_ipc_path = 7 [default = "/etc"];
  inline bool has_own_ipc_path() const;
  inline void clear_own_ipc_path();
  static const int kOwnIpcPathFieldNumber = 7;
  inline const ::std::string& own_ipc_path() const;
  inline void set_own_ipc_path(const ::std::string& value);
  inline void set_own_ipc_path(const char* value);
  inline void set_own_ipc_path(const char* value, size_t size);
  inline ::std::string* mutable_own_ipc_path();
  inline ::std::string* release_own_ipc_path();
  inline void set_allocated_own_ipc_path(::std::string* own_ipc_path);

  // optional uint32 own_ipc_key = 8 [default = 22];
  inline bool has_own_ipc_key() const;
  inline void clear_own_ipc_key();
  static const int kOwnIpcKeyFieldNumber = 8;
  inline ::google::protobuf::uint32 own_ipc_key() const;
  inline void set_own_ipc_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hardware_monitor.HardwareMonitoringClientInitParams)
 private:
  inline void set_has_srv_conn_wait_msec();
  inline void clear_has_srv_conn_wait_msec();
  inline void set_has_srv_conn_retry_cnt();
  inline void clear_has_srv_conn_retry_cnt();
  inline void set_has_journal_ipc_path();
  inline void clear_has_journal_ipc_path();
  inline void set_has_journal_ipc_key();
  inline void clear_has_journal_ipc_key();
  inline void set_has_hwserver_ipc_path();
  inline void clear_has_hwserver_ipc_path();
  inline void set_has_hwserver_ipc_key();
  inline void clear_has_hwserver_ipc_key();
  inline void set_has_own_ipc_path();
  inline void clear_has_own_ipc_path();
  inline void set_has_own_ipc_key();
  inline void clear_has_own_ipc_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 srv_conn_wait_msec_;
  ::google::protobuf::uint32 srv_conn_retry_cnt_;
  static ::std::string* _default_journal_ipc_path_;
  ::std::string* journal_ipc_path_;
  static ::std::string* _default_hwserver_ipc_path_;
  ::std::string* hwserver_ipc_path_;
  ::google::protobuf::uint32 journal_ipc_key_;
  ::google::protobuf::uint32 hwserver_ipc_key_;
  static ::std::string* _default_own_ipc_path_;
  ::std::string* own_ipc_path_;
  ::google::protobuf::uint32 own_ipc_key_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static HardwareMonitoringClientInitParams* default_instance_;
};
// -------------------------------------------------------------------

class HwmonLoggingParams : public ::google::protobuf::Message {
 public:
  HwmonLoggingParams();
  virtual ~HwmonLoggingParams();

  HwmonLoggingParams(const HwmonLoggingParams& from);

  inline HwmonLoggingParams& operator=(const HwmonLoggingParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HwmonLoggingParams& default_instance();

  void Swap(HwmonLoggingParams* other);

  // implements Message ----------------------------------------------

  HwmonLoggingParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HwmonLoggingParams& from);
  void MergeFrom(const HwmonLoggingParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hwclient_console_level = 1;
  inline bool has_hwclient_console_level() const;
  inline void clear_hwclient_console_level();
  static const int kHwclientConsoleLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 hwclient_console_level() const;
  inline void set_hwclient_console_level(::google::protobuf::uint32 value);

  // required uint32 hwclient_file_level = 2;
  inline bool has_hwclient_file_level() const;
  inline void clear_hwclient_file_level();
  static const int kHwclientFileLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 hwclient_file_level() const;
  inline void set_hwclient_file_level(::google::protobuf::uint32 value);

  // required uint32 hwclientdaemon_level = 3;
  inline bool has_hwclientdaemon_level() const;
  inline void clear_hwclientdaemon_level();
  static const int kHwclientdaemonLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 hwclientdaemon_level() const;
  inline void set_hwclientdaemon_level(::google::protobuf::uint32 value);

  // required uint32 main_console_level = 7;
  inline bool has_main_console_level() const;
  inline void clear_main_console_level();
  static const int kMainConsoleLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 main_console_level() const;
  inline void set_main_console_level(::google::protobuf::uint32 value);

  // required uint32 main_file_level = 8;
  inline bool has_main_file_level() const;
  inline void clear_main_file_level();
  static const int kMainFileLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 main_file_level() const;
  inline void set_main_file_level(::google::protobuf::uint32 value);

  // required uint32 main_daemon_level = 9;
  inline bool has_main_daemon_level() const;
  inline void clear_main_daemon_level();
  static const int kMainDaemonLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 main_daemon_level() const;
  inline void set_main_daemon_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hardware_monitor.HwmonLoggingParams)
 private:
  inline void set_has_hwclient_console_level();
  inline void clear_has_hwclient_console_level();
  inline void set_has_hwclient_file_level();
  inline void clear_has_hwclient_file_level();
  inline void set_has_hwclientdaemon_level();
  inline void clear_has_hwclientdaemon_level();
  inline void set_has_main_console_level();
  inline void clear_has_main_console_level();
  inline void set_has_main_file_level();
  inline void clear_has_main_file_level();
  inline void set_has_main_daemon_level();
  inline void clear_has_main_daemon_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hwclient_console_level_;
  ::google::protobuf::uint32 hwclient_file_level_;
  ::google::protobuf::uint32 hwclientdaemon_level_;
  ::google::protobuf::uint32 main_console_level_;
  ::google::protobuf::uint32 main_file_level_;
  ::google::protobuf::uint32 main_daemon_level_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static HwmonLoggingParams* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionMask : public ::google::protobuf::Message {
 public:
  SubscriptionMask();
  virtual ~SubscriptionMask();

  SubscriptionMask(const SubscriptionMask& from);

  inline SubscriptionMask& operator=(const SubscriptionMask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionMask& default_instance();

  void Swap(SubscriptionMask* other);

  // implements Message ----------------------------------------------

  SubscriptionMask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscriptionMask& from);
  void MergeFrom(const SubscriptionMask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional bool battery = 2;
  inline bool has_battery() const;
  inline void clear_battery();
  static const int kBatteryFieldNumber = 2;
  inline bool battery() const;
  inline void set_battery(bool value);

  // optional bool cpu_temperature = 3;
  inline bool has_cpu_temperature() const;
  inline void clear_cpu_temperature();
  static const int kCpuTemperatureFieldNumber = 3;
  inline bool cpu_temperature() const;
  inline void set_cpu_temperature(bool value);

  // optional bool pbutton_info = 4;
  inline bool has_pbutton_info() const;
  inline void clear_pbutton_info();
  static const int kPbuttonInfoFieldNumber = 4;
  inline bool pbutton_info() const;
  inline void set_pbutton_info(bool value);

  // optional bool pbutton_action = 5;
  inline bool has_pbutton_action() const;
  inline void clear_pbutton_action();
  static const int kPbuttonActionFieldNumber = 5;
  inline bool pbutton_action() const;
  inline void set_pbutton_action(bool value);

  // @@protoc_insertion_point(class_scope:hardware_monitor.SubscriptionMask)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_battery();
  inline void clear_has_battery();
  inline void set_has_cpu_temperature();
  inline void clear_has_cpu_temperature();
  inline void set_has_pbutton_info();
  inline void clear_has_pbutton_info();
  inline void set_has_pbutton_action();
  inline void clear_has_pbutton_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  bool battery_;
  bool cpu_temperature_;
  bool pbutton_info_;
  bool pbutton_action_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static SubscriptionMask* default_instance_;
};
// -------------------------------------------------------------------

class ServerVersion : public ::google::protobuf::Message {
 public:
  ServerVersion();
  virtual ~ServerVersion();

  ServerVersion(const ServerVersion& from);

  inline ServerVersion& operator=(const ServerVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerVersion& default_instance();

  void Swap(ServerVersion* other);

  // implements Message ----------------------------------------------

  ServerVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerVersion& from);
  void MergeFrom(const ServerVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required uint32 major = 2;
  inline bool has_major() const;
  inline void clear_major();
  static const int kMajorFieldNumber = 2;
  inline ::google::protobuf::uint32 major() const;
  inline void set_major(::google::protobuf::uint32 value);

  // required uint32 minor = 3;
  inline bool has_minor() const;
  inline void clear_minor();
  static const int kMinorFieldNumber = 3;
  inline ::google::protobuf::uint32 minor() const;
  inline void set_minor(::google::protobuf::uint32 value);

  // required string build = 4;
  inline bool has_build() const;
  inline void clear_build();
  static const int kBuildFieldNumber = 4;
  inline const ::std::string& build() const;
  inline void set_build(const ::std::string& value);
  inline void set_build(const char* value);
  inline void set_build(const char* value, size_t size);
  inline ::std::string* mutable_build();
  inline ::std::string* release_build();
  inline void set_allocated_build(::std::string* build);

  // @@protoc_insertion_point(class_scope:hardware_monitor.ServerVersion)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_major();
  inline void clear_has_major();
  inline void set_has_minor();
  inline void clear_has_minor();
  inline void set_has_build();
  inline void clear_has_build();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 major_;
  ::std::string* build_;
  ::google::protobuf::uint32 minor_;
  friend void  protobuf_AddDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_hardware_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_hardware_5fmonitor_2eproto();

  void InitAsDefaultInstance();
  static ServerVersion* default_instance_;
};
// ===================================================================


// ===================================================================

// BatteryInformation

// required sint32 error_code = 1;
inline bool BatteryInformation::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatteryInformation::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatteryInformation::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatteryInformation::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 BatteryInformation::error_code() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.error_code)
  return error_code_;
}
inline void BatteryInformation::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.error_code)
}

// optional bool is_bm_connected = 2;
inline bool BatteryInformation::has_is_bm_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatteryInformation::set_has_is_bm_connected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatteryInformation::clear_has_is_bm_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatteryInformation::clear_is_bm_connected() {
  is_bm_connected_ = false;
  clear_has_is_bm_connected();
}
inline bool BatteryInformation::is_bm_connected() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.is_bm_connected)
  return is_bm_connected_;
}
inline void BatteryInformation::set_is_bm_connected(bool value) {
  set_has_is_bm_connected();
  is_bm_connected_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.is_bm_connected)
}

// optional bool is_charging = 3;
inline bool BatteryInformation::has_is_charging() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatteryInformation::set_has_is_charging() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatteryInformation::clear_has_is_charging() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatteryInformation::clear_is_charging() {
  is_charging_ = false;
  clear_has_is_charging();
}
inline bool BatteryInformation::is_charging() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.is_charging)
  return is_charging_;
}
inline void BatteryInformation::set_is_charging(bool value) {
  set_has_is_charging();
  is_charging_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.is_charging)
}

// optional bool is_fault = 4;
inline bool BatteryInformation::has_is_fault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatteryInformation::set_has_is_fault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatteryInformation::clear_has_is_fault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatteryInformation::clear_is_fault() {
  is_fault_ = false;
  clear_has_is_fault();
}
inline bool BatteryInformation::is_fault() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.is_fault)
  return is_fault_;
}
inline void BatteryInformation::set_is_fault(bool value) {
  set_has_is_fault();
  is_fault_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.is_fault)
}

// optional bool shdn_state = 5;
inline bool BatteryInformation::has_shdn_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatteryInformation::set_has_shdn_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatteryInformation::clear_has_shdn_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatteryInformation::clear_shdn_state() {
  shdn_state_ = false;
  clear_has_shdn_state();
}
inline bool BatteryInformation::shdn_state() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.shdn_state)
  return shdn_state_;
}
inline void BatteryInformation::set_shdn_state(bool value) {
  set_has_shdn_state();
  shdn_state_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.shdn_state)
}

// optional bool battery_presense = 6;
inline bool BatteryInformation::has_battery_presense() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatteryInformation::set_has_battery_presense() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BatteryInformation::clear_has_battery_presense() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BatteryInformation::clear_battery_presense() {
  battery_presense_ = false;
  clear_has_battery_presense();
}
inline bool BatteryInformation::battery_presense() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.battery_presense)
  return battery_presense_;
}
inline void BatteryInformation::set_battery_presense(bool value) {
  set_has_battery_presense();
  battery_presense_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.battery_presense)
}

// optional bool outer_power_presense = 7;
inline bool BatteryInformation::has_outer_power_presense() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatteryInformation::set_has_outer_power_presense() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BatteryInformation::clear_has_outer_power_presense() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BatteryInformation::clear_outer_power_presense() {
  outer_power_presense_ = false;
  clear_has_outer_power_presense();
}
inline bool BatteryInformation::outer_power_presense() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.outer_power_presense)
  return outer_power_presense_;
}
inline void BatteryInformation::set_outer_power_presense(bool value) {
  set_has_outer_power_presense();
  outer_power_presense_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.outer_power_presense)
}

// optional bool alarm_low_voltage = 8;
inline bool BatteryInformation::has_alarm_low_voltage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BatteryInformation::set_has_alarm_low_voltage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BatteryInformation::clear_has_alarm_low_voltage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BatteryInformation::clear_alarm_low_voltage() {
  alarm_low_voltage_ = false;
  clear_has_alarm_low_voltage();
}
inline bool BatteryInformation::alarm_low_voltage() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.alarm_low_voltage)
  return alarm_low_voltage_;
}
inline void BatteryInformation::set_alarm_low_voltage(bool value) {
  set_has_alarm_low_voltage();
  alarm_low_voltage_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.alarm_low_voltage)
}

// optional uint32 no_connect_counter = 9 [default = 0];
inline bool BatteryInformation::has_no_connect_counter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BatteryInformation::set_has_no_connect_counter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BatteryInformation::clear_has_no_connect_counter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BatteryInformation::clear_no_connect_counter() {
  no_connect_counter_ = 0u;
  clear_has_no_connect_counter();
}
inline ::google::protobuf::uint32 BatteryInformation::no_connect_counter() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.no_connect_counter)
  return no_connect_counter_;
}
inline void BatteryInformation::set_no_connect_counter(::google::protobuf::uint32 value) {
  set_has_no_connect_counter();
  no_connect_counter_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.no_connect_counter)
}

// optional sint32 val_base_charge_uAh = 10;
inline bool BatteryInformation::has_val_base_charge_uah() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BatteryInformation::set_has_val_base_charge_uah() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BatteryInformation::clear_has_val_base_charge_uah() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BatteryInformation::clear_val_base_charge_uah() {
  val_base_charge_uah_ = 0;
  clear_has_val_base_charge_uah();
}
inline ::google::protobuf::int32 BatteryInformation::val_base_charge_uah() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.val_base_charge_uAh)
  return val_base_charge_uah_;
}
inline void BatteryInformation::set_val_base_charge_uah(::google::protobuf::int32 value) {
  set_has_val_base_charge_uah();
  val_base_charge_uah_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.val_base_charge_uAh)
}

// optional sint32 val_current_charge_uAh = 11;
inline bool BatteryInformation::has_val_current_charge_uah() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BatteryInformation::set_has_val_current_charge_uah() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BatteryInformation::clear_has_val_current_charge_uah() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BatteryInformation::clear_val_current_charge_uah() {
  val_current_charge_uah_ = 0;
  clear_has_val_current_charge_uah();
}
inline ::google::protobuf::int32 BatteryInformation::val_current_charge_uah() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.val_current_charge_uAh)
  return val_current_charge_uah_;
}
inline void BatteryInformation::set_val_current_charge_uah(::google::protobuf::int32 value) {
  set_has_val_current_charge_uah();
  val_current_charge_uah_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.val_current_charge_uAh)
}

// optional sint32 val_icharge_uA = 12;
inline bool BatteryInformation::has_val_icharge_ua() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BatteryInformation::set_has_val_icharge_ua() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BatteryInformation::clear_has_val_icharge_ua() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BatteryInformation::clear_val_icharge_ua() {
  val_icharge_ua_ = 0;
  clear_has_val_icharge_ua();
}
inline ::google::protobuf::int32 BatteryInformation::val_icharge_ua() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.val_icharge_uA)
  return val_icharge_ua_;
}
inline void BatteryInformation::set_val_icharge_ua(::google::protobuf::int32 value) {
  set_has_val_icharge_ua();
  val_icharge_ua_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.val_icharge_uA)
}

// optional uint32 val_ucharge_mV = 13;
inline bool BatteryInformation::has_val_ucharge_mv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BatteryInformation::set_has_val_ucharge_mv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BatteryInformation::clear_has_val_ucharge_mv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BatteryInformation::clear_val_ucharge_mv() {
  val_ucharge_mv_ = 0u;
  clear_has_val_ucharge_mv();
}
inline ::google::protobuf::uint32 BatteryInformation::val_ucharge_mv() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.val_ucharge_mV)
  return val_ucharge_mv_;
}
inline void BatteryInformation::set_val_ucharge_mv(::google::protobuf::uint32 value) {
  set_has_val_ucharge_mv();
  val_ucharge_mv_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.val_ucharge_mV)
}

// optional bool fullchg_bit = 14;
inline bool BatteryInformation::has_fullchg_bit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BatteryInformation::set_has_fullchg_bit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BatteryInformation::clear_has_fullchg_bit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BatteryInformation::clear_fullchg_bit() {
  fullchg_bit_ = false;
  clear_has_fullchg_bit();
}
inline bool BatteryInformation::fullchg_bit() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.fullchg_bit)
  return fullchg_bit_;
}
inline void BatteryInformation::set_fullchg_bit(bool value) {
  set_has_fullchg_bit();
  fullchg_bit_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.fullchg_bit)
}

// optional bool fastchg_bit = 15;
inline bool BatteryInformation::has_fastchg_bit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BatteryInformation::set_has_fastchg_bit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BatteryInformation::clear_has_fastchg_bit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BatteryInformation::clear_fastchg_bit() {
  fastchg_bit_ = false;
  clear_has_fastchg_bit();
}
inline bool BatteryInformation::fastchg_bit() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.fastchg_bit)
  return fastchg_bit_;
}
inline void BatteryInformation::set_fastchg_bit(bool value) {
  set_has_fastchg_bit();
  fastchg_bit_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.fastchg_bit)
}

// optional uint32 hex_current_charge = 16;
inline bool BatteryInformation::has_hex_current_charge() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BatteryInformation::set_has_hex_current_charge() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BatteryInformation::clear_has_hex_current_charge() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BatteryInformation::clear_hex_current_charge() {
  hex_current_charge_ = 0u;
  clear_has_hex_current_charge();
}
inline ::google::protobuf::uint32 BatteryInformation::hex_current_charge() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.hex_current_charge)
  return hex_current_charge_;
}
inline void BatteryInformation::set_hex_current_charge(::google::protobuf::uint32 value) {
  set_has_hex_current_charge();
  hex_current_charge_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.hex_current_charge)
}

// optional uint32 charge_percent = 17;
inline bool BatteryInformation::has_charge_percent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BatteryInformation::set_has_charge_percent() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BatteryInformation::clear_has_charge_percent() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BatteryInformation::clear_charge_percent() {
  charge_percent_ = 0u;
  clear_has_charge_percent();
}
inline ::google::protobuf::uint32 BatteryInformation::charge_percent() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.charge_percent)
  return charge_percent_;
}
inline void BatteryInformation::set_charge_percent(::google::protobuf::uint32 value) {
  set_has_charge_percent();
  charge_percent_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.charge_percent)
}

// optional uint32 minutes_left = 18;
inline bool BatteryInformation::has_minutes_left() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BatteryInformation::set_has_minutes_left() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BatteryInformation::clear_has_minutes_left() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BatteryInformation::clear_minutes_left() {
  minutes_left_ = 0u;
  clear_has_minutes_left();
}
inline ::google::protobuf::uint32 BatteryInformation::minutes_left() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.BatteryInformation.minutes_left)
  return minutes_left_;
}
inline void BatteryInformation::set_minutes_left(::google::protobuf::uint32 value) {
  set_has_minutes_left();
  minutes_left_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.BatteryInformation.minutes_left)
}

// -------------------------------------------------------------------

// TemperatureInformation

// required sint32 error_code = 1;
inline bool TemperatureInformation::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemperatureInformation::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemperatureInformation::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemperatureInformation::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 TemperatureInformation::error_code() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.TemperatureInformation.error_code)
  return error_code_;
}
inline void TemperatureInformation::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.TemperatureInformation.error_code)
}

// required double t_min = 2;
inline bool TemperatureInformation::has_t_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemperatureInformation::set_has_t_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemperatureInformation::clear_has_t_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemperatureInformation::clear_t_min() {
  t_min_ = 0;
  clear_has_t_min();
}
inline double TemperatureInformation::t_min() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.TemperatureInformation.t_min)
  return t_min_;
}
inline void TemperatureInformation::set_t_min(double value) {
  set_has_t_min();
  t_min_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.TemperatureInformation.t_min)
}

// required double t_max = 3;
inline bool TemperatureInformation::has_t_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemperatureInformation::set_has_t_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemperatureInformation::clear_has_t_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemperatureInformation::clear_t_max() {
  t_max_ = 0;
  clear_has_t_max();
}
inline double TemperatureInformation::t_max() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.TemperatureInformation.t_max)
  return t_max_;
}
inline void TemperatureInformation::set_t_max(double value) {
  set_has_t_max();
  t_max_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.TemperatureInformation.t_max)
}

// -------------------------------------------------------------------

// ButtonInformation

// required sint32 error_code = 1;
inline bool ButtonInformation::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonInformation::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonInformation::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonInformation::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ButtonInformation::error_code() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.ButtonInformation.error_code)
  return error_code_;
}
inline void ButtonInformation::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.ButtonInformation.error_code)
}

// required bool is_pressed = 2;
inline bool ButtonInformation::has_is_pressed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonInformation::set_has_is_pressed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonInformation::clear_has_is_pressed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonInformation::clear_is_pressed() {
  is_pressed_ = false;
  clear_has_is_pressed();
}
inline bool ButtonInformation::is_pressed() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.ButtonInformation.is_pressed)
  return is_pressed_;
}
inline void ButtonInformation::set_is_pressed(bool value) {
  set_has_is_pressed();
  is_pressed_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.ButtonInformation.is_pressed)
}

// -------------------------------------------------------------------

// HardwareMonitoringClientInitParams

// required uint32 srv_conn_wait_msec = 1 [default = 500];
inline bool HardwareMonitoringClientInitParams::has_srv_conn_wait_msec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_srv_conn_wait_msec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HardwareMonitoringClientInitParams::clear_has_srv_conn_wait_msec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HardwareMonitoringClientInitParams::clear_srv_conn_wait_msec() {
  srv_conn_wait_msec_ = 500u;
  clear_has_srv_conn_wait_msec();
}
inline ::google::protobuf::uint32 HardwareMonitoringClientInitParams::srv_conn_wait_msec() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.srv_conn_wait_msec)
  return srv_conn_wait_msec_;
}
inline void HardwareMonitoringClientInitParams::set_srv_conn_wait_msec(::google::protobuf::uint32 value) {
  set_has_srv_conn_wait_msec();
  srv_conn_wait_msec_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.srv_conn_wait_msec)
}

// required uint32 srv_conn_retry_cnt = 2 [default = 4];
inline bool HardwareMonitoringClientInitParams::has_srv_conn_retry_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_srv_conn_retry_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HardwareMonitoringClientInitParams::clear_has_srv_conn_retry_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HardwareMonitoringClientInitParams::clear_srv_conn_retry_cnt() {
  srv_conn_retry_cnt_ = 4u;
  clear_has_srv_conn_retry_cnt();
}
inline ::google::protobuf::uint32 HardwareMonitoringClientInitParams::srv_conn_retry_cnt() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.srv_conn_retry_cnt)
  return srv_conn_retry_cnt_;
}
inline void HardwareMonitoringClientInitParams::set_srv_conn_retry_cnt(::google::protobuf::uint32 value) {
  set_has_srv_conn_retry_cnt();
  srv_conn_retry_cnt_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.srv_conn_retry_cnt)
}

// optional string journal_ipc_path = 3 [default = "/mnt/share"];
inline bool HardwareMonitoringClientInitParams::has_journal_ipc_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_journal_ipc_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HardwareMonitoringClientInitParams::clear_has_journal_ipc_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HardwareMonitoringClientInitParams::clear_journal_ipc_path() {
  if (journal_ipc_path_ != _default_journal_ipc_path_) {
    journal_ipc_path_->assign(*_default_journal_ipc_path_);
  }
  clear_has_journal_ipc_path();
}
inline const ::std::string& HardwareMonitoringClientInitParams::journal_ipc_path() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_path)
  return *journal_ipc_path_;
}
inline void HardwareMonitoringClientInitParams::set_journal_ipc_path(const ::std::string& value) {
  set_has_journal_ipc_path();
  if (journal_ipc_path_ == _default_journal_ipc_path_) {
    journal_ipc_path_ = new ::std::string;
  }
  journal_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_path)
}
inline void HardwareMonitoringClientInitParams::set_journal_ipc_path(const char* value) {
  set_has_journal_ipc_path();
  if (journal_ipc_path_ == _default_journal_ipc_path_) {
    journal_ipc_path_ = new ::std::string;
  }
  journal_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_path)
}
inline void HardwareMonitoringClientInitParams::set_journal_ipc_path(const char* value, size_t size) {
  set_has_journal_ipc_path();
  if (journal_ipc_path_ == _default_journal_ipc_path_) {
    journal_ipc_path_ = new ::std::string;
  }
  journal_ipc_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_path)
}
inline ::std::string* HardwareMonitoringClientInitParams::mutable_journal_ipc_path() {
  set_has_journal_ipc_path();
  if (journal_ipc_path_ == _default_journal_ipc_path_) {
    journal_ipc_path_ = new ::std::string(*_default_journal_ipc_path_);
  }
  // @@protoc_insertion_point(field_mutable:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_path)
  return journal_ipc_path_;
}
inline ::std::string* HardwareMonitoringClientInitParams::release_journal_ipc_path() {
  clear_has_journal_ipc_path();
  if (journal_ipc_path_ == _default_journal_ipc_path_) {
    return NULL;
  } else {
    ::std::string* temp = journal_ipc_path_;
    journal_ipc_path_ = const_cast< ::std::string*>(_default_journal_ipc_path_);
    return temp;
  }
}
inline void HardwareMonitoringClientInitParams::set_allocated_journal_ipc_path(::std::string* journal_ipc_path) {
  if (journal_ipc_path_ != _default_journal_ipc_path_) {
    delete journal_ipc_path_;
  }
  if (journal_ipc_path) {
    set_has_journal_ipc_path();
    journal_ipc_path_ = journal_ipc_path;
  } else {
    clear_has_journal_ipc_path();
    journal_ipc_path_ = const_cast< ::std::string*>(_default_journal_ipc_path_);
  }
  // @@protoc_insertion_point(field_set_allocated:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_path)
}

// optional uint32 journal_ipc_key = 4 [default = 45];
inline bool HardwareMonitoringClientInitParams::has_journal_ipc_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_journal_ipc_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HardwareMonitoringClientInitParams::clear_has_journal_ipc_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HardwareMonitoringClientInitParams::clear_journal_ipc_key() {
  journal_ipc_key_ = 45u;
  clear_has_journal_ipc_key();
}
inline ::google::protobuf::uint32 HardwareMonitoringClientInitParams::journal_ipc_key() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_key)
  return journal_ipc_key_;
}
inline void HardwareMonitoringClientInitParams::set_journal_ipc_key(::google::protobuf::uint32 value) {
  set_has_journal_ipc_key();
  journal_ipc_key_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.journal_ipc_key)
}

// optional string hwserver_ipc_path = 5 [default = "/mnt/share"];
inline bool HardwareMonitoringClientInitParams::has_hwserver_ipc_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_hwserver_ipc_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HardwareMonitoringClientInitParams::clear_has_hwserver_ipc_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HardwareMonitoringClientInitParams::clear_hwserver_ipc_path() {
  if (hwserver_ipc_path_ != _default_hwserver_ipc_path_) {
    hwserver_ipc_path_->assign(*_default_hwserver_ipc_path_);
  }
  clear_has_hwserver_ipc_path();
}
inline const ::std::string& HardwareMonitoringClientInitParams::hwserver_ipc_path() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_path)
  return *hwserver_ipc_path_;
}
inline void HardwareMonitoringClientInitParams::set_hwserver_ipc_path(const ::std::string& value) {
  set_has_hwserver_ipc_path();
  if (hwserver_ipc_path_ == _default_hwserver_ipc_path_) {
    hwserver_ipc_path_ = new ::std::string;
  }
  hwserver_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_path)
}
inline void HardwareMonitoringClientInitParams::set_hwserver_ipc_path(const char* value) {
  set_has_hwserver_ipc_path();
  if (hwserver_ipc_path_ == _default_hwserver_ipc_path_) {
    hwserver_ipc_path_ = new ::std::string;
  }
  hwserver_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_path)
}
inline void HardwareMonitoringClientInitParams::set_hwserver_ipc_path(const char* value, size_t size) {
  set_has_hwserver_ipc_path();
  if (hwserver_ipc_path_ == _default_hwserver_ipc_path_) {
    hwserver_ipc_path_ = new ::std::string;
  }
  hwserver_ipc_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_path)
}
inline ::std::string* HardwareMonitoringClientInitParams::mutable_hwserver_ipc_path() {
  set_has_hwserver_ipc_path();
  if (hwserver_ipc_path_ == _default_hwserver_ipc_path_) {
    hwserver_ipc_path_ = new ::std::string(*_default_hwserver_ipc_path_);
  }
  // @@protoc_insertion_point(field_mutable:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_path)
  return hwserver_ipc_path_;
}
inline ::std::string* HardwareMonitoringClientInitParams::release_hwserver_ipc_path() {
  clear_has_hwserver_ipc_path();
  if (hwserver_ipc_path_ == _default_hwserver_ipc_path_) {
    return NULL;
  } else {
    ::std::string* temp = hwserver_ipc_path_;
    hwserver_ipc_path_ = const_cast< ::std::string*>(_default_hwserver_ipc_path_);
    return temp;
  }
}
inline void HardwareMonitoringClientInitParams::set_allocated_hwserver_ipc_path(::std::string* hwserver_ipc_path) {
  if (hwserver_ipc_path_ != _default_hwserver_ipc_path_) {
    delete hwserver_ipc_path_;
  }
  if (hwserver_ipc_path) {
    set_has_hwserver_ipc_path();
    hwserver_ipc_path_ = hwserver_ipc_path;
  } else {
    clear_has_hwserver_ipc_path();
    hwserver_ipc_path_ = const_cast< ::std::string*>(_default_hwserver_ipc_path_);
  }
  // @@protoc_insertion_point(field_set_allocated:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_path)
}

// optional uint32 hwserver_ipc_key = 6 [default = 44];
inline bool HardwareMonitoringClientInitParams::has_hwserver_ipc_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_hwserver_ipc_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HardwareMonitoringClientInitParams::clear_has_hwserver_ipc_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HardwareMonitoringClientInitParams::clear_hwserver_ipc_key() {
  hwserver_ipc_key_ = 44u;
  clear_has_hwserver_ipc_key();
}
inline ::google::protobuf::uint32 HardwareMonitoringClientInitParams::hwserver_ipc_key() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_key)
  return hwserver_ipc_key_;
}
inline void HardwareMonitoringClientInitParams::set_hwserver_ipc_key(::google::protobuf::uint32 value) {
  set_has_hwserver_ipc_key();
  hwserver_ipc_key_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.hwserver_ipc_key)
}

// optional string own_ipc_path = 7 [default = "/etc"];
inline bool HardwareMonitoringClientInitParams::has_own_ipc_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_own_ipc_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HardwareMonitoringClientInitParams::clear_has_own_ipc_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HardwareMonitoringClientInitParams::clear_own_ipc_path() {
  if (own_ipc_path_ != _default_own_ipc_path_) {
    own_ipc_path_->assign(*_default_own_ipc_path_);
  }
  clear_has_own_ipc_path();
}
inline const ::std::string& HardwareMonitoringClientInitParams::own_ipc_path() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_path)
  return *own_ipc_path_;
}
inline void HardwareMonitoringClientInitParams::set_own_ipc_path(const ::std::string& value) {
  set_has_own_ipc_path();
  if (own_ipc_path_ == _default_own_ipc_path_) {
    own_ipc_path_ = new ::std::string;
  }
  own_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_path)
}
inline void HardwareMonitoringClientInitParams::set_own_ipc_path(const char* value) {
  set_has_own_ipc_path();
  if (own_ipc_path_ == _default_own_ipc_path_) {
    own_ipc_path_ = new ::std::string;
  }
  own_ipc_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_path)
}
inline void HardwareMonitoringClientInitParams::set_own_ipc_path(const char* value, size_t size) {
  set_has_own_ipc_path();
  if (own_ipc_path_ == _default_own_ipc_path_) {
    own_ipc_path_ = new ::std::string;
  }
  own_ipc_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_path)
}
inline ::std::string* HardwareMonitoringClientInitParams::mutable_own_ipc_path() {
  set_has_own_ipc_path();
  if (own_ipc_path_ == _default_own_ipc_path_) {
    own_ipc_path_ = new ::std::string(*_default_own_ipc_path_);
  }
  // @@protoc_insertion_point(field_mutable:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_path)
  return own_ipc_path_;
}
inline ::std::string* HardwareMonitoringClientInitParams::release_own_ipc_path() {
  clear_has_own_ipc_path();
  if (own_ipc_path_ == _default_own_ipc_path_) {
    return NULL;
  } else {
    ::std::string* temp = own_ipc_path_;
    own_ipc_path_ = const_cast< ::std::string*>(_default_own_ipc_path_);
    return temp;
  }
}
inline void HardwareMonitoringClientInitParams::set_allocated_own_ipc_path(::std::string* own_ipc_path) {
  if (own_ipc_path_ != _default_own_ipc_path_) {
    delete own_ipc_path_;
  }
  if (own_ipc_path) {
    set_has_own_ipc_path();
    own_ipc_path_ = own_ipc_path;
  } else {
    clear_has_own_ipc_path();
    own_ipc_path_ = const_cast< ::std::string*>(_default_own_ipc_path_);
  }
  // @@protoc_insertion_point(field_set_allocated:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_path)
}

// optional uint32 own_ipc_key = 8 [default = 22];
inline bool HardwareMonitoringClientInitParams::has_own_ipc_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HardwareMonitoringClientInitParams::set_has_own_ipc_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HardwareMonitoringClientInitParams::clear_has_own_ipc_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HardwareMonitoringClientInitParams::clear_own_ipc_key() {
  own_ipc_key_ = 22u;
  clear_has_own_ipc_key();
}
inline ::google::protobuf::uint32 HardwareMonitoringClientInitParams::own_ipc_key() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_key)
  return own_ipc_key_;
}
inline void HardwareMonitoringClientInitParams::set_own_ipc_key(::google::protobuf::uint32 value) {
  set_has_own_ipc_key();
  own_ipc_key_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HardwareMonitoringClientInitParams.own_ipc_key)
}

// -------------------------------------------------------------------

// HwmonLoggingParams

// required uint32 hwclient_console_level = 1;
inline bool HwmonLoggingParams::has_hwclient_console_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HwmonLoggingParams::set_has_hwclient_console_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HwmonLoggingParams::clear_has_hwclient_console_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HwmonLoggingParams::clear_hwclient_console_level() {
  hwclient_console_level_ = 0u;
  clear_has_hwclient_console_level();
}
inline ::google::protobuf::uint32 HwmonLoggingParams::hwclient_console_level() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HwmonLoggingParams.hwclient_console_level)
  return hwclient_console_level_;
}
inline void HwmonLoggingParams::set_hwclient_console_level(::google::protobuf::uint32 value) {
  set_has_hwclient_console_level();
  hwclient_console_level_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HwmonLoggingParams.hwclient_console_level)
}

// required uint32 hwclient_file_level = 2;
inline bool HwmonLoggingParams::has_hwclient_file_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HwmonLoggingParams::set_has_hwclient_file_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HwmonLoggingParams::clear_has_hwclient_file_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HwmonLoggingParams::clear_hwclient_file_level() {
  hwclient_file_level_ = 0u;
  clear_has_hwclient_file_level();
}
inline ::google::protobuf::uint32 HwmonLoggingParams::hwclient_file_level() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HwmonLoggingParams.hwclient_file_level)
  return hwclient_file_level_;
}
inline void HwmonLoggingParams::set_hwclient_file_level(::google::protobuf::uint32 value) {
  set_has_hwclient_file_level();
  hwclient_file_level_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HwmonLoggingParams.hwclient_file_level)
}

// required uint32 hwclientdaemon_level = 3;
inline bool HwmonLoggingParams::has_hwclientdaemon_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HwmonLoggingParams::set_has_hwclientdaemon_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HwmonLoggingParams::clear_has_hwclientdaemon_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HwmonLoggingParams::clear_hwclientdaemon_level() {
  hwclientdaemon_level_ = 0u;
  clear_has_hwclientdaemon_level();
}
inline ::google::protobuf::uint32 HwmonLoggingParams::hwclientdaemon_level() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HwmonLoggingParams.hwclientdaemon_level)
  return hwclientdaemon_level_;
}
inline void HwmonLoggingParams::set_hwclientdaemon_level(::google::protobuf::uint32 value) {
  set_has_hwclientdaemon_level();
  hwclientdaemon_level_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HwmonLoggingParams.hwclientdaemon_level)
}

// required uint32 main_console_level = 7;
inline bool HwmonLoggingParams::has_main_console_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HwmonLoggingParams::set_has_main_console_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HwmonLoggingParams::clear_has_main_console_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HwmonLoggingParams::clear_main_console_level() {
  main_console_level_ = 0u;
  clear_has_main_console_level();
}
inline ::google::protobuf::uint32 HwmonLoggingParams::main_console_level() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HwmonLoggingParams.main_console_level)
  return main_console_level_;
}
inline void HwmonLoggingParams::set_main_console_level(::google::protobuf::uint32 value) {
  set_has_main_console_level();
  main_console_level_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HwmonLoggingParams.main_console_level)
}

// required uint32 main_file_level = 8;
inline bool HwmonLoggingParams::has_main_file_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HwmonLoggingParams::set_has_main_file_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HwmonLoggingParams::clear_has_main_file_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HwmonLoggingParams::clear_main_file_level() {
  main_file_level_ = 0u;
  clear_has_main_file_level();
}
inline ::google::protobuf::uint32 HwmonLoggingParams::main_file_level() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HwmonLoggingParams.main_file_level)
  return main_file_level_;
}
inline void HwmonLoggingParams::set_main_file_level(::google::protobuf::uint32 value) {
  set_has_main_file_level();
  main_file_level_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HwmonLoggingParams.main_file_level)
}

// required uint32 main_daemon_level = 9;
inline bool HwmonLoggingParams::has_main_daemon_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HwmonLoggingParams::set_has_main_daemon_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HwmonLoggingParams::clear_has_main_daemon_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HwmonLoggingParams::clear_main_daemon_level() {
  main_daemon_level_ = 0u;
  clear_has_main_daemon_level();
}
inline ::google::protobuf::uint32 HwmonLoggingParams::main_daemon_level() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.HwmonLoggingParams.main_daemon_level)
  return main_daemon_level_;
}
inline void HwmonLoggingParams::set_main_daemon_level(::google::protobuf::uint32 value) {
  set_has_main_daemon_level();
  main_daemon_level_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.HwmonLoggingParams.main_daemon_level)
}

// -------------------------------------------------------------------

// SubscriptionMask

// required sint32 error_code = 1;
inline bool SubscriptionMask::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionMask::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionMask::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionMask::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SubscriptionMask::error_code() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.SubscriptionMask.error_code)
  return error_code_;
}
inline void SubscriptionMask::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.SubscriptionMask.error_code)
}

// optional bool battery = 2;
inline bool SubscriptionMask::has_battery() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriptionMask::set_has_battery() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriptionMask::clear_has_battery() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriptionMask::clear_battery() {
  battery_ = false;
  clear_has_battery();
}
inline bool SubscriptionMask::battery() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.SubscriptionMask.battery)
  return battery_;
}
inline void SubscriptionMask::set_battery(bool value) {
  set_has_battery();
  battery_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.SubscriptionMask.battery)
}

// optional bool cpu_temperature = 3;
inline bool SubscriptionMask::has_cpu_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscriptionMask::set_has_cpu_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscriptionMask::clear_has_cpu_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscriptionMask::clear_cpu_temperature() {
  cpu_temperature_ = false;
  clear_has_cpu_temperature();
}
inline bool SubscriptionMask::cpu_temperature() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.SubscriptionMask.cpu_temperature)
  return cpu_temperature_;
}
inline void SubscriptionMask::set_cpu_temperature(bool value) {
  set_has_cpu_temperature();
  cpu_temperature_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.SubscriptionMask.cpu_temperature)
}

// optional bool pbutton_info = 4;
inline bool SubscriptionMask::has_pbutton_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubscriptionMask::set_has_pbutton_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubscriptionMask::clear_has_pbutton_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubscriptionMask::clear_pbutton_info() {
  pbutton_info_ = false;
  clear_has_pbutton_info();
}
inline bool SubscriptionMask::pbutton_info() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.SubscriptionMask.pbutton_info)
  return pbutton_info_;
}
inline void SubscriptionMask::set_pbutton_info(bool value) {
  set_has_pbutton_info();
  pbutton_info_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.SubscriptionMask.pbutton_info)
}

// optional bool pbutton_action = 5;
inline bool SubscriptionMask::has_pbutton_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubscriptionMask::set_has_pbutton_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubscriptionMask::clear_has_pbutton_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubscriptionMask::clear_pbutton_action() {
  pbutton_action_ = false;
  clear_has_pbutton_action();
}
inline bool SubscriptionMask::pbutton_action() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.SubscriptionMask.pbutton_action)
  return pbutton_action_;
}
inline void SubscriptionMask::set_pbutton_action(bool value) {
  set_has_pbutton_action();
  pbutton_action_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.SubscriptionMask.pbutton_action)
}

// -------------------------------------------------------------------

// ServerVersion

// required sint32 error_code = 1;
inline bool ServerVersion::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerVersion::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerVersion::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerVersion::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ServerVersion::error_code() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.ServerVersion.error_code)
  return error_code_;
}
inline void ServerVersion::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.ServerVersion.error_code)
}

// required uint32 major = 2;
inline bool ServerVersion::has_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerVersion::set_has_major() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerVersion::clear_has_major() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerVersion::clear_major() {
  major_ = 0u;
  clear_has_major();
}
inline ::google::protobuf::uint32 ServerVersion::major() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.ServerVersion.major)
  return major_;
}
inline void ServerVersion::set_major(::google::protobuf::uint32 value) {
  set_has_major();
  major_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.ServerVersion.major)
}

// required uint32 minor = 3;
inline bool ServerVersion::has_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerVersion::set_has_minor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerVersion::clear_has_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerVersion::clear_minor() {
  minor_ = 0u;
  clear_has_minor();
}
inline ::google::protobuf::uint32 ServerVersion::minor() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.ServerVersion.minor)
  return minor_;
}
inline void ServerVersion::set_minor(::google::protobuf::uint32 value) {
  set_has_minor();
  minor_ = value;
  // @@protoc_insertion_point(field_set:hardware_monitor.ServerVersion.minor)
}

// required string build = 4;
inline bool ServerVersion::has_build() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerVersion::set_has_build() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerVersion::clear_has_build() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerVersion::clear_build() {
  if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_->clear();
  }
  clear_has_build();
}
inline const ::std::string& ServerVersion::build() const {
  // @@protoc_insertion_point(field_get:hardware_monitor.ServerVersion.build)
  return *build_;
}
inline void ServerVersion::set_build(const ::std::string& value) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  build_->assign(value);
  // @@protoc_insertion_point(field_set:hardware_monitor.ServerVersion.build)
}
inline void ServerVersion::set_build(const char* value) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  build_->assign(value);
  // @@protoc_insertion_point(field_set_char:hardware_monitor.ServerVersion.build)
}
inline void ServerVersion::set_build(const char* value, size_t size) {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  build_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hardware_monitor.ServerVersion.build)
}
inline ::std::string* ServerVersion::mutable_build() {
  set_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:hardware_monitor.ServerVersion.build)
  return build_;
}
inline ::std::string* ServerVersion::release_build() {
  clear_has_build();
  if (build_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_;
    build_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerVersion::set_allocated_build(::std::string* build) {
  if (build_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_;
  }
  if (build) {
    set_has_build();
    build_ = build;
  } else {
    clear_has_build();
    build_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:hardware_monitor.ServerVersion.build)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hardware_monitor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hardware_5fmonitor_2eproto__INCLUDED
